local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "üßäDa Scripts!üßä",
   LoadingTitle = "üßäLoading...üßä",
   LoadingSubtitle = "by p9n2",
   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "üßäDa Scripts!üßä"
   },
   Discord = {
      Enabled = false,
      Invite = "", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "",
      Subtitle = "",
      Note = "",
      FileName = "", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = false, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {""} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})
local MainTab = Window:CreateTab("üßäLock Scriptsüßä", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Main")

Rayfield:Notify({
   Title = "‚¨áÔ∏èDiscord‚¨áÔ∏è",
   Content = "https://discord.gg/RcGxENde8b",
   Duration = 6.5,
   Image = 4483362458,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = "Okay",
         Callback = function()
         print("https://discord.gg/RcGxENde8b")
      end
   },
},
})

local Button = MainTab:CreateButton({
   Name = "üßäAzure Moddedüßä",
   Callback = function()
   loadstring(game:HttpGet("https://raw.githubusercontent.com/Actyrn/Scripts/main/AzureModded"))()
   end,
})

local Button = MainTab:CreateButton({
   Name = "üßäMobile-locküßä",
   Callback = function()
   ScriptSettings = {
    Enabled = true,
    Prediction = 0.1433,
    HitscanPriority = "HumanoidRootPart",
    FOV = 100,
    Scan = true,
    JumpOffset = 0,
    TargetStrafeSettings = {
        Enabled = true,
        GiveTool = true,
        Speed = 1,
        Height = 4,
        Distance = 7
    },
    CameraLock = {
        Enabled = true,
        Smoothing = 0.5
    }
}

loadstring(game:HttpGet("https://api.luarmor.net/files/v3/loaders/7dd05d66b1acebfeec4fb31431a601eb.lua"))() 
   end,
})

local Button = MainTab:CreateButton({
   Name = "üßäDownfallüßä",
   Callback = function()
loadstring(game:HttpGet("https://downfall.lol/loader.lua"))()
 end,
})

local Button = MainTab:CreateButton({
   Name = "üßäHowl.ccüßä",
   Callback = function()
   getgenv().Howl = {
    Aimbot = {
        Keybind = Enum.KeyCode.T,
        AimBotSkid = 0.187,
        Prediction = 0.1247724521,

        ShakeEnabled = false,
        Shake = 0,
        
        Amount = 0.160145,
        Style = "Back",
        Direction = "Inout",

        TargetPart = "HumanoidRootPart",
    
    },
    ['HitBox'] = {
        Part = "HumanoidRootPart",
    },
    ['Resolver'] = {
        Enabled = true,
    },
    ['Silent'] = {
        Prediction = 0.1279,
        Detection = {Close = 27, Mid = 38, Far = math.huge},
    },
    ['SpecificDis'] = {
        Enabled = true,
        Prediction = {
            Close = 0.116243115666,
            Mid = 0.1188237,
            Far = 0.1224451,
        },
    },
    ['OffSets'] = {
        Jump = {Amount = 0.90},
        Fall = {Amount = -1.50},
    },  
    ['FieldOfView'] = {
        Enabled = false,
        Size = 240,
        Color = Color3.fromRGB(255, 255, 255),
        Transparency = 1,
        Filled = false,
    },
    ['Air'] = {
        Enabled = true,
        AirPart = "Head",
    },
    ['Checks'] = {
        TargetDeath = true,
        PlayerDeath = true,
        PlayerDeath = true,
    },
    
    ['Macro'] = {
        Enabled = false,
        Keybind = "x",
        Speed = 0.0200,
        Type = "Third", -- "First", "Third"
    },
    
    ['Spin'] = {
        Enabled = true,
        SpinSpeed = 4900,
        Degrees = 360,
        Keybind = Enum.KeyCode.V,
    },
}



if (not getgenv().Loaded) then
local userInputService = game:GetService("UserInputService")

local function CheckAnti(Plr) -- // Anti-aim detection
    if Plr.Character.HumanoidRootPart.Velocity.Y < -70 then
        return true
    elseif Plr and (Plr.Character.HumanoidRootPart.Velocity.X > 450 or Plr.Character.HumanoidRootPart.Velocity.X < -35) then
        return true
    elseif Plr and Plr.Character.HumanoidRootPart.Velocity.Y > 60 then
        return true
    elseif Plr and (Plr.Character.HumanoidRootPart.Velocity.Z > 35 or Plr.Character.HumanoidRootPart.Velocity.Z < -35) then
        return true
    else
        return false
    end
end

local function getnamecall()
     if game.PlaceId == 2788229376 or game.PlaceId == 7213786345 or game.PlaceId == 16033173781 or game.PlaceId == 16158576873 then 
        return "UpdateMousePosI"
    elseif game.PlaceId == 5602055394 or game.PlaceId == 7951883376 then
        return "MousePos"
    elseif game.PlaceId == 9825515356 then
        return "GetMousePos"
    end
end

function MainEventLocate()
    for _,v in pairs(game:GetService("ReplicatedStorage"):GetDescendants()) do
        if v.Name == "MainEvent" then
            return v
        end
    end
end

local Locking = false
local Players = game:GetService("Players")
local Client = Players.LocalPlayer
local Plr = nil -- Initialize Plr here

-- 360 on bind
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local Toggle = false -- Initialize Toggle to false

local function OnKeyPress(Input, GameProcessedEvent)
    if Input.KeyCode == getgenv().Howl.Aimbot.Keybind and not GameProcessedEvent then 
        Toggle = not Toggle
    elseif Input.KeyCode == getgenv().Howl.Macro.SpeedGlitchKey then
        if getgenv().Howl.Macro.Enabled then 
            getgenv().Howl.Macro.SpeedGlitch = not getgenv().Howl.Macro.SpeedGlitch
            if getgenv().Howl.Macro.SpeedGlitch then
                repeat
                    game:GetService("RunService").Heartbeat:Wait()
                    keypress(0x49)
                    game:GetService("RunService").Heartbeat:Wait()
                    keypress(0x4F)
                    game:GetService("RunService").Heartbeat:Wait()
                    keyrelease(0x49)
                    game:GetService("RunService").Heartbeat:Wait()
                    keyrelease(0x4F)
                    game:GetService("RunService").Heartbeat:Wait()
                until not getgenv().Howl.Macro.SpeedGlitch
            end
        end
    end
end

UserInputService.InputBegan:Connect(OnKeyPress)

UserInputService.InputBegan:Connect(function(keygo, ok)
    if (not ok) then
        if (keygo.KeyCode == getgenv().Howl.Aimbot.Keybind) then
            Locking = not Locking
            if Locking then
                Plr = getClosestPlayerToCursor()
            elseif not Locking then
                if Plr then
                    Plr = nil
                end
            end
        end
    end
end)

function getClosestPlayerToCursor()
    local closestDist = math.huge
    local closestPlr = nil
    for _, v in ipairs(Players:GetPlayers()) do
        if v ~= Client and v.Character and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health > 0 then
            local screenPos, cameraVisible = workspace.CurrentCamera:WorldToViewportPoint(v.Character.HumanoidRootPart.Position)
            if cameraVisible then
                local distToMouse = (Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
                if distToMouse < closestDist then
                    closestPlr = v
                    closestDist = distToMouse
                end
            end
        end
    end
    return closestPlr
end

function getClosestPartToCursor(Player)
    local closestPart, closestDist = nil, math.huge
    if Player.Character and Player.Character:FindFirstChild("Humanoid") and Player.Character:FindFirstChild("Head") and Player.Character.Humanoid.Health ~= 0 and Player.Character:FindFirstChild("HumanoidRootPart") then
        for i, part in pairs(Player.Character:GetChildren()) do
            if part:IsA("BasePart") then
                local screenPos, cameraVisible = workspace.CurrentCamera:WorldToViewportPoint(part.Position)
                local distToMouse = (Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
                if distToMouse < closestDist and table.find(getgenv().Howl.Aimbot.MultipleTargetPart, part.Name) then
                    closestPart = part
                    closestDist = distToMouse
                end
            end
        end
        return closestPart
    end
end

game:GetService("RunService").RenderStepped:Connect(function()
    if Plr and Plr.Character then
        if getgenv().Howl.Aimbot.NearestPart == true and getgenv().Howl.Aimbot.Basic == false then
            getgenv().Howl.Aimbot.TargetPart = tostring(getClosestPartToCursor(Plr))
        elseif getgenv().Howl.Aimbot.Basic == true and getgenv().Howl.Aimbot.NearestPart == false then
            getgenv().Howl.Aimbot.TargetPart = getgenv().Howl.Aimbot.TargetPart
        end
    end
end)

local function getVelocity(Player)
    local Old = Player.Character.HumanoidRootPart.Position
    wait(0.145)
    local Current = Player.Character.HumanoidRootPart.Position
    return (Current - Old) / 0.145
end

local function GetShakedVector3(Setting)
    return Vector3.new(math.random(-Setting * 1e9, Setting * 1e9), math.random(-Setting * 1e9, Setting * 1e9), math.random(-Setting * 1e9, Setting * 1e9)) / 1e9;
end

local v = nil
game:GetService("RunService").Heartbeat:Connect(function(deltaTime)
    if Plr ~= nil and Plr.Character and Plr.Character:FindFirstChild("HumanoidRootPart") then
        v = getVelocity(Plr)
    end
end)

local mainevent = game:GetService("ReplicatedStorage").MainEvent

Client.Character.ChildAdded:Connect(function(child)
    if child:IsA("Tool") and child:FindFirstChild("MaxAmmo") then
        child.Activated:Connect(function()
            if Plr and Plr.Character then
                local Position = Plr.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall and Plr.Character[getgenv().Howl.Aimbot.TargetPart].Position + Vector3.new(0, getgenv().Howl.Aimbot.JumpOffset, 0) or Plr.Character[getgenv().Howl.Aimbot.TargetPart].Position
                if game.PlaceId == 2788229376 or game.PlaceId == 7213786345 or game.PlaceId == 16033173781 or game.PlaceId == 16158576873 then 
                    mainevent:FireServer("UpdateMousePosI", Position + ((Plr.Character.HumanoidRootPart.Velocity) * getgenv().Howl.Aimbot.Prediction))
                else
                    mainevent:FireServer("UpdateMousePos", Position + ((Plr.Character.Humanoid.MoveDirection * Plr.Character.Humanoid.WalkSpeed) * getgenv().Howl.Aimbot.Prediction))
                end
            end
        end)
    end
end)

Client.CharacterAdded:Connect(function(character)
    character.ChildAdded:Connect(function(child)
        if child:IsA("Tool") and child:FindFirstChild("MaxAmmo") then
            child.Activated:Connect(function()
                if Plr and Plr.Character then
                    local Position = Plr.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall and Plr.Character[getgenv().Howl.Aimbot.TargetPart].Position + Vector3.new(0, getgenv().Howl.Aimbot.JumpOffset, 0) or Plr.Character[getgenv().Howl.Aimbot.TargetPart].Position
                    if game.PlaceId == 2788229376 or game.PlaceId == 7213786345 or game.PlaceId == 16033173781 or game.PlaceId == 16158576873 then 
                        mainevent:FireServer("UpdateMousePosI", Position + ((Plr.Character.HumanoidRootPart.Velocity) * getgenv().Howl.Aimbot.Prediction))
                    else
                        mainevent:FireServer("UpdateMousePos", Position + ((Plr.Character.Humanoid.MoveDirection * Plr.Character.Humanoid.WalkSpeed) * getgenv().Howl.Aimbot.Prediction))
                    end
                end
            end)
        end
    end)
end)

game:GetService("RunService").RenderStepped:Connect(function()
    if Plr ~= nil and Plr.Character then
        local Position = Plr.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall and Plr.Character[getgenv().Howl.Aimbot.TargetPart].Position + Vector3.new(0, getgenv().Howl.Aimbot.JumpOffset, 0) or Plr.Character[getgenv().Howl.Aimbot.TargetPart].Position
        if not CheckAnti(Plr) then
            local Main = CFrame.new(workspace.CurrentCamera.CFrame.p, Position + ((Plr.Character.HumanoidRootPart.Velocity) * getgenv().Howl.Aimbot.AimBotSkid) + GetShakedVector3(getgenv().Howl.Aimbot.Shake))
            workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame:Lerp(Main, getgenv().Howl.Aimbot.Amount, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
        else
            local Main = CFrame.new(workspace.CurrentCamera.CFrame.p, Position + ((Plr.Character.Humanoid.MoveDirection * Plr.Character.Humanoid.WalkSpeed) * getgenv().Howl.Aimbot.AimBotSkid) + GetShakedVector3(getgenv().Howl.Aimbot.CameraShake))
            workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame:Lerp(Main, getgenv().Howl.Aimbot.Amount, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
        end
    end
    if getgenv().Howl.Checks.PlayerDeath == true and Plr and Plr.Character then
        local KOd = Plr.Character:WaitForChild("BodyEffects")["K.O"].Value
        local Grabbed = Plr.Character:FindFirstChild("GRABBING_CONSTRAINT") ~= nil
        if Plr.Character.Humanoid.Health < 1 or KOd or Grabbed then
            if Locking == true then
                Plr = nil
                Locking = false
            end
        end
    end
    if getgenv().Howl.Checks.TargetDeath == true and Plr and Plr.Character:FindFirstChild("Humanoid") then
        if Plr.Character.Humanoid.health < 1 then
            if Locking == true then
                Plr = nil
                Locking = false
            end
        end
    end
    if getgenv().Howl.Checks.PlayerDeath  == true and Client.Character and Client.Character:FindFirstChild("Humanoid") and Client.Character.Humanoid.health < 1 then
        if Locking == true then
            Plr = nil
            Locking = false
        end
    end
    if getgenv().Howl.Safety.AntiGroundShots == true and Plr.Character.Humanoid.Jump == true and Plr.Character.Humanoid.FloorMaterial == Enum.Material.Air then
        pcall(function()
            local TargetVelv5 = Plr.Character.HumanoidRootPart
    TargetVelv5.Velocity = Vector3.new(TargetVelv5.Velocity.X, math.abs(TargetVelv5.Velocity.Y * 0.36),
     TargetVelv5.Velocity.Z)
            TargetVelv5.AssemblyLinearVelocity = Vector3.new(TargetVelv5.Velocity.X, math.abs(TargetVelv5.Velocity.Y * 0.36), TargetVelv5.Velocity.Z)
        end)
    end
end)

if getgenv().Howl.Spin.Enabled == true then
    
    local Players = game:GetService("Players")
    local UserInputService = game:GetService("UserInputService")
    local RunService = game:GetService("RunService")
    local Camera = workspace.CurrentCamera
    local Toggle = getgenv().Howl.Spin.Enabled
    local RotationSpeed = getgenv().Howl.Spin.SpinSpeed
    local Keybind = getgenv().Howl.Spin.Keybind
    
    local function OnKeyPress(Input, GameProcessedEvent)
        if Input.KeyCode == Keybind and not GameProcessedEvent then 
            Toggle = not Toggle
        end
    end
    
    UserInputService.InputBegan:Connect(OnKeyPress)
    
    local LastRenderTime = 0
    local TotalRotation = 0
    
    local function RotateCamera()
        if Toggle then
            local CurrentTime = tick()
            local TimeDelta = math.min(CurrentTime - LastRenderTime, 0.01)
            LastRenderTime = CurrentTime
    
            local RotationAngle = RotationSpeed * TimeDelta
            local Rotation = CFrame.fromAxisAngle(Vector3.new(0, 1, 0), math.rad(RotationAngle))
            Camera.CFrame = Camera.CFrame * Rotation
    
            TotalRotation = TotalRotation + RotationAngle
            if TotalRotation >= getgenv().Howl.Spin.Degrees then 
                Toggle = false
                TotalRotation = 0
            end
        end
    end
    
    RunService.RenderStepped:Connect(RotateCamera)
    end

getgenv().Loaded = true -- end of the script
else
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Howl",
        Text = "Updated Table",
        Duration = 0.001
    })
end
   end,
})

local Button = MainTab:CreateButton({
   Name = "üßäMisery.ccüßä",
   Callback = function()
   
--[[

// Misery Source || v1.0.5
// Hi calls || << >>

]]--

print("=")

--// Initialize
if not game:IsLoaded() then
    game.Loaded:Wait()
end

print("=")
  
  if (not LPH_OBFUSCATED) then
      LPH_NO_VIRTUALIZE = function(...) return (...) end;
      LPH_JIT_MAX = function(...) return (...) end;
      LPH_JIT_ULTRA = function(...) return (...) end;
  end

  print("CheckPoint 1")
  
  --// Custom Drawing
  -- loadstring((syn and syn.request or request)({Url = "https://rentry.co/7osf4/raw", Method = "Get"}).Body)(); -- J4VZ9cJh
  local MainColor = Color3.fromRGB(255, 102, 204)
  local CrosshairHandler = loadstring(game:HttpGet('https://rentry.co/gp986rdd/raw', true))() do
    getgenv().crosshair.enabled = false
    getgenv().crosshair.color = MainColor
  end
  local ESPHandler = loadstring(game:HttpGet('https://rentry.co/kn2pfu48/raw', true))() do
    getgenv().esp.Enabled = false
    getgenv().esp.SkeletonEnabled = false
    getgenv().esp.ChamsEnabled = false
  end

  local YunDrawingApi = loadstring(game:HttpGet('https://raw.githubusercontent.com/caIIed/Librarys/main/Yun%20Api.lua', true))()

  local TargetCircle = YunDrawingApi:New3DCircle() do
    TargetCircle.Visible = false
    TargetCircle.ZIndex = 1
    TargetCircle.Transparency = 1
    TargetCircle.Color = MainColor
    TargetCircle.Thickness = 1
    TargetCircle.Radius = 2
    TargetCircle.Rotation = Vector2.new(2, 0)
end
  
  --// Services
  local Workspace = game:GetService("Workspace")
  local Debris            = game:GetService('Debris');
  local Players = game:GetService("Players")
  local UserInputService = game:GetService('UserInputService')
  local TweenService = game:GetService('TweenService')
  local ContextAction = game:GetService('ContextActionService')
  local Lighting = game:GetService('Lighting')
  local MarketPlace = game:GetService('MarketplaceService')
  local RunService = game:GetService('RunService')
  local ReplicatedStorage = game:GetService('ReplicatedStorage')
  
  --// Variables

  print("CheckPoint 2")
  
  local Target = nil
  local Notification_Icon = "rbxassetid://57254792"
  
  
  local Notifications = {};
  local Utility = {};
  local TracerLine, nigganiggaXD , FakeHitboxPart, DotParent, newBillboard, newFrame, newUiCornor = Drawing.new("Line"), Instance.new("MeshPart"), Instance.new("Part",game.Workspace), Instance.new("Part",game.Workspace), Instance.new("BillboardGui", DotParent), Instance.new("Frame", newBillboard),  Instance.new("UICorner", newFrame)
  local sayMessage = function(msg) ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(msg, "ALL") end
  task.spawn(function ()
    newBillboard.Name = "endless"
    newBillboard.Adornee = DotParent
    newBillboard.Size = UDim2.new(1, 0, 1, 0)
    newBillboard.AlwaysOnTop = true
    newFrame.Size = UDim2.new(1, 0, 1, 0)
    newFrame.BackgroundTransparency = 0
    newUiCornor.CornerRadius = UDim.new(50, 50)
    DotParent.CanCollide = false
    DotParent.Anchored = true
    DotParent.CFrame = CFrame.new(0,2000,0)
    DotParent.Transparency = 1
    nigganiggaXD.MeshId = "rbxassetid://3726303797"  --3726303797
    nigganiggaXD.CanCollide = false
    nigganiggaXD.Anchored = true
    nigganiggaXD.Material = Enum.Material.Neon
    nigganiggaXD.Parent = game.Workspace
  end)
  
  local AntiAimViewer_Enabled = false
  local AntiAimViewer_HighLight = false
  local AntiAimViewer_HighLight_OutLineColor = Color3.fromRGB(255, 255, 255)
  local AntiAimViewer_HighLight_FillColor = MainColor
  
  local AntiAimViewer_Color = Color3.fromRGB(255, 102, 204)
  local AntiAimViewer_Target = nil
  local AntiAimViewer_Method = "MousePos"
  
  local Client = Players.LocalPlayer
  local ClientCharacter = Client and (Client.Character or Client.CharacterAdded:Wait())
  local enabled, TargetFalling, DetectAnti, AntiGroundValue, WhenAntiGroundActivate, Script = false, false, true, 0.5, -20, {
    Drawing = {},
    Connections = {},
    Locals = {
        NetworkShouldSleep = false,
        OriginalVelocity = {}
    },
    Functions = {}
}
  local Mouse, Camera = Client:GetMouse(), game:GetService("Workspace").CurrentCamera
  local PreviousPosition, PreviusVelocity = Vector3.new(0,0,0), Vector3.new(0,0,0)
  local req =  (syn and syn.request or request);
  local CFrameSpeedKeyBind
  local flyvariableshit = false
  local chatSpamTick = tick()
  local GuiService   = game:GetService('GuiService');
  local GetGuiInset = GuiService.GetGuiInset


  local EnabledTrashTalkF = true;
  getgenv().UsableTrashTalk = false
  
  
  local raycastParams = RaycastParams.new()
  raycastParams.FilterDescendantsInstances = {Workspace.CurrentCamera, ClientCharacter}
  raycastParams.FilterType = Enum.RaycastFilterType.Exclude
  raycastParams.IgnoreWater = true
  
  --// Tables
  local Notifications = {};
  local Utility = {};
  local FoVCircle = Drawing.new('Circle') do
    FoVCircle.Radius       = 1500
    FoVCircle.Color        = MainColor
    FoVCircle.Filled       = false
    FoVCircle.NumSides     = 120
    FoVCircle.Transparency = 1
    FoVCircle.Visible      = false
end

local TeleportService = game:GetService("TeleportService");
local Desync = {}

local Notifications = {};
local Utility = {};
local Games = {
    [2788229376] = {Name = "Da Hood",                  Argument = "UpdateMousePosI"},
    [16033173781] = {Name = "Da Hood Macro",                  Argument = "UpdateMousePosI"},
    [9825515356] = {Name = "Hood Customs",             Argument = "MousePosUpdate"},
    [5602055394] = {Name = "Hood Modded",              Argument = "MousePos"},
    [9183932460] = {Name = "Untitled Hood",            Argument = "UpdateMousePos"},
    [16709048641] = {Name = "Da Downhill",             Argument = "MOUSE"},
    [16357436647] = {Name = "Hood Bank",               Argument = "MOUSE"},
    [16357446356] = {Name = "Da Uphill",               Argument = "MOUSE"},
    [15186202290] = {Name = "Da Strike",               Argument = "MOUSE"},
    [15763167440] = {Name = "Da Hood Bot Aim Trainer", Argument = "MOUSE"},
    [11143225577] = {Name = "1v1 Hood Aim Trainer",    Argument = "UpdateMousePos"},
    [15763494605] = {Name = "Hood Aim",                Argument = "MOUSE"},
    [15166543806] = {Name = "Moon Hood",               Argument = "MoonUpdateMousePos"},
}

if Games[game.PlaceId] then
    local gameInfo = Games[game.PlaceId]
    MousePos = gameInfo.Argument
else
    MousePos = "UpdateMousePos"
end

local ItemTable = {
    ['Guns'] = {
        ['LMG'] = '[LMG] - $3978';
        ['AK-47'] = '[AK47] - $2387';
        ['Silencer AR'] = '[SilencerAR] - $1326';
        ['Silencer'] = '[Silencer] - $583';
        ['Revolver'] = '[Revolver] - $1379';
        ['AR'] = '[AR] - $1061';
        ['AUG'] = '[AUG] - $2069';
        ['Double-Barrel'] = '[Double-Barrel SG] - $1432';
        ['Drum Gun'] = '[DrumGun] - $3183';
        ['Flamethrower'] = '[Flamethrower] - $15914';
        ['Glock'] = '[Glock] - $318';
        ['P90'] = '[P90] - $1061';
        ['RPG'] = '[RPG] - $6365';
        ['Rifle'] = '[Rifle] - $1644';
        ['SMG'] = '[SMG] - $796';
        ['Shotgun'] = '[Shotgun] - $1326';
        ['Tactical Shotgun'] = '[TacticalShotgun] - $1857';
    };

    ['Ammo'] = {
        ['LMG'] = '200 [LMG Ammo] - $318';
        ['AK-47'] = '90 [AK47 Ammo] - $85';
        ['Silencer AR'] = '120 [SilencerAR Ammo] - $80';
        ['Silencer'] = '25 [Silencer Ammo] - $53';
        ['Revolver'] = '12 [Revolver Ammo] - $80';
        ['AR'] = '100 [AR Ammo] - $80';
        ['AUG'] = '90 [AUG Ammo] - $85';
        ['Double-Barrel'] = '18 [Double-Barrel SG Ammo] - $53';
        ['Drum Gun'] = '100 [DrumGun Ammo] - $212';
        ['Flamethrower'] = '140 [Flamethrower Ammo] - $1644';
        ['Glock'] = '25 [Glock Ammo] - $64';
        ['P90'] = '120 [P90 Ammo] - $64';
        ['RPG'] = '5 [RPG Ammo] - $1061';
        ['Rifle'] = '5 [Rifle Ammo] - $265';
        ['SMG'] = '80 [SMG Ammo] - $64';
        ['Shotgun'] = '20 [Shotgun Ammo] - $64';
        ['Tactical Shotgun'] = '20 [TacticalShotgun Ammo] - $64';
    };

    ['Armor'] = {
        ['High'] = '[High-Medium Armor] - $2440';
        ['Medium'] = '[Medium Armor] - $1061';
        ['Fire'] = '[Fire Armor] - $2493';
    };
};

  local AssetTable = {
      Sounds = {
          ['None']         = '',
          ['OSU']          = 'rbxassetid://7147454322',
          ['Neverlose']    = 'rbxassetid://7216848832',
          ['Bameware']     = 'rbxassetid://3124331820',
          ['Hitmarker']    = 'rbxassetid://160432334',
          ['skeet']        = 'rbxassetid://4817809188',
          ['Rust']         = 'rbxassetid://5043539486',
          ['Lazer Beam']   = 'rbxassetid://130791043',
          ['Bow Hit']      = 'rbxassetid://1053296915',
          ['Bow']          = 'rbxassetid://3442683707',
          ['TF2 Hitsound'] = 'rbxassetid://3455144981',
          ['TF2 Critical'] = 'rbxassetid://296102734',
      };
      Textures = {
          ['Normal'] = 'rbxassetid://7151778302',
          ['Fog'] = 'rbxassetid://9150635648',
      };
  };
  
  local ItemTableValues = {Sounds = {}, Guns = {}, Ammo = {}}; do 
  
      for i, v in pairs(AssetTable.Sounds) do
          table.insert(ItemTableValues.Sounds, i)
      end

      for i, v in pairs(ItemTable.Guns) do 
        table.insert(ItemTableValues.Guns, i)
    end 

    for i, v in pairs(ItemTable.Ammo) do 
        table.insert(ItemTableValues.Ammo, i)
    end 
  
  end 
  
  local Settings = {
    ['AntiAim'] = {
        ['InvisibleDesync'] = { ['Enabled'] = false;
            ['X'] = {['Start'] = -16000; ['End'] = 16000;};
            ['Y'] = {['Start'] = -16000; ['End'] = 16000;};
            ['Z'] = {['Start'] = -16000; ['End'] = 16000;};
        }
    },

    ['Destroy Cheaters'] = {
        Enabled = false,
        Keybind = Enum.KeyCode.G,
    };

    ['Combat'] = {
        ['TargetLock'] = {
            Enabled = false,
            Predict = true,
            KeyBind = Enum.KeyCode.T,
            Prediction = 0.135,
            HitParts = 'HumanoidRootPart',
            NearestPart = false,
            HitPartMode = 'Nearest Point',
            Notifications = false,
        },
        ['Stuff'] = {
            LookAt = false,
            Spectate = false,
            Notification = false,
            AutoPrediction = true,
        },
        ['Checks'] = {
            Resolver = true,
            ResolverMethod = 'Recaculate',
            AimviewerBypass = true,
            NoGroundShots = true,
            Knocked = true,
            Grabbed = false,
            Friend = false,
            Crew = false,
            AntiCurve = true,
            WallCheck = true,
        },
        ['Visuals'] = {
            ['Line'] = {
                Enabled = true,
                Circle = true,
                Visible = true,
                Color = MainColor,
                Transparency = 1,
                Thickness = 2,
            },
            ['HighLight'] = {
                Enabled = true,
                Transparency = 0,
                FillColor = MainColor,
                OutLineColor = Color3.fromRGB(255, 255, 255),
            },
            ['BackTrack'] = {
                Enabled = true,
                Material = 'ForceField',
                Color = MainColor,
                Delay = 0.1,
                Transparency = 0,
            },
        },
    };
  
    ['Visuals'] = {
        ['Weapon_Chams'] = {
            Enabled = false,
            Material = Enum.Material.SmoothPlastic,
            Color = MainColor,
        },
        ['Character_Chams'] = {
            Enabled = false,
            Material = Enum.Material.ForceField,
            Color = MainColor,

            Trail = false,
            Trail_Color = MainColor,
            Trail_Life = 3,
        },
        ['World_Customization'] = {
            Enabled = false,

            Bars = false,
            BarsColor = MainColor,
        },
        ['Bullet_Trails'] = {
            Enabled = false,
            Magnitude = 12,
            Width = 1.7,
            Brightness = 5,
            Segments = 10,
            LightEmission = 10,
            Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(240, 175, 235)), ColorSequenceKeypoint.new(1, Color3.fromRGB(240, 175, 235))}),
            Speed = 3,
            Texture = 'Normal', -- 12781803086
        },
        ['Hit_Detection'] = {
          Enabled = false,
  
          Notify = true,
          Clone = true,
          Pulse = false,
          Sound = true,
          HitSound = 'Rust',
        },
    };
  
    ['Misc'] = {
        ['Auto_Buy'] = {
            Gun = 'LMG',
        },
        ['Random'] = {
            AutoStomp = false,
            AntiBag = false,
            NoJumpCooldown = false,
            NoSlow = false,
            NoRecoil = false,
        },
        ['Cash'] = {
            AutoDrop = false,
            Amount = 8000,
            AutoPick = false,
        },
        ['NetworkAnti'] = {
            Enabled = false,
            Notification = true,
            Keybind = Enum.KeyCode.K
        },
        ['PredictionDisabler'] = {
            Enabled = false,
            KeyBind = Enum.KeyCode.X,
            Notifications = false,
            Errors = false,
            AutoWalkSpeed = false,
            AnimationSpeed = 21,
            WalkSpeed = 12,
        },
        ['TargetStrafe'] = {
            Enabled = false,
            Visualize_Circle = false,
            Color = Color3.fromRGB(255, 194, 254),
            Distance = 9,
            Speed = 1,
            Height = 0,
  
            Method = 'Strafe', -- Strafe, Randomize
            RandomizeMin = 2,
            RandomizeMax = 17,

            AutoFire = true,
            AutoReload = true,
        },
        ['Fly'] = {
            Enabled = false,
            Notification = false,
            KeyBind = Enum.KeyCode.X,
            Speed = 5 * 50,
        },
        ['WalkSpeed'] = {
            Enabled = false,
            Notifications = false,
            KeyBind = Enum.KeyCode.X,
            Speed = 1,
        },
        ['TrashTalk'] = {
            ['Use'] = {
                Enabled = false,
                Target = false,
                Notification = false,
                UsekeyBind = false,
                KeyBind = Enum.KeyCode.B,
                Method = "Misery",
            },
            ['Words'] = {
                Misery = {"do you have $$$$mmMMIIEERRY!!!", "MoveDirection isn't a resolver", "Skidü§£", "WHERE BRO AIMING AT!?", "Lost 2 Misery", "omg so bad", "imagine dying to me", "whats the point of playing with that aimüôèüòÇ", "WOWZIES", "OH MY DAYS", "Misery'd", "1d luh bro", "WOW U SUCK", "Im right hereüòÇ", "couldnt be me", "just broke ur ankles", "UR ANKLES? GONE?", "destroyed", "LOL DESTROYED", "LOL"},
            },
        },
    };
  
    ['Configs'] = {
        Menu = {
            Keybind = Enum.KeyCode.P,
        },
    };
  };
  
  print("CheckPoint 3")
  
  
  getgenv().MethodBeingUsed = Settings.Misc.TrashTalk.Words.Misery
  
  -- // functions

function Script.Functions.Connection(event, func)
    return event:Connect(func)
end

local function DestroyCheaters()
    Settings['Destroy Cheaters'].Enabled = not Settings['Destroy Cheaters'].Enabled;

    if Settings['Destroy Cheaters'].Enabled then
        local Character = Client and Client.Character
        if Character then
            local RootPart = Character and Character:FindFirstChild('HumanoidRootPart')
            local Position = RootPart and RootPart.CFrame
    
            task.wait()

            while task.wait(2) do
                Desync.cframe = (RootPart.CFrame * CFrame.new(9e9, 0/0, 9e9))
        
                task.wait(1)
    
                Desync.cframe = Position
                task.wait()
                Desync.cframe = nil
            end

        end

    end
end

Script.Functions.Update_Desync = function(bool)
    Settings.AntiAim.InvisibleDesync.Enabled = bool 

    if (not bool) then 
        if (Script.Connections['Invisible Desync']) then 
            Script.Connections['Invisible Desync']:Disconnect()
            Script.Connections['Invisible Desync'] = nil 
        end

        setfflag('S2PhysicsSenderRate', 15)
        setfflag('PhysicsSenderMaxBandwidthBps', 38760)
        sethiddenproperty(Client.Character.HumanoidRootPart, "NetworkIsSleeping", false)
    end
end

Script.Functions.InvisibleDesync = function()   
    local NetworkShouldSleep = false
    if not Script.Connections["Invisible Desync"] then
        Script.Connections["Invisible Desync"] = Script.Functions.Connection(RunService.Heartbeat, function()
            if (not Settings.AntiAim.InvisibleDesync.Enabled) then return end 

            Script.Locals.NetworkShouldSleep = not Script.Locals.NetworkShouldSleep
            setfflag("S2PhysicsSenderRate", tostring(2)) 
            setfflag("PhysicsSenderMaxBandwidthBps", tostring(math.pi/3))

            sethiddenproperty(Client.Character.HumanoidRootPart, "NetworkIsSleeping", Script.Locals.NetworkShouldSleep)
            Script.Locals.OriginalVelocity[1] = Client.Character.HumanoidRootPart.Velocity
            Script.Locals.OriginalVelocity[2] = Client.Character.HumanoidRootPart.AssemblyLinearVelocity

            Client.Character.HumanoidRootPart.Velocity = Client.Character.HumanoidRootPart.Velocity + Vector3.new(math.random(Settings.AntiAim.InvisibleDesync.X['Start'], Settings.AntiAim.InvisibleDesync.X['End']), math.random(Settings.AntiAim.InvisibleDesync.Y['Start'], Settings.AntiAim.InvisibleDesync.Y['End']), math.random(Settings.AntiAim.InvisibleDesync.Z['Start'], Settings.AntiAim.InvisibleDesync.Z['End']))
            Client.Character.HumanoidRootPart.AssemblyLinearVelocity = Client.Character.HumanoidRootPart.AssemblyLinearVelocity + Vector3.new(math.random(Settings.AntiAim.InvisibleDesync.X['Start'], Settings.AntiAim.InvisibleDesync.X['End']), math.random(Settings.AntiAim.InvisibleDesync.Y['Start'], Settings.AntiAim.InvisibleDesync.Y['End']), math.random(Settings.AntiAim.InvisibleDesync.Z['Start'], Settings.AntiAim.InvisibleDesync.Z['End']))

            RunService.RenderStepped:Wait()

            Client.Character.HumanoidRootPart.Velocity = Script.Locals.OriginalVelocity[1]
            Client.Character.HumanoidRootPart.AssemblyLinearVelocity = Script.Locals.OriginalVelocity[2]
            setfflag("S2PhysicsSenderRate", tostring(1))
            NetworkShouldSleep = not NetworkShouldSleep
        end)
    end
    RunService.RenderStepped:Wait()
    sethiddenproperty(Client.Character.HumanoidRootPart, "NetworkIsSleeping", NetworkShouldSleep)
    setfflag("S2PhysicsSenderRate", tostring(15))
end

Script.Functions.InvisibleDesync()

local function ToggleTrail(Bool)
    for i,v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
        if v:IsA("BasePart") then
            if Bool then
                local BlaBla = Instance.new("Trail", v)
                BlaBla.Texture = "rbxassetid://1390780157"
                BlaBla.Parent = v
                local Pointer1 = Instance.new("Attachment", v)
                Pointer1.Name = "Pointer1"
                local Pointer2 = Instance.new("Attachment", game.Players.LocalPlayer.Character.HumanoidRootPart)
                Pointer2.Name = "Pointer2"
                BlaBla.Attachment0 = Pointer1
                BlaBla.Attachment1 = Pointer2
                BlaBla.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Settings.Visuals.Character_Chams.Trail_Color), ColorSequenceKeypoint.new(1, Settings.Visuals.Character_Chams.Trail_Color)});
                BlaBla.Lifetime = Settings.Visuals.Character_Chams.Trail_Life
                BlaBla.Name = "BlaBla" -- Set the name
            else
                for _, child in ipairs(v:GetChildren()) do
                    if child:IsA("Trail") and child.Name == 'BlaBla' then -- Corrected the condition
                        child:Destroy()
                    end
                end
            end
        end
    end
end

local function AutoBuy(Obj, Ammo, Amount)
    local Character = Client and (Client.Character or Client.CharacterAdded:Wait())
    local RootPart  = Character and Character.HumanoidRootPart
    local RootPos   = RootPart.CFrame

    local ObjectPath = Workspace.Ignored.Shop[Obj]
    local ClickDet   = ObjectPath.ClickDetector

    if Character and Ammo then
        for i = 1, Amount do
            RootPart.CFrame = ObjectPath.Head.CFrame
            task.wait(0.3)
            fireclickdetector(ClickDet)
            task.wait(0.15)
        end

        RootPart.CFrame = RootPos
    else
        RootPart.CFrame = ObjectPath.Head.CFrame
        task.wait(0.15)
        fireclickdetector(ClickDet)
        task.wait(0.15)
        RootPart.CFrame = RootPos
    end
end


  function Alive(Player)
    if Player and Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") ~= nil and Player.Character:FindFirstChild("Humanoid") ~= nil and Player.Character:FindFirstChild("Head") ~= nil then
        return true
    end
    return false
  end
  
  local function GetTool()
    local Character = Client.Character 
    local Tool = nil 

    if (not Character) then 
        return Tool
    end

    for _, v in pairs(Character:GetChildren()) do 
        if (not v:IsA('Tool')) then continue end 

        if (v:FindFirstChild('Ammo') and v:FindFirstChild('MaxAmmo')) then 
            Tool = v 
        end
    end

    return Tool
end
  
  function findPlayerByUsername(username)
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player.Name == username then
            return player
        end
    end
    return nil  -- Player not found
  end

  local function FindPlayer(Player)
    for i, v in pairs(Players:GetPlayers()) do
        if (v.Name:lower():find(Player:lower())) then
            if v.Name == Client.name then continue end
            return v
        end
    end
end

  
  
  --\\ Ui
  local Menu = loadstring(req({Url = "https://pastebin.com/raw/55iKqxgB", Method = "Get"}).Body)(); -- WYVJcRAt

    local function MenuNameUpdate()
        while (task.wait()) do
            local Name, PlaceHolder = 'Misery', ''
            for i = 1, #Name do --try
                local Character = string.sub(Name, i, i)
                PlaceHolder = PlaceHolder .. Character
                Menu:SetTitle(PlaceHolder .. '<font color="#' .. tostring(Menu.Accent:ToHex()) .. '">.cc</font>')
                task.wait(.25)
            end
        end
    end
  
    --// functions
    local function MenuToggle(Action_Name: string, State: EnumItem, Input: InputObject)
        if not State or State == Enum.UserInputState.Begin then
            Menu:SetVisible(not Menu.IsVisible)
        end
    end
  
    task.spawn(MenuNameUpdate)
  
    Menu.Accent = MainColor

    Menu.Keybinds = Menu.Keybinds() do
        Menu.Keybinds.Add('Fly', Settings.Misc.Fly.Enabled and 'On' or 'Off')
        Menu.Keybinds.Add('CFrame', Settings.Misc.WalkSpeed.Enabled and 'On' or 'Off')
        Menu.Keybinds.Add('Prediction Breaker', Settings.Misc.PredictionDisabler.Enabled and 'On' or 'Off')
    end

    Menu.Indicators = Menu.Indicators() do
        Menu.Indicators.Add('Target', 'Text', 'nil')
        Menu.Indicators.Add('Target Health', 'Bar', 50, 0, 100) -- Value, Min, Max
        Menu.Indicators.Add('Target Armor', 'Bar', 100, 0, 200) -- Value, Min, Max

        Menu.Indicators.Add('Knocked Out', 'Text', 'True')
        Menu.Indicators.Add('Anti Aiming', 'Text', 'True')
        Menu.Indicators.Add('Target Ammo', 'Bar', 50, 0, 200) -- Value, Min, Max
        --Menu.Indicators:SetPosition(UDim2.new(0, 39, 0, 281))
    end
    Menu.Watermark()
    Menu.Watermark:Update('Misery<font color="#' .. tostring(Menu.Accent:ToHex()) .. '">.cc</font>') -- please fix this and we can add a variable for a color.
  
    local Window = Menu:SetTitle('Misery') do
  
        local CombatTab = Menu.Tab("Main") do
  
            local TargetAimSection = Menu.Container("Main", "Target Aim", "Left") do
                Menu.CheckBox("Main", "Target Aim", "Enabled", false, function(a)
                    Settings.Combat.TargetLock.Enabled = a
                end)
                Menu.Hotkey("Main", "Target Aim", "Keybind", Enum.KeyCode.T, function(a)
                    Settings.Combat.TargetLock.KeyBind = a
                end)
                Menu.CheckBox("Main", "Target Aim", "Look At", false, function(a)
                    Settings.Combat.Stuff.LookAt = a
                end)
                Menu.CheckBox("Main", "Target Aim", "Spectate", false, function(a)
                    Settings.Combat.Stuff.Spectate = a
                end)
                Menu.CheckBox("Main", "Target Aim", "Notification", false, function(a)
                    Settings.Combat.Stuff.Notification = a
                end)
            end
  
            local HitPartSection = Menu.Container("Main", "HitPart", "Left") do
                Menu.CheckBox("Main", "HitPart", "NearestPart", false, function(a)
                    Settings.Combat.TargetLock.NearestPart = a
                end)
                Menu.ComboBox("Main", "HitPart", "NearestPart Mode", "Nearest Part", {"Nearest Point", "Nearest Part"}, function(a)
                    Settings.Combat.TargetLock.HitPartMode = a
                end)
                Menu.ComboBox("Main", "HitPart", "HitPart", "HumanoidRootPart", {"Head", "LeftHand", "RightHand", "LeftLowerArm", "RightLowerArm", "LeftUpperArm", "RightUpperArm", "LeftFoot", "LeftLowerLeg", "UpperTorso", "HumanoidRootPart", "LeftUpperLeg", "RightLowerLeg", "RightFoot", "LowerTorso"}, function(a)
                    Settings.Combat.TargetLock.HitParts = a
                end)
            end
  
            local PredictionSection = Menu.Container("Main", "Prediction", "Left") do
                Menu.CheckBox("Main", "Prediction", "Enabled", true, function(a)
                    Settings.Combat.TargetLock.Predict = a
                end)
                Menu.CheckBox("Main", "Prediction", "Auto Prediction", true, function(a)
                    Settings.Combat.Stuff.AutoPrediction = a
                end)
                Menu.TextBox("Main", "Prediction", "Prediction", '0.135', function(a)
                    Settings.Combat.TargetLock.Prediction = a
                end)
            end
  
            local ChecksSection = Menu.Container("Main", "Checks", "Left") do
                Menu.CheckBox("Main", "Checks", "No Ground Shots", true, function(a)
                    Settings.Combat.Checks.NoGroundShots = a
                end)
                Menu.CheckBox("Main", "Checks", "Anti Curve", true, function(a)
                    Settings.Combat.Checks.AntiCurve = a
                end)
                Menu.CheckBox("Main", "Checks", "Knocked Check", true, function(a)
                    Settings.Combat.Checks.Knocked = a
                end)
                Menu.CheckBox("Main", "Checks", "Grabbed Check", false, function(a)
                    Settings.Combat.Checks.Grabbed = a
                end)
                Menu.CheckBox("Main", "Checks", "Crew Check", false, function(a)
                    Settings.Combat.Checks.Crew = a
                end)
                Menu.CheckBox("Main", "Checks", "Aim Viewer Bypass", true, function(a)
                    print(a)
                end)
                Menu.CheckBox("Main", "Checks", "Resolver", true, function(a)
                    print(a)
                end)
                Menu.CheckBox("Main", "Checks", "Friend Check", false, function(a)
                    Settings.Combat.Checks.Friend = a
                end)
                Menu.CheckBox("Main", "Checks", "Wall Check", true, function(a)
                    Settings.Combat.Checks.WallCheck = a
                end)
            end
  
            local TSSection = Menu.Container("Main", "Target Strafe", "Right") do
                Menu.CheckBox("Main", "Target Strafe", "Enabled", false, function(a)
                    Settings.Misc.TargetStrafe.Enabled = a
                end)
                Menu.ComboBox("Main", "Target Strafe", "Method", "Strafe", {"Strafe", "Randomize"}, function(a)
                  Settings.Misc.TargetStrafe.Method = a
              end)
                Menu.CheckBox("Main", "Target Strafe", "Visualize", false, function(a)
                    Settings.Misc.TargetStrafe.Visualize_Circle = a
                end)
                Menu.CheckBox("Main", "Target Strafe", "Auto Fire", true, function(a)
                    Settings.Misc.TargetStrafe.AutoFire = a
                end)
                Menu.CheckBox("Main", "Target Strafe", "Auto Reload", true, function(a)
                    Settings.Misc.TargetStrafe.AutoReload = a
                end)
                Menu.ColorPicker("Main", "Target Strafe", "Color", MainColor, 0, function(a)
                    Settings.Misc.TargetStrafe.Color = a
                end)
                Menu.Slider("Main", "Target Strafe", "Distance", 0, 50, 9, '', 1, function(a)
                    Settings.Misc.TargetStrafe.Distance = a
                end)
                Menu.Slider("Main", "Target Strafe", "Speed", 0, 15, 1, '', 1, function(a)
                    Settings.Misc.TargetStrafe.Speed = a
                end)
                Menu.Slider("Main", "Target Strafe", "Height", 0, 15, 0, '', 1, function(a)
                    Settings.Misc.TargetStrafe.Height = a
                end)
                Menu.Slider('Main', 'Target Strafe', 'Teleport Min', 1, 20, 2, '', 1, function(Value)
                  Settings.Misc.TargetStrafe.RandomizeMin = Value
              end)
              Menu.Slider('Main', 'Target Strafe', 'Teleport Max', 2, 40, 17, '', 1, function(Value)
                  Settings.Misc.TargetStrafe.RandomizeMax = Value
              end)
  
            end
  
            local HitDetectionSection = Menu.Container("Main", "Hit Detection", "Right") do
              Menu.CheckBox("Main", "Hit Detection", "Enabled", false, function(a)
                  Settings.Visuals.Hit_Detection.Enabled = a
              end)
              Menu.CheckBox("Main", "Hit Detection", "Hit Sound", false, function(a)
                  Settings.Visuals.Hit_Detection.Sound = a
              end)
              Menu.CheckBox("Main", "Hit Detection", "Notify", false, function(a)
                  Settings.Visuals.Hit_Detection.Notify = a
              end)
              Menu.ComboBox('Main', 'Hit Detection', 'Sounds', 'Rust', ItemTableValues.Sounds, function(self)
                  Settings.Visuals.Hit_Detection.HitSound = self
              end)
              Menu.MultiSelect('Main', 'Hit Detection', 'Hit Effects', {
                  ['Clone'] = Settings.Visuals.Hit_Detection.Clone,
                  ['Pulse'] = Settings.Visuals.Hit_Detection.Pulse,
              }, function(Selection)
                  Settings.Visuals.Hit_Detection.Clone = Selection['Clone']
                  Settings.Visuals.Hit_Detection.Pulse = Selection['Pulse']
              end)
  
            end
  
  
        end
  
        local MiscTab = Menu.Tab("Misc") do
  
            local MTSection1 = Menu.Container("Misc", "Prediction Breaker", "Left") do
                Menu.CheckBox("Misc", "Prediction Breaker", "Enabled", false, function(a)
                    Settings.Misc.PredictionDisabler.Enabled = a
                end)
                Menu.Hotkey("Misc", "Prediction Breaker", "Keybind", Enum.KeyCode.X, function(a)
                    Settings.Misc.PredictionDisabler.KeyBind = a
                end)
                Menu.CheckBox("Misc", "Prediction Breaker", "Notifications", false, function(a)
                    Settings.Misc.PredictionDisabler.Notifications = a
                end)
                Menu.CheckBox("Misc", "Prediction Breaker", "Errors", false, function(a)
                    Settings.Misc.PredictionDisabler.Errors = a
                end)
                Menu.CheckBox("Misc", "Prediction Breaker", "Auto Settings", false, function(a)
                    Settings.Misc.PredictionDisabler.AutoWalkSpeed = a
                end)
                Menu.Slider("Misc", "Prediction Breaker", "Animation Speed", 0, 50, 21, '%', 1, function(a)
                    Settings.Misc.PredictionDisabler.AnimationSpeed = a
                end)
                Menu.Slider("Misc", "Prediction Breaker", "Walk Speed", 0, 50, 12, '%', 1, function(a)
                    Settings.Misc.PredictionDisabler.WalkSpeed = a
                end)
            end
  
            local MTSection2 = Menu.Container("Misc", "CFrame Speed", "Right") do
                Menu.CheckBox("Misc", "CFrame Speed", "Enabled", false, function(a)
                    Settings.Misc.WalkSpeed.Enabled = a
                end)
                Menu.Hotkey("Misc", "CFrame Speed", "Keybind", Enum.KeyCode.X, function(a)
                    Settings.Misc.WalkSpeed.KeyBind = a
                end)
                Menu.CheckBox("Misc", "CFrame Speed", "Notification", false, function(a)
                    Settings.Misc.WalkSpeed.Notifications = a
                end)
                Menu.Slider("Misc", "CFrame Speed", "Speed", 0, 10, 3, '%', 1, function(a)
                    Settings.Misc.WalkSpeed.Speed = a
                end)
            end
  
            local MTSection3 = Menu.Container("Misc", "Fly", "Right") do
                Menu.CheckBox("Misc", "Fly", "Enabled", false, function(a)
                    Settings.Misc.Fly.Enabled = a
                end)
                Menu.Hotkey("Misc", "Fly", "Keybind", Enum.KeyCode.X, function(a)
                    Settings.Misc.Fly.KeyBind = a
                end)
                Menu.CheckBox("Misc", "Fly", "Notification", false, function(a)
                    Settings.Misc.Fly.Notification = a
                end)
                Menu.Slider("Misc", "Fly", "Speed", 0, 30, 5, '%', 1, function(a)
                    Settings.Misc.Fly.Speed = a * 50
                end)
            end
  
            local MTSection4 = Menu.Container("Misc", "Trash Talk", "Left") do
                Menu.CheckBox("Misc", "Trash Talk", "Enabled", false, function(a)
                    Settings.Misc.TrashTalk.Use.Enabled = a
                end)
                Menu.CheckBox("Misc", "Trash Talk", "Target", false, function(a)
                    Settings.Misc.TrashTalk.Use.Target = a
                end)
                Menu.CheckBox("Misc", "Trash Talk", "Notification", false, function(a)
                    Settings.Misc.TrashTalk.Use.Notification = a
                end)
                Menu.CheckBox("Misc", "Trash Talk", "Use Keybind", false, function(a)
                    Settings.Misc.TrashTalk.Use.UsekeyBind = a
                end)
                Menu.Hotkey("Misc", "Trash Talk", "Keybind", Enum.KeyCode.B, function(a)
                    Settings.Misc.TrashTalk.Use.KeyBind = a
                end)
            end
  
            local MTSection4 = Menu.Container("Misc", "Network Anti", "Left") do
                Menu.CheckBox("Misc", "Network Anti", "Enabled", false, function(a)
                    Settings.Misc.NetworkAnti.Enabled = a
                end)
                Menu.Hotkey("Misc", "Network Anti", "Keybind", Enum.KeyCode.K, function(a)
                    Settings.Misc.NetworkAnti.KeyBind = a
                end)
                Menu.CheckBox("Misc", "Network Anti", "Notification", false, function(a)
                    Settings.Misc.NetworkAnti.Notification = a
                end)
            end
  
            local MTSection5 = Menu.Container("Misc", "Teleport", "Right") do
                Menu.ComboBox("Misc", "Teleport", "Place :", "Choose", {"Admin Base","Military","Revolver","High Medium Armor","Food","Gas Station","School","Ufo","Bank","Gym Top","Casino","Uphill","PlayGround","Flank"}, function(State)
                    local CFrameValues = {
                        ["Admin Base"] = CFrame.new(-874.903992, -32.6492004, -525.215698),
                        ["High Medium Armor"] = CFrame.new(-934.73651123047, -28.492471694946, 565.99884033203),
                        ["Food"] = CFrame.new(-788.39318847656, -39.649200439453, -935.27795410156),
                        ["Gas Station"] = CFrame.new(608.599426, 65.3087997, -267.643066, -0.414288431, -1.04483455e-09, -0.91014564, -1.30518893e-08, 1, 4.79309215e-09, 0.91014564, 1.38648408e-08, -0.41428),
                        ["School"] = CFrame.new(-581.790283, 68.4947281, 331.046448, 0.220051467, -7.56681329e-05, 0.975498199, -3.96428077e-05, 0.999999583, 8.65130132e-05, -0.975498199, -5.77078645e-05, 0.22005),
                        ["Military"] = CFrame.new(92.643799, 122.749977, -860.128784, 0.986730993, 5.09704545e-09, 0.162363499, -9.24942123e-10, 1, -2.57716568e-08, -0.162363499, 2.52795154e-08, 0.986730993),
                        ["Ufo"] = CFrame.new(65.1504517, 138.999954, -691.819031, -0.935115993, -5.9791418e-08, -0.354341775, -3.10840989e-08, 1, -8.67077574e-08, 0.354341775, -7.0067415e-08, -0.935115993),
                        ["Bank"] = CFrame.new(-374.538391, 102.052887, -440.20871, 0.958144963, 9.24065989e-06, -0.286283433, -9.98981818e-07, 1, 2.89345699e-05, 0.286283433, -2.74375216e-05, 0.958144963),
                        ["Gym Top"] = CFrame.new(-76.178093, 56.6998138, -629.940979, -0.9998914, -1.09370752e-07, 0.0147391548, -1.0945012e-07, 1, -4.57786342e-09, -0.0147391548, -6.1905685e-09, -0.9998914),
                        ["Casino"] = CFrame.new(-1048.95093, 110.254997, -154.554016, 0.198458344, 0.0412604436, -0.979240835, -4.06676299e-05, 0.999113858, 0.0420895219, 0.98010987, -0.00831318926, 0.198284075),
                        ["Uphill"] = CFrame.new(485.651947, 112.5, -644.316833, -0.998899043, 1.33881997e-06, 0.0469136797, 8.00526664e-07, 1, -1.14929126e-05, -0.0469136797, -1.14426994e-05, -0.998899043),
                        ["Revolver"] = CFrame.new(-659.053162, 110.748001, -158.224365, 0.146754071, -2.38941595e-08, -0.989172995, -1.60316838e-09, 1, -2.43935396e-08, 0.989172995, 5.16566212e-09, 0.146754071),
                        ["Flank"] = CFrame.new(376.730621, 130.748001, -245.620468, 0.996583343, 5.90310174e-06, -0.0825867951, -1.72590728e-06, 1, 5.06508768e-05, 0.0825867951, -5.03353003e-05, 0.996583343),
                        ["PlayGround"] = CFrame.new(-260.836182, 126.424866, -877.783875, -0.977067351, -1.56508904e-05, -0.212922528, 9.92513264e-07, 1, -7.80593255e-05, 0.212922528, -7.64806027e-05, -0.977067351),
                    }
  
                if CFrameValues[State] then
                    Client.Character.HumanoidRootPart.CFrame = CFrameValues[State]
                end
                end)
            end

            local AutoBuySection = Menu.Container('Misc', 'Buy', 'Right') do

                Menu.ComboBox('Misc', 'Buy', 'Gun', 'LMG', ItemTableValues.Guns, function(self)
                    Settings.Misc.Auto_Buy.Gun = self
                end)
                Menu.Button('Misc', 'Buy', 'Buy Gun', function()
                    AutoBuy(ItemTable.Guns[Settings.Misc.Auto_Buy.Gun], false, 2)
                end)

                Menu.Button('Misc', 'Buy', 'Buy Ammo', function()
                    AutoBuy(ItemTable.Ammo[Settings.Misc.Auto_Buy.Gun], true, 1)
                end)

            end
  
            local MTSection6 = Menu.Container("Misc", "Stuff", "Left") do
                Menu.CheckBox("Misc", "Stuff", "Auto Grab Cash", false, function(a)
                    Settings.Misc.Cash.AutoPick = a
                end)
                Menu.CheckBox("Misc", "Stuff", "Auto Drop Cash", false, function(a)
                    Settings.Misc.Cash.AutoDrop = a
                end)
                Menu.Slider("Misc", "Stuff", "Auto Drop Amount", 0, 10, 6, '%', 1, function(a)
                    Settings.Misc.Cash.Amount = a * 1000
                end)
                Menu.CheckBox("Misc", "Stuff", "Auto Stomp", false, function(a)
                    Settings.Misc.Random.AutoStomp = a
                end)
                
                Menu.CheckBox("Misc", "Stuff", "No Recoil", false, function(a)
                  Settings.Misc.Random.NoRecoil = a
              end)
  
              Menu.CheckBox("Misc", "Stuff", "No Slow", false, function(a)
                  Settings.Misc.Random.NoSlow = a
              end)
  
                Menu.CheckBox("Misc", "Stuff", "No Jump cooldown", false, function(a)
                    if a then
                        local IsA = game.IsA
                        local newindex = nil
  
                        newindex = hookmetamethod(game, "__newindex", function(self, Index, Value)
                            if not checkcaller() and IsA(self, "Humanoid") and Index == "JumpPower" then
                                return
                            end
                            return newindex(self, Index, Value)
                        end)
                    end
                end)
                Menu.CheckBox("Misc", "Stuff", "Anti Bag", false, function(a)
                    Settings.Misc.Random.AntiBag = a
                end)
                Menu.CheckBox("Misc", "Stuff", "Bunny Hop", false, function(a)
                    getgenv().Bhop = a
                    while getgenv().Bhop do
                        task.wait()
                        if Client.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
                            Client.Character.Humanoid:ChangeState("Jumping")
                        end
                    end
                end)
            end

            local MTSection9 = Menu.Container("Misc", "Desync", "Left") do
                Menu.CheckBox("Misc", "Desync", "Invisible Desync", false, function(a)

                    for i = 1, 2 do 
                        Script.Functions.Update_Desync(a)
                        task.wait(.1)
                    end

                end)

                Menu.CheckBox("Misc", "Desync", "CFrame Desync", false, function(a)
                    Settings['Destroy Cheaters'].Enabled = a
                    DestroyCheaters()
                end)

                Menu.Hotkey("Misc", "Desync", "Keybind", Settings['Destroy Cheaters'].Keybind, function(a)
                    Settings['Destroy Cheaters'].Keybind = a
                    DestroyCheaters()
                end)

            end
        end
  
        local VisualsTab = Menu.Tab("Visuals") do
  
            local TLHightlightSection = Menu.Container("Visuals", "ESP", "Left") do
                Menu.CheckBox("Visuals", "ESP", "Enabled", false, function(a)
                    getgenv().esp.Enabled = a
                end)
                Menu.CheckBox("Visuals", "ESP", "Box", true, function(a)
                    getgenv().esp.BoxEnabled = a
                end)
                Menu.ColorPicker("Visuals", "ESP", "Box Color", Color3.fromRGB(255, 255, 255), 0, function(a)
                    getgenv().esp.BoxColor = a
                end)
                Menu.ColorPicker("Visuals", "ESP", "Text Color", Color3.fromRGB(255, 255, 255), 0, function(a)
                    getgenv().esp.TextColor = a
                end)
                Menu.CheckBox("Visuals", "ESP", "Name", true, function(a)
                    getgenv().esp.TextLayout.name.enabled = a
                end)
                
                Menu.CheckBox("Visuals", "ESP", "Health", true, function(a)
                    getgenv().esp.TextLayout.health.enabled = a
                end)
                Menu.CheckBox("Visuals", "ESP", "HealthBar", true, function(a)
                    getgenv().esp.BarLayout.health.enabled = a
                end)
                Menu.ColorPicker("Visuals", "ESP", "LowerHealthColor", Color3.fromRGB(255, 255, 255), 0, function(a)
                    getgenv().esp.BarLayout.health.color_empty = a
                end)
                Menu.ColorPicker("Visuals", "ESP", "HigherHealthColor", Color3.fromRGB(255, 102, 204), 0, function(a)
                    getgenv().esp.BarLayout.health.color_full = a
                end)
                Menu.CheckBox("Visuals", "ESP", "Armor", true, function(a)
                    getgenv().esp.TextLayout.armor.enabled = a
                end)
                Menu.CheckBox("Visuals", "ESP", "ArmorBar", true, function(a)
                    getgenv().esp.BarLayout.armor.enabled = a
                end)
                Menu.ColorPicker("Visuals", "ESP", "LowerArmorColor", Color3.fromRGB(255, 102, 204), 0, function(a)
                    getgenv().esp.BarLayout.armor.color_empty = a
                end)
                Menu.ColorPicker("Visuals", "ESP", "HigherArmorColor", Color3.fromRGB(255, 102, 204), 0, function(a)
                    getgenv().esp.BarLayout.armor.color_full = a
                end)
                Menu.CheckBox("Visuals", "ESP", "Distance", true, function(a)
                    getgenv().esp.TextLayout.distance.enabled = a
                end)
                Menu.CheckBox("Visuals", "ESP", "Tool", true, function(a)
                    getgenv().esp.TextLayout.tool.enabled = a
                end)
                Menu.CheckBox("Visuals", "ESP", "Skeletons", false, function(a)
                    getgenv().esp.SkeletonEnabled = a
                end)

                Menu.CheckBox("Visuals", "ESP", "Chams", false, function(a)
                    getgenv().esp.ChamsEnabled = a
                end)
                Menu.ColorPicker("Visuals", "ESP", "ChamsInnerColor", Color3.fromRGB(255, 102, 204), 0, function(a)
                    getgenv().esp.ChamsInnerColor = a
                end)
                Menu.ColorPicker("Visuals", "ESP", "ChamsOuterColor", Color3.fromRGB(255, 255, 255), 0, function(a)
                    getgenv().esp.ChamsOuterColor = a
                end)
            end
  
            local Section6 = Menu.Container("Visuals", "World Customization", "Left") do
                Menu.CheckBox("Visuals", "World Customization", "Enabled", false, function(self)
                    Settings.Visuals.World_Customization.Enabled = self
                end)
                Menu.ColorPicker("Visuals", "World Customization", "World Customization", MainColor, 0, function(self)
                    task.spawn(function()
                        while task.wait() do
                            if Settings.Visuals.World_Customization.Enabled then
                                Lighting.ColorCorrection.TintColor = self
                            else
                                Lighting.ColorCorrection.TintColor = Color3.fromRGB(255, 255, 255)
                            end
                        end
                    end)
                end)

                Menu.CheckBox("Visuals", "World Customization", "UI", false, function(self)
                    Settings.Visuals.World_Customization.Bars = self
                end)
                Menu.ColorPicker("Visuals", "World Customization", "World Customization", MainColor, 0, function(self)
                    Settings.Visuals.World_Customization.BarsColor = self
                end)
            end
  
            local Section7 = Menu.Container("Visuals", "Crosshair", "Right") do
              Menu.CheckBox("Visuals", "Crosshair", "Enabled", false, function(a)
                  getgenv().crosshair.enabled = a
              end)
              Menu.ColorPicker("Visuals", "Crosshair", "Color", MainColor, 0, function(a)
                  getgenv().crosshair.color = a
              end)
              Menu.ComboBox("Visuals", "Crosshair", "Position", "mouse", {"mouse", "center"}, function(a)
                  getgenv().crosshair.mode = a
              end)
  
              Menu.Slider('Visuals', 'Crosshair', 'Width', 1, 5, 2.5, '', 1, function(self)
                  getgenv().crosshair.width = self
              end)
              Menu.Slider('Visuals', 'Crosshair', 'Length', 1, 50, 10, '', 0, function(self)
                  getgenv().crosshair.length = self
              end)
              Menu.Slider('Visuals', 'Crosshair', 'Radius', 0, 20, 11, '', 1, function(self)
                  getgenv().crosshair.radius = self
              end)
  
              Menu.CheckBox('Visuals', 'Crosshair', 'Spin', getgenv().crosshair.spin, function(self)
                  getgenv().crosshair.spin = self
              end)
              Menu.Slider('Visuals', 'Crosshair', 'Spin Speed', 1, 340, 150, '', 0, function(self)
                  getgenv().crosshair.spin_speed = self
              end)
  
              Menu.CheckBox('Visuals', 'Crosshair', 'Resize', getgenv().crosshair.resize, function(self)
                  getgenv().crosshair.resize = self
              end)
              Menu.Slider('Visuals', 'Crosshair', 'Resize Speed', 1, 22, 5, '', 0, function(self)
                  getgenv().crosshair.resize_speed = self
              end)
          end
  
            local TLHightlightSection = Menu.Container("Visuals", "HighLight", "Right") do
                Menu.CheckBox("Visuals", "HighLight", "Enabled", true, function(a)
                    Settings.Combat.Visuals.HighLight.Enabled = a
                end)
                Menu.ColorPicker("Visuals", "HighLight", "Fill Color", MainColor, 0, function(a)
                    Settings.Combat.Visuals.HighLight.FillColor = a
                end)
                Menu.ColorPicker("Visuals", "HighLight", "OutLine Color", Color3.fromRGB(255, 255, 255), 0, function(a)
                    Settings.Combat.Visuals.HighLight.OutLineColor = a
                end)
            end
  
            local TLBackTrackSection = Menu.Container("Visuals", "BackTrack", "Right") do
                Menu.CheckBox("Visuals", "BackTrack", "Enabled", true, function(a)
                    Settings.Combat.Visuals.BackTrack.Enabled = a
                end)
                Menu.Slider("Visuals", "BackTrack", "Transparency", 0, 1, 0, '', 1, function(a)
                    Settings.Combat.Visuals.BackTrack.Transparency = a
                end)
                Menu.Slider("Visuals", "BackTrack", "Delay", 0, 5, 0.1, '', 1, function(a)
                    Settings.Combat.Visuals.BackTrack.Delay = a
                end)
                Menu.ColorPicker("Visuals", "BackTrack", "Color", MainColor, 0, function(a)
                    Settings.Combat.Visuals.BackTrack.Color = a
                end)
                Menu.ComboBox("Visuals", "BackTrack", "Material", "ForceField", {"ForceField", "Neon", "Plastic"}, function(a)
                    Settings.Combat.Visuals.BackTrack.Material = a
                end)
            end
  
            local TLLineSection = Menu.Container("Visuals", "Line", "Right") do
                Menu.CheckBox("Visuals", "Line", "Enabled", true, function(a)
                    Settings.Combat.Visuals.Line.Visible = a
                end)
                Menu.CheckBox("Visuals", "Line", "Circle", true, function(a)
                    Settings.Combat.Visuals.Line.Circle = a
                end)
                Menu.Slider("Visuals", "Line", "Transparency", 0, 1, 0, '', 1, function(a)
                    Settings.Combat.Visuals.Line.Transparency = a
                end)
                Menu.Slider("Visuals", "Line", "Thickness", 0, 5, 0.5, '', 1, function(a)
                    Settings.Combat.Visuals.Line.Thickness = a
                end)
                Menu.ColorPicker("Visuals", "Line", "Color", MainColor, 0, function(a)
                    Settings.Combat.Visuals.Line.Color = a
                end)
            end
  
            local Section8 = Menu.Container("Visuals", "Bullet Tracers", "Right") do
                Menu.CheckBox("Visuals", "Bullet Tracers", "Enabled", false, function(self)
                    Settings.Visuals.Bullet_Trails.Enabled = self
                end)
  
                Menu.ComboBox("Visuals", "Bullet Tracers", "Texture", "Normal", {"Normal", "Fog"}, function(self)
                    Settings.Visuals.Bullet_Trails.Texture = self
                end)
  
                Menu.ColorPicker("Visuals", "Bullet Tracers", "Color", MainColor, 0, function(self)
                    Settings.Visuals.Bullet_Trails.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, self), ColorSequenceKeypoint.new(1, self)})
                end)
            end
  
            local Section8 = Menu.Container("Visuals", "Aim Viewer", "Right") do
              Menu.CheckBox("Visuals", "Aim Viewer", "Enabled", false, function(self)
                AntiAimViewer_Enabled = self
              end)
  
              Menu.ColorPicker("Visuals", "Aim Viewer", "Color", MainColor, 0, function(self)
                AntiAimViewer_Color = self
              end)
  
              Menu.TextBox("Visuals", "Aim Viewer", "Target", 'Username', function(self)
                AntiAimViewer_Target = findPlayerByUsername(self)
              end)
  
              Menu.CheckBox("Visuals", "Aim Viewer", "HighLight", false, function(self)
                AntiAimViewer_HighLight = self
              end)
  
              Menu.ColorPicker("Visuals", "Aim Viewer", "Color", Color3.fromRGB(255, 255, 255), 0, function(self)
                AntiAimViewer_HighLight_OutLineColor = self
              end)
  
              Menu.ColorPicker("Visuals", "Aim Viewer", "Color", MainColor, 0, function(self)
                AntiAimViewer_HighLight_FillColor = self
              end)
          end
  
          local Section7 = Menu.Container("Visuals", "Client Chams", "Left") do
            Menu.CheckBox("Visuals", "Client Chams", "Weapon Enabled", false, function(self)
                Settings.Visuals.Weapon_Chams.Enabled = self
            end)
            Menu.ColorPicker("Visuals", "Client Chams", "Weapon Color", MainColor, 0, function(self)
                Settings.Visuals.Weapon_Chams.Color = self
            end)
            Menu.ComboBox("Visuals", "Client Chams", "Weapon Cham Type", "Plastic", {"Plastic", "Neon"}, function(self)
                if self == 'Plastic' then
                    Settings.Visuals.Weapon_Chams.Material = Enum.Material.SmoothPlastic
                elseif self == 'Neon' then
                    Settings.Visuals.Weapon_Chams.Material = Enum.Material.Neon
                end
            end)

            Menu.CheckBox("Visuals", "Client Chams", "Client Enabled", false, function(self)
                Settings.Visuals.Character_Chams.Enabled = self
            end)
            Menu.ColorPicker("Visuals", "Client Chams", "Client Color", MainColor, 0, function(self)
                Settings.Visuals.Character_Chams.Color = self
            end)
            Menu.ComboBox("Visuals", "Client Chams", "Client Cham Type", "Force Field", {"Force Field", "Neon"}, function(self)
                if self == 'Force Field' then
                    Settings.Visuals.Character_Chams.Material = Enum.Material.ForceField
                elseif self == 'Neon' then
                    Settings.Visuals.Character_Chams.Material = Enum.Material.Neon
                end
            end)

            Menu.CheckBox("Visuals", "Client Chams", "Trail Enabled", false, function(self)
                ToggleTrail(self)
            end)
            Menu.ColorPicker("Visuals", "Client Chams", "Trail Color", MainColor, 0, function(self)
                Settings.Visuals.Character_Chams.Trail_Color = self
            end)
            Menu.Slider("Visuals", "Client Chams", "Trail Life", 1, 10, 3, '', 0, function(a)
                Settings.Combat.Visuals.Line.Trail_Life = a
            end)
        end
  
        end
  
        local ConfigsTab = Menu.Tab("Configuration") do
  
            local MenuSection = Menu.Container("Configuration", "Menu", "Left") do
                Menu.Hotkey('Configuration', 'Menu', 'Menu key', Settings.Configs.Menu.Keybind, function(a)
                    Settings.Configs.Menu.Keybind = a
                    ContextAction:BindAction('menuToggle', MenuToggle, true, a)
                end)

                Menu.ColorPicker("Configuration", "Menu", "Color", MainColor, 0, function(self)
                    MainColor = self
                    Menu.Accent = self
                end)
        
                Menu.CheckBox('Configuration', 'Menu', 'Indicators', false, function(Boolean)
                    Menu.Indicators:SetVisible(Boolean)
                end)
        
                Menu.CheckBox('Configuration', 'Menu', 'Keybinds', false, function(Boolean)
                    Menu.Keybinds:SetVisible(Boolean)
                end)
        
                Menu.Button('Configuration', 'Menu', 'Rejoin', function()
                    TeleportPlace(game.PlaceId, game.JobId)
                end)

            end

            local ConfigSection = Menu.Container('Configuration', 'Configs', 'Right') do
                Menu.TextBox('Configuration', 'Configs', 'Config Name', '')

                Menu.ListBox('Configuration', 'Configs', 'Config List', false, {}, function()

                end)

                Menu.Button('Configuration', 'Configs', 'Create', function()
                    
                end)

                Menu.Button('Configuration', 'Configs', 'Save', function()
                    
                end)

                Menu.Button('Configuration', 'Configs', 'Load', function()
                    
                end)
            end
            
        end
    end

  local function UpdateIndicators()

    --Menu.Keybinds.List['Enabled']:Update(Settings['Main']['Enabled'] and "On" or "Off")

    if enabled and Target then
        Menu.Indicators.List['Target']:Update(Target.Name)

        Menu.Indicators.List['Target Health']:SetVisible(true)
        Menu.Indicators.List['Target Armor']:SetVisible(true)

        Menu.Indicators.List['Knocked Out']:SetVisible(true)
        Menu.Indicators.List['Anti Aiming']:SetVisible(true)
    else
        Menu.Indicators.List['Target']:Update('nil')
        Menu.Indicators.List['Target Health']:SetVisible(false)
        Menu.Indicators.List['Target Armor']:SetVisible(false)

        Menu.Indicators.List['Knocked Out']:SetVisible(false)
        Menu.Indicators.List['Anti Aiming']:SetVisible(false)

        Menu.Indicators.List['Target Ammo']:SetVisible(false)
    end

    if enabled and Target then
        local Character = Target.Character

        if Character then
            local RootPart = Character and Character:FindFirstChild('HumanoidRootPart')
            local Humanoid = Character and Character:FindFirstChild('Humanoid')

            local BodyEffects = Character and Character:FindFirstChild('BodyEffects')
            local Armor = BodyEffects and BodyEffects:FindFirstChild('Armor')
            local KnockedOut = BodyEffects and BodyEffects:FindFirstChild('K.O')

            Menu.Indicators.List['Target Health']:Update(math.floor(Humanoid.Health), 0, 100)
            Menu.Indicators.List['Target Armor']:Update(Armor.Value, 0, 200)

            if KnockedOut and KnockedOut.Value then
                Menu.Indicators.List['Knocked Out']:Update('[True]')
            else
                Menu.Indicators.List['Knocked Out']:Update('[False]')
            end

            if RootPart and (RootPart.AssemblyLinearVelocity.X > 40 or RootPart.AssemblyLinearVelocity.Y > 40 or RootPart.AssemblyLinearVelocity.Z > 40 or RootPart.AssemblyLinearVelocity.X < -40 or RootPart.AssemblyLinearVelocity.Y < -40 or RootPart.AssemblyLinearVelocity.Z < -40) then
                Menu.Indicators.List['Anti Aiming']:Update('[True]')
            else
                Menu.Indicators.List['Anti Aiming']:Update('[False]')
            end

            for i, v in pairs(Character:GetChildren()) do
                if v:IsA('Tool') and (v:FindFirstChild('Ammo') and v:FindFirstChild('MaxAmmo')) then
                    Menu.Indicators.List['Target Ammo']:SetVisible(true)

                    local Ammo = v.Ammo.Value
                    local MaxAmmo = v.MaxAmmo.Value

                    task.wait()
                    Menu.Indicators.List['Target Ammo']:Update(Ammo, 0, MaxAmmo)
                else
                    Menu.Indicators.List['Target Ammo']:SetVisible(false)
                end
            end

        end

    end
end
  
  
  ---------------------------------------------------------------------------------- scripts
  
  do --// notification library
    do --// Notifications 
        local NotificationContainer = Instance.new("ScreenGui", gethui());
        do  --// Functions
            function Notifications:UpdateNotifications()
                local i = 0
                for v in next, Notifications do
                    if v.Holder then
                        local tween = Utility:Tween(v.Holder, TweenInfo.new(0.8, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Position = UDim2.new(0, 20, 0, 75 + (i * 25))})
                        i = i + 1
                    end
                end
            end;
  
            function Notifications:UpdateNotifications2(Item)
                for i,v in pairs(Item) do
                    if typeof(v) == "Instance" then
                        task.spawn(function()
                            local tween = Utility:Tween(v, TweenInfo.new(1, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {BackgroundTransparency = 1});
  
                            tween.Completed:Connect(function()
                                if v.Name == "Holder" then
                                    v:Destroy();
                                end
                            end)
                        end);
                        if v.ClassName == "TextLabel" then
                            local tween = Utility:Tween(v, TweenInfo.new(1, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {TextTransparency = 1})
                        end
                    end
                end
            end
  
            function Notifications:New(Text, Time, Color)
                Time = Time or 2;
                Color = Color or Color3.fromRGB(100, 95, 192);
                Text = Text or "No text provided? retard? "..tostring(math.random());
  
                local Notification = {};
  
                local Holder = Instance.new("Frame")
                Holder.Position = UDim2.new(0, -30, 0, 75);
                Holder.Size = UDim2.new(0, 0, 0, 23);
                Holder.BackgroundTransparency = 0;
                Holder.Parent = NotificationContainer;
                Holder.BackgroundColor3 = Color3.fromRGB(37, 37, 37);
                Holder.BorderSizePixel = 1
                Holder.BorderColor3 = Color3.fromRGB(0, 0, 0)
                Notification.Holder = Holder;
  
                local Background = Instance.new("Frame");
                Background.Parent = Holder;
                Background.Size = UDim2.new(1, -4, 1, -4);
                Background.BackgroundColor3 = Color3.fromRGB(17, 17, 17);
                Background.Position = UDim2.new(0, 2, 0, 2);
                Background.BorderSizePixel = 1
                Background.BorderColor3 = Color3.fromRGB(0, 0, 0)
                Notification.Background = Background;
  
                local AccentBar = Instance.new("Frame");
                AccentBar.Size = UDim2.new(0, 1, 1, 0);
                AccentBar.Parent = Background;
                AccentBar.BackgroundColor3 = Color;
                AccentBar.Position = UDim2.new(0, 0, 0, 0);
                AccentBar.BorderSizePixel = 0
                Notification.AccentBar = AccentBar;
  
                local AccentBar2 = Instance.new("Frame");
                AccentBar2.Size = UDim2.new(0, 0, 0, 1);
                AccentBar2.Position = UDim2.new(0, 0, 0, 15);
                AccentBar2.Parent = Background;
                AccentBar2.BackgroundColor3 = Color;
                AccentBar2.BorderSizePixel = 0
  
                Notification.AccentBar2 = AccentBar2
                local NotifText = Instance.new("TextLabel");
                NotifText.TextXAlignment = Enum.TextXAlignment.Left;
                NotifText.Position = UDim2.new(0, 3, 0, 0);
                NotifText.Size = UDim2.new(1, 0, 1, 0)
                NotifText.Parent = Background;
                NotifText.Font = Enum.Font.Ubuntu;
                NotifText.TextColor3 = Color3.new(1,1,1);
                NotifText.BackgroundTransparency = 1;
                NotifText.TextSize = 12.00;
                NotifText.Text = Text;
  
                Notification.NotifText = NotifText;
                Notification.Holder.Size = UDim2.new(0, NotifText.TextBounds.X + 10, 0, 19);
  
                AccentBar2.Size = UDim2.new(0, 1, 0, 1)
  
                Notifications[Notification] = true
  
                local Connection
                function Notification:Remove()
                    Notifications[Notification] = nil
                    Notifications:UpdateNotifications();
                end;
                task.spawn(function()
                    Notification.Holder.Size = UDim2.new(0, NotifText.TextBounds.X + 10, 0, 19);
                    Notifications:UpdateNotifications()
                    Notification.AccentBar2:TweenSize(UDim2.new(0, Background.AbsoluteSize.X - 1, 0, 1), Enum.EasingDirection.Out, Enum.EasingStyle.Linear, Time, false);
                    task.wait(Time)
  
                    Notifications:UpdateNotifications2(Notification)
                    task.wait(1.2)
                    Notification:Remove()
                end);
            end;
        end;
    end;
  
    do
        function Utility:Tween(...)
            local NewTween = game:GetService("TweenService"):Create(...)
            NewTween:Play();
            return NewTween;
        end;
    end
  end
  
--// Functions
local function GetCalculatedVelocity(Player)
    local Char = Player.Character
    local Root = Char and Char:FindFirstChild('HumanoidRootPart')
    local Velocity = Vector3.new()

    if (Char and Root) then
        local CurrentPos = Root.Position
        local CurrentTime = tick()

        task.wait(0.00350)

        local NewPos = Root.Position
        local NewTime = tick()

        local FinalTime = NewTime - CurrentTime
        Velocity = (NewPos - CurrentPos) / FinalTime
        CurrentPos = NewPos
        CurrentTime = NewPos
    end

    return Velocity
end

local function UpdateBuiltVelocity()
    if Target then
        BuiltVelocity = GetCalculatedVelocity(Target)
    end
end


local VisibleCheck = function (Part, PartDescendant)
    local Character = Client.Character or Client.CharacterAdded.Wait(Client.CharacterAdded)
    local Origin = Camera.CFrame.Position
    local _, OnScreen = Camera.WorldToViewportPoint(Camera, Part.Position)

    if (OnScreen) then
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
        raycastParams.FilterDescendantsInstances = {Character, Camera}

        local Result = Workspace.Raycast(Workspace, Origin, Part.Position - Origin, raycastParams)

        if (Result) then
            local PartHit = Result.Instance
            local Visible = (not PartHit or Instance.new("Part").IsDescendantOf(PartHit, PartDescendant))

            return Visible
        end
    end
    return false
end

local function GetClosestPlayerFOV()
    local Player = nil
    local Distance = FoVCircle.Radius

    for i, v in pairs(Players:GetPlayers()) do
        if (v == Client) then continue end

        local Character = v.Character
        local RootPart  = Character and Character:FindFirstChild('HumanoidRootPart')


        if Settings.Combat.Checks.WallCheck then
            if Camera:WorldToScreenPoint(v.Character[Settings.Combat.TargetLock.HitParts].Position) and VisibleCheck(v.Character[Settings.Combat.TargetLock.HitParts], v.Character) then
                if (Character and RootPart) then
                    local Pos = Workspace.CurrentCamera:WorldToViewportPoint(RootPart.Position)
                    local Mag = (Vector2.new(Pos.x, Pos.y) - UserInputService:GetMouseLocation()).magnitude

                    if (Mag < Distance) then
                        Distance = Mag
                        Player = v
                    end
                end
            end
        else
            if (Character and RootPart) then
                local Pos = Workspace.CurrentCamera:WorldToViewportPoint(RootPart.Position)
                local Mag = (Vector2.new(Pos.x, Pos.y) - UserInputService:GetMouseLocation()).magnitude

                if (Mag < Distance) then
                    Distance = Mag
                    Player = v
                end
            end
        end
    end

    return Player
end

local function KeybindHandler(Index, Texting)

    if not Texting and Index.KeyCode == Settings['Destroy Cheaters'].Keybind then
        DestroyCheaters()
        Notifications:New('CFrame Desync: ' .. tostring(Settings['Destroy Cheaters'].Enabled), 1.5, MainColor)
    end

    if not Texting and Index.KeyCode == Settings.Combat.TargetLock.KeyBind and Settings.Combat.TargetLock.Enabled then
        if Keybind and enabled then
            Keybind = false
            enabled = false
            if Target ~= nil then
                Target = nil
                ENABLEDHIGHTLIGHTCHECK = false
                if Settings.Visuals.Notifications then
                    Notifications:New('Unlocked... haha!', 1.5, MainColor)
                end
                if Settings.Combat.Stuff.Spectate then
                    game.Workspace.CurrentCamera.CameraSubject = Client.Character
                end
            end
        else
            Keybind = true
            enabled = true
            Target  = GetClosestPlayerFOV();
            if Settings.Visuals.Notifications then
                Notifications:New('Target : ' .. tostring(Target), 1.5, MainColor)
            end
            ENABLEDHIGHTLIGHTCHECK = true
            if Settings.Combat.Stuff.Spectate and Target then
                game.Workspace.CurrentCamera.CameraSubject = Target.Character
            end
            task.spawn(function ()
                while enabled do
                    wait()
                    BacktrackPlayer(Target)
                end
            end)
        end
    end
end

local function ChattedAdmin(Chat)
    if Client and Client.Character then
        local PrefixFound = Chat:sub(1, 1) == "$"

        if (PrefixFound) then
            local SplitChat = Chat:split(' ')
            if (SplitChat[1]:lower():find('target')) then 
                enabled = true
                Target = FindPlayer(SplitChat[2])

                if Settings.Visuals.Notifications then
                    Notifications:New('Target : ' .. tostring(Target), 1.5, MainColor)
                end

                ENABLEDHIGHTLIGHTCHECK = true

                if Settings.Combat.Stuff.Spectate and Target then
                    game.Workspace.CurrentCamera.CameraSubject = Target.Character
                end

                task.spawn(function ()
                    while enabled do
                        wait()
                        BacktrackPlayer(Target)
                    end
                end)
                
            elseif (SplitChat[1]:lower():find('goto')) then
                local GotoPlayer = FindPlayer(SplitChat[2])
    
                if (GotoPlayer) then
                    Client.Character.HumanoidRootPart.CFrame = GotoPlayer.Character.HumanoidRootPart.CFrame
                end
            end
        end
    end
end

local function PostSimulation(Delta)
    if Settings['Destroy Cheaters'].Enabled then
        local LocalCharacter = Client.Character
        local LocalRootPart = Client and LocalCharacter:FindFirstChild("HumanoidRootPart")

        if not LocalRootPart then return end

        Desync.ClientLocation = LocalRootPart.CFrame

        if (Desync.cframe) then 
            LocalRootPart.CFrame = Desync.cframe
        end

        RunService.PreRender:Wait()

        LocalRootPart.CFrame = Desync.ClientLocation
        Desync.ClientLocation = nil
    end
end

RunService.PostSimulation:Connect(PostSimulation);

Client.Chatted:Connect(ChattedAdmin)

function UpdateFov() -- connect to heartbeat loop
    FoVCircle.Position = Vector2.new(Mouse.X, Mouse.Y + GetGuiInset(GuiService).Y)
    FoVCircle.Visible = false
end


--// Loops
task.spawn(function() while task.wait() do UpdateBuiltVelocity() end end)


--// Hooking Aimbot --// CREDITS FOR THE HOOK TO CALLS
local AimMetaTable = getrawmetatable(game); makewriteable(AimMetaTable)
local OldMetaTable = AimMetaTable.__namecall; AimMetaTable.__namecall = newcclosure(function(...)
    local Arguments = {...};
    if Settings.Combat.TargetLock.Enabled and getnamecallmethod() == 'FireServer' and Arguments[2] == MousePos and Target and Target.Character then
        local TargetCharacter = Target.Character
        if (Settings.Combat.Checks.Resolver) then
            Arguments[3] = TargetCharacter[Settings.Combat.TargetLock.HitParts].Position + (BuiltVelocity * Vector3.new(Settings.Combat.TargetLock.Prediction, Settings.Combat.TargetLock.Prediction, Settings.Combat.TargetLock.Prediction))
        else
            Arguments[3] = TargetCharacter[Settings.Combat.TargetLock.HitParts].Position + (TargetCharacter[Settings.Combat.TargetLock.HitParts].Velocity * Vector3.new(Settings.Combat.TargetLock.Prediction, Settings.Combat.TargetLock.Prediction, Settings.Combat.TargetLock.Prediction))
        end

        return OldMetaTable(unpack(Arguments))
    end
    return OldMetaTable(...)
end)

local index; index = hookmetamethod(game, '__index', function(Obj, Prop)

    if Prop == 'CFrame' and index(Obj, 'Name') == 'HumanoidRootPart' and index(Obj, 'Parent') == index(Client, 'Character') and Desync.ClientLocation then
        return Desync.ClientLocation
    end

    return index(Obj, Prop)
end)

 
  
        -- FIRE VISUALS üî•üî•üî•üî•
  
        Script.Drawing.Line = Drawing.new("Line")
        Script.Drawing.Line.From = Vector2.new(0, 0)
        Script.Drawing.Line.To = Vector2.new(0, 0)
        Script.Drawing.Line.Visible = Settings.Combat.Visuals.Line.Visible
        Script.Drawing.Line.Thickness = Settings.Combat.Visuals.Line.Thickness
        Script.Drawing.Line.Color = Settings.Combat.Visuals.Line.Color
        Script.Drawing.Line.Transparency = Settings.Combat.Visuals.Line.Transparency
  
  
  
  
        -- backtrack
        function BacktrackPlayer(player)
            if Settings.Combat.Visuals.BackTrack.Enabled and Settings.Combat.TargetLock.Enabled == true and enabled and Target and Target.Character and Target.Character:FindFirstChild("HumanoidRootPart") then
                player.Character.Archivable = true
                local Cloned = player.Character:Clone()
                Cloned.Name = "Player Clone"
                for _, v in ipairs(Cloned:GetChildren()) do
                    if v:IsA("BasePart") and v.Name ~= "HumanoidRootPart" then
                        v.CanCollide = false
                        v.Anchored = true
                        v.Material = Settings.Combat.Visuals.BackTrack.Material
                        v.Color = Settings.Combat.Visuals.BackTrack.Color
                        v.Transparency = Settings.Combat.Visuals.BackTrack.Transparency
                    else
                        v:Destroy()
                    end
                end
                if Cloned:FindFirstChild("Head") and Cloned:FindFirstChild("Head"):FindFirstChild("face") then
                    Cloned.Head.face:Destroy()
                end
                Cloned.Parent = game.Workspace
                wait(Settings.Combat.Visuals.BackTrack.Delay)
                Cloned:Destroy()
            end
        end
  
  
        -- look at
  
  
  
    do -- prediction breaker
  
        if getgenv().OldKeyConnection then
            getgenv().OldKeyConnection:Disconnect()
            getgenv().OldKeyConnection = nil
        end
        getgenv().OldKeyConnection =
        UserInputService.InputBegan:Connect(
            function(input, isTyping)
                if input.KeyCode == Settings.Misc.PredictionDisabler.KeyBind and isTyping == false and Settings.Misc.PredictionDisabler.Enabled == true then
                    if Antilockhahga == false then
                        Antilockhahga = true
                        Menu.Keybinds.List['Prediction Breaker']:Update(true and "On" or "Off")
                        if  Settings.Misc.PredictionDisabler.Notifications == true then
                            Notifications:New('Prediction Breaker : TRUE.', 1.5, MainColor)
                        end
                    else
                        Antilockhahga = false
                        Menu.Keybinds.List['Prediction Breaker']:Update(false and "On" or "Off")
                        if  Settings.Misc.PredictionDisabler.Notifications == true then
                            Notifications:New('Prediction Breaker : FALSE.', 1.5, MainColor)
                        end
                    end
                end
            end
        )
        if getgenv().OldStepConnection then
            getgenv().OldStepConnection:Disconnect()
            getgenv().OldStepConnection = nil
        end
        getgenv().OldStepConnection = RunService.Stepped:Connect(function(_, Delta)
                local success, err = pcall(function()
                        if Settings.Misc.PredictionDisabler.Enabled ~= true then
                        else
                        local char = game.Players.LocalPlayer.Character
                        if char and char:FindFirstChildOfClass("Humanoid") and char:FindFirstChildOfClass("Humanoid").RootPart and Antilockhahga == true then
                            local hum = char:FindFirstChildOfClass("Humanoid")
                            if Settings.Misc.PredictionDisabler.AutoWalkSpeed then
                                Settings.Misc.PredictionDisabler.WalkSpeed = hum.WalkSpeed
                            end
                            local root = hum.RootPart
                            root.Velocity = Vector3.new(hum.MoveDirection.x, root.Velocity.y, hum.MoveDirection.z)
                            root.CFrame = root.CFrame + ((hum.MoveDirection * Delta) * (Settings.Misc.PredictionDisabler.WalkSpeed * 0.9))
                            for _, Anim in next, hum:GetPlayingAnimationTracks() do
                                local Anim3 = nil
                                local Anim2 = Anim
                                if Anim and Anim.Animation and Anim.Animation.Parent then
                                    Anim3 = Anim.Animation.Parent
                                end
                                if
                                    Anim3 and Anim3.Parent and Anim3.Parent.Name == "Animate" and
                                        (string.find(Anim2.Animation.Name:lower(), "run") or
                                            string.find(Anim2.Animation.Name:lower(), "walk"))
                                then
                                    Anim2:AdjustSpeed(Settings.Misc.PredictionDisabler.WalkSpeed / Settings.Misc.PredictionDisabler.AnimationSpeed)
                                end
                            end
                        end
                    end
                    end
                )
                if err and Settings.Misc.PredictionDisabler.Errors and Settings.Misc.PredictionDisabler.Notifications then
  
                    Notifications:New('Current AntiLock Speed: <b>' .. tostring(Settings.Misc.PredictionDisabler.WalkSpeed) .. '</b>', 1.5, MainColor)
  
                    Antilockhahga = false
  
  
                    if getgenv().OldStepConnection then
                        getgenv().OldStepConnection:Disconnect()
                        getgenv().OldStepConnection = nil
                    end
  
                    if getgenv().OldKeyConnection then
                        getgenv().OldKeyConnection:Disconnect()
                        getgenv().OldKeyConnection = nil
                    end
                end
            end
        )
  
    end
  
    local function GetRandomCFrame(Boolean, Min, Max)
      if Boolean then
          return CFrame.new(math.random(Min, Max), math.random(0, 5), math.random(Min, Max))
      else
          return CFrame.new(-math.random(Min, Max), math.random(0, 5), -math.random(Min, Max))
      end
  end

  function Utility:GetPlayers()
    return Players:GetPlayers()
  end

  function TeleportPlace(PlaceId, JobId)
    if JobId == game.JobId and #Utility:GetPlayers() <= 1 then
        Client:Kick("Misery: Current Server has 0 players, Rejoining.")
        --
        Wait()
        --
        TeleportService:Teleport(PlaceId, Client)
    else
        TeleportService:TeleportToPlaceInstance(PlaceId, JobId, Client)
    end
end
  
  local function VisualzeMovement()
      local Character = Client and (Client.Character or Client.CharacterAdded:Wait())
      local RootPart = Character and Character.HumanoidRootPart
  
      local Ball = Instance.new('Part') do
          Ball.Anchored = true
          Ball.Size = Vector3.new(0.5, 0.5, 0.5)
          Ball.Shape = Enum.PartType.Ball
          Ball.Color = MainColor
          Ball.Material = Enum.Material.ForceField
          Ball.Parent = Workspace
          Ball.CFrame = RootPart.CFrame
          Ball.CanCollide = false
      end;
  
      Debris:AddItem(Ball, 2)
  end
  
  do-- // Target Strafe
      angle_Y = 0
      
      RunService.Stepped:Connect(function (param,FPS)
          local Random = math.random(1, 6)
          local Gun = GetTool()
  
          if enabled and Gun and Target and Target.Character and Settings.Misc.TargetStrafe.Enabled == true and Settings.Misc.TargetStrafe.Method == 'Strafe' then
              if Settings.Misc.TargetStrafe.Visualize_Circle then
                  nigganiggaXD.CFrame = Target.Character.HumanoidRootPart.CFrame
  
                  spawn(function()
                      nigganiggaXD.Size = Vector3.new(Settings.Misc.TargetStrafe.Distance * 0.7, 0.01, Settings.Misc.TargetStrafe.Distance * 0.7)
                      nigganiggaXD.Color = Settings.Misc.TargetStrafe.Color
                  end)
                  
                  spawn(function ()
                      if Settings.Misc.TargetStrafe.Visualize_Circle == false or Settings.Misc.TargetStrafe.Enabled == false then
                          nigganiggaXD.CFrame = CFrame.new(0,9999,0)
                      end
                  end)
  
              end
          else
              nigganiggaXD.CFrame = CFrame.new(0,9999,0)
          end
  
          if Gun and Settings.Misc.TargetStrafe.Enabled and Settings.Misc.TargetStrafe.Method == 'Strafe' then
            if (Target.Character.HumanoidRootPart.CFrame.x > 5000 or Target.Character.HumanoidRootPart.CFrame.y > 5000 or Target.Character.HumanoidRootPart.CFrame.z > 5000 or Target.Character.HumanoidRootPart.CFrame.x < -5000 or Target.Character.HumanoidRootPart.CFrame.y < -5000 or Target.Character.HumanoidRootPart.CFrame.z < -5000) then return end 

              if enabled then
                  if Settings.Combat.Stuff.LookAt == true then
                      Settings.Combat.Stuff.LookAt = false
                      wait()
                      Settings.Combat.Stuff.LookAt = true
                  end
  
                  angle_Y = angle_Y + FPS / Settings.Misc.TargetStrafe.Speed % 1
                  Client.Character.HumanoidRootPart.CFrame = CFrame.new(Target.Character.HumanoidRootPart.Position) * CFrame.Angles(0, 2 * math.pi * angle_Y, 0) * CFrame.new(0, Settings.Misc.TargetStrafe.Height, Settings.Misc.TargetStrafe.Distance)
              end
          elseif Gun and Settings.Misc.TargetStrafe.Enabled and Settings.Misc.TargetStrafe.Method == 'Randomize' and enabled then
            if (Target.Character.HumanoidRootPart.CFrame.x > 5000 or Target.Character.HumanoidRootPart.CFrame.y > 5000 or Target.Character.HumanoidRootPart.CFrame.z > 5000 or Target.Character.HumanoidRootPart.CFrame.x < -5000 or Target.Character.HumanoidRootPart.CFrame.y < -5000 or Target.Character.HumanoidRootPart.CFrame.z < -5000) then return end 

              if Random <= 3 then
                  Client.Character.HumanoidRootPart.CFrame = Target.Character.HumanoidRootPart.CFrame * GetRandomCFrame(true, Settings.Misc.TargetStrafe.RandomizeMin, Settings.Misc.TargetStrafe.RandomizeMax)
                  if Settings.Misc.TargetStrafe.Visualize_Circle then
                      VisualzeMovement()
                  end
              elseif Random > 3 then
                  Client.Character.HumanoidRootPart.CFrame = Target.Character.HumanoidRootPart.CFrame * GetRandomCFrame(false, Settings.Misc.TargetStrafe.RandomizeMin, Settings.Misc.TargetStrafe.RandomizeMax)
                  if Settings.Misc.TargetStrafe.Visualize_Circle then
                      VisualzeMovement()
                  end
              end
  
          end
      end)
  end

  local function Reload(Object)
    local KOValue = Client.Character:WaitForChild('BodyEffects')['K.O'].Value

    if Object and KOValue ~= true then
        ReplicatedStorage:FindFirstChild('MainEvent'):FireServer('Reload', Object)
    end
end


  task.spawn(function()
    while task.wait(0.07) do

        if (enabled and Target and Target.Character and Settings.Misc.TargetStrafe.Enabled and Settings.Misc.TargetStrafe.AutoFire) then 

            local Gun = GetTool()
            if (Gun and Target) then 
                Gun:Activate()
            end
        end

        if (enabled and Target and Target.Character and Settings.Misc.TargetStrafe.Enabled and Settings.Misc.TargetStrafe.AutoReload) then

            local Gun = GetTool()
            if (Gun and Gun.Ammo.Value == 0) then
                Reload(Gun)
            end
        end
        
    end
  end)
  
    do -- walkspeed Cframe
        UserInputService.InputBegan:Connect(function(input, isTyping)
            if not isTyping and input.KeyCode == Settings.Misc.WalkSpeed.KeyBind and Settings.Misc.WalkSpeed.Enabled == true then
                if CFrameSpeedKeyBind then
                    CFrameSpeedKeyBind = false
                    Menu.Keybinds.List['CFrame']:Update(false and "On" or "Off")
                    if  Settings.Misc.WalkSpeed.Notifications == true then
                        Notifications:New('WalkSpeed disabled', 1.5, MainColor)
                    end
                else
                    Menu.Keybinds.List['CFrame']:Update(true and "On" or "Off")
                    CFrameSpeedKeyBind = true
                    if  Settings.Misc.WalkSpeed.Notifications == true then
                        Notifications:New('WalkSpeed enabled', 1.5, MainColor)
                    end
                end
            end
        end)
    end
  
    do -- fly
        UserInputService.InputBegan:Connect(function(input, isTyping)
            if not isTyping and input.KeyCode == Settings.Misc.Fly.KeyBind and Settings.Misc.Fly.Enabled then
                if flyvariableshit then
                    flyvariableshit = false
                    Menu.Keybinds.List['Fly']:Update(false and "On" or "Off")
                    if  Settings.Misc.Fly.Notification == true then
                        Notifications:New('fly disabled', 1.5, MainColor)
                    end
                else
                    flyvariableshit = true
                    Menu.Keybinds.List['Fly']:Update(true and "On" or "Off")
                    if  Settings.Misc.Fly.Notification == true then
                        Notifications:New('fly enabled', 1.5, MainColor)
                    end
                end
            end
        end)
    end
  
    do -- trash talk
        local function toggle_script(input, t)
            if not t and input.KeyCode == Settings.Misc.TrashTalk.Use.KeyBind and Settings.Misc.TrashTalk.Use.UsekeyBind then
                if Settings.Misc.TrashTalk.Use.Notification then
                    if not Settings.Misc.TrashTalk.Use.Enabled then
                        Notifications:New('trash talking', 1.5, MainColor)
                        if tick() >= chatSpamTick + 1 then
                            sayMessage(getgenv().MethodBeingUsed[math.random(1, #getgenv().MethodBeingUsed)])
                            chatSpamTick = tick()
                        end
                    else
                        Notifications:New('disabled "enabled" if you want to use', 1.5, MainColor)
                    end
                end
            end;
        end;
  
        UserInputService.InputBegan:Connect(toggle_script);
    end
  
    do -- // Anti Aim
        getgenv().xd = 0
  
        local function toggleScript()
        print("working")
        Settings.Misc.NetworkAnti.Enabled = not Settings.Misc.NetworkAnti.Enabled
            if Settings.Misc.NetworkAnti.Enabled then
                if Settings.Misc.NetworkAnti.Notification then
                    Notifications:New('Network enabled', 1.5, MainColor)
                end
            else
                if Settings.Misc.NetworkAnti.Notification then
                    Notifications:New('Network disabled', 1.5, MainColor)
                end
            end
        end
  
        UserInputService.InputBegan:Connect(function(input, t)
            if not t and input.KeyCode == Settings.Misc.NetworkAnti.Keybind then
                toggleScript()
            end
        end)
  
    task.spawn(function()
        while true do
            task.wait()
            if Settings.Misc.NetworkAnti.Enabled then
                local loop = RunService.Heartbeat:Connect(function()
                    sethiddenproperty(Client.Character.HumanoidRootPart, "NetworkIsSleeping", true)
                    task.wait()
                    sethiddenproperty(Client.Character.HumanoidRootPart, "NetworkIsSleeping", false)
                end)
                task.wait(getgenv().xd)
                if loop then
                    loop:Disconnect()
                end
            end
        end
    end)
  
    end

  
  local EtherealParts = Instance.new('Folder', workspace)
  EtherealParts.Name  = 'EtherealParts'
  
  local function HitEffect(Player, Type)
      local Character = Player.Character
      local RootPart  = Character and Character:FindFirstChild('HumanoidRootPart')
  
      if Character and RootPart then

        if Type == 'Pulse' then
			local Attachment = Instance.new('Attachment', RootPart)
			local Particle1  = Instance.new('ParticleEmitter', Attachment) do
				Particle1.Name          = 'Particle1'
				Particle1.LightEmission = 3
				Particle1.Transparency  = NumberSequence.new(0)
                Particle1.Color         = ColorSequence.new(MainColor)
				Particle1.Size          = NumberSequence.new{NumberSequenceKeypoint.new(0, 1), NumberSequenceKeypoint.new(1, 6, 1.2)}
				Particle1.Rotation      = NumberRange.new(0)
				Particle1.RotSpeed      = NumberRange.new(0)
				Particle1.Enabled       = false
				Particle1.Rate          = 2
				Particle1.Lifetime      = NumberRange.new(0.25)
				Particle1.Speed         = NumberRange.new(0.1)
				Particle1.Squash        = NumberSequence.new(0)
				Particle1.ZOffset       = 1
				Particle1.Texture       = 'rbxassetid://2916153928'
				Particle1.Orientation   = 'VelocityPerpendicular'
				Particle1.Shape         = 'Box'
				Particle1.ShapeInOut    = 'Outward'
				Particle1.ShapeStyle    = 'Volume'
			end
			local Particle2  = Instance.new('ParticleEmitter', Attachment) do
				Particle2.Name          = 'Particle1'
				Particle2.LightEmission = 3
				Particle2.Transparency  = NumberSequence.new(0)
                Particle2.Color         = ColorSequence.new(MainColor)
				Particle2.Size          = NumberSequence.new{NumberSequenceKeypoint.new(0, 1), NumberSequenceKeypoint.new(1, 6, 1.2)}
				Particle2.Rotation      = NumberRange.new(0)
				Particle2.RotSpeed      = NumberRange.new(0)
				Particle2.Enabled       = false
				Particle2.Rate          = 2
				Particle2.Lifetime      = NumberRange.new(0.25)
				Particle2.Speed         = NumberRange.new(0.1)
				Particle2.Squash        = NumberSequence.new(0)
				Particle2.ZOffset       = 1
				Particle2.Texture       = 'rbxassetid://2916153928'
				Particle2.Orientation   = 'FacingCamera'
				Particle2.Shape         = 'Box'
				Particle2.ShapeInOut    = 'Outward'
				Particle2.ShapeStyle    = 'Volume'
			end

			Particle1:Emit(1);
			Particle2:Emit(1);

			Debris:AddItem(Attachment, 1)
        elseif Type == 'Clone' then
  
              Character.Archivable  = true
  
              local Clone = Character:Clone()
              Clone.Parent = EtherealParts
              Clone.Humanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None
  
              for _, v in pairs(Clone:GetDescendants()) do
                  if (v:IsA('BasePart')) then
                      v.Material = Enum.Material.ForceField
                      v.Color = MainColor
                      v.CanCollide = false
                      v.Anchored = true
                      v.CanQuery = false
                      v.CanTouch = false
                  end
  
                  if (v:IsA('Accessory') or v:IsA('Tool')) then
                      v:Destroy()
                  end
              end
  
              for i,v in pairs(Character:GetDescendants()) do
                  if (v:IsA('BasePart')) then
                      local ClonePart = Clone:FindFirstChild(v.Name)
  
                      if (ClonePart) then
                          ClonePart.CFrame = v.CFrame
                      end
                  end
              end
  
              Clone:PivotTo(Character.PrimaryPart.CFrame + Vector3.new(Client.Character.HumanoidRootPart.CFrame.lookVector.x * 1.5, 0, Client.Character.HumanoidRootPart.CFrame.lookVector.z * 1.5))
  
              CharacterArchivable = false
              Debris:AddItem(Clone, 2)
  
          end
      end
  end
  
  local function FindTargetOnPart(Part)
      local Target = nil;
      local HitPart = nil;
      local Distance = 2;
  
      for _, Player in pairs(Players:GetPlayers()) do
          if (Player == Client) then continue end
  
          local Char = Player.Character
          local Root = Char and Char:FindFirstChild('HumanoidRootPart')
  
          for _, Obj in pairs(Char:GetChildren()) do
              if (not Obj:IsA('BasePart')) then continue end
  
              local Mag = (Obj.Position - Part.Position).magnitude
              if (Mag < Distance) then
                  Distance = Mag
                  Target = Player
                  HitPart = Obj
              end
          end
      end
  
      return Target, HitPart
  end
  
  local function SirenAdded(Obj)
      local Character = Client.Character
      local RootPart  = Character and Character:FindFirstChild('HumanoidRootPart')
  
      local function VerifyBullet(obj)
          return (obj.Name == 'BULLET_RAYS' or obj.Name:lower():find('bullet') or obj:WaitForChild('Attachment', 1) or obj:WaitForChild('GunBeam', 1)) and obj
      end 
  
      local PlayerChecks = {
          PlayerGun = false
      }
  
      local BulletRay = VerifyBullet(Obj)
      if (BulletRay and RootPart) then
          local Mag = (RootPart.Position - BulletRay.Position).magnitude
          local MagCheck = nil;
          if (Settings.Visuals.Hit_Detection.Enabled) then
              MagCheck = 13
          else
              MagCheck = 13
          end
  
          if (Mag <= MagCheck) then
              PlayerChecks.PlayerGun = true
          end
  
          if (PlayerChecks.PlayerGun) then -- Shot from client
              local GunBeam = BulletRay:WaitForChild('GunBeam', 1)
              local Attachment0 = GunBeam.Attachment0 -- closest to player
              local Attachment1 = GunBeam.Attachment1 -- mousepos 
  
              if Settings.Visuals.Bullet_Trails.Enabled then
                  task.wait()
                  GunBeam.Texture        = AssetTable.Textures[Settings.Visuals.Bullet_Trails.Texture]
                  GunBeam.LightEmission  = 5
                  GunBeam.Segments       = 10
                  GunBeam.LightInfluence = 0
                  GunBeam.TextureSpeed   = Settings.Visuals.Bullet_Trails.Speed
                  GunBeam.Brightness     = Settings.Visuals.Bullet_Trails.Brightness
                  GunBeam.Color          = Settings.Visuals.Bullet_Trails.Color
                  GunBeam.Width0         = Settings.Visuals.Bullet_Trails.Width
                  GunBeam.Width1         = Settings.Visuals.Bullet_Trails.Width
                  GunBeam.Transparency   = NumberSequence.new({NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(1, 0)})
              end
  
              if Settings.Visuals.Hit_Detection.Enabled then
                  local Part = Instance.new('Part', Workspace); do
                      Part.Anchored = true
                      Part.Size = Vector3.new(0.25, 0.25, 0.25)
                      Part.Position = Attachment1.WorldCFrame.Position
                      Part.Material = Enum.Material.Neon
                      Part.Color = MainColor
                      Part.CanCollide = false
                      Part.Transparency = 1
                  end
  
                  Debris:AddItem(Part, 2)
  
                  local Target, HitPart = FindTargetOnPart(Part)
                  if (Target ~= nil) then
  
                      if Settings.Visuals.Hit_Detection.Notify then
                          Menu.Notify('Misery<font color="#' .. tostring(MainColor:ToHex()) .. '">.cc</font>  >  ' .. '+1 Hit | ' .. tostring(HitPart) .. ' | Target : ' .. Target.DisplayName .. '', 1.5)
                      end
  
                      if Settings.Visuals.Hit_Detection.Clone then
                          HitEffect(Target, 'Clone')
                      end

                      if Settings.Visuals.Hit_Detection.Pulse then
                        HitEffect(Target, 'Pulse')
                    end
  
                      if Settings.Visuals.Hit_Detection.Sound then
                          local Sound = Instance.new('Sound', Obj); do
                              Sound.SoundId = AssetTable.Sounds[Settings.Visuals.Hit_Detection.HitSound]
                              Sound.Volume = 1
                              Sound:Play()
                          end
                      end
  
                  end
              end
  
          end
      end
  
  end
  
  -- aim viewer
  do
    AntiAimViewer_Target = Client
    print(AntiAimViewer_Target)
  
  
      function getgun()
        for i, v in pairs(AntiAimViewer_Target.Character:GetChildren()) do
            if v and (v:FindFirstChild("Default") or v:FindFirstChild("Handle")) then
                return v
            end
        end
      end
  
      local a = Instance.new("Beam")
      a.Segments = 1
      a.Width0 = 0.2
      a.Width1 = 0.2
      a.Color = ColorSequence.new(AntiAimViewer_Color)
      a.FaceCamera = true
      local b = Instance.new("Attachment")
      local c = Instance.new("Attachment")
      a.Attachment0 = b
      a.Attachment1 = c
      a.Parent = workspace.Terrain
      b.Parent = workspace.Terrain
      c.Parent = workspace.Terrain
  
      task.spawn(
        function()
            RunService.RenderStepped:Connect(
                function()
                    local character = Client.Character
                    if not character then
                        a.Enabled = false
                        return
                    end
  
                    if
                        AntiAimViewer_Enabled and getgun() and
                            AntiAimViewer_Target.Character:FindFirstChild("BodyEffects") and
                            AntiAimViewer_Target.Character:FindFirstChild("Head") and
                            AntiAimViewer_Target.Character:FindFirstChildWhichIsA("Tool")
                    then
                        a.Enabled = true
                        b.Position = AntiAimViewer_Target.Character:FindFirstChild("Head").Position
                        c.Position = AntiAimViewer_Target.Character.BodyEffects[AntiAimViewer_Method].Value
                        a.Color = ColorSequence.new(AntiAimViewer_Color)
                    else
                        a.Enabled = false
                    end
                end
            )
        end
      )
  
  end
  
  
  
  local HightLightT = Instance.new("Highlight")
  local AimViewerHighLight = Instance.new("Highlight")
  local Framework = Client.PlayerGui:FindFirstChild('Framework')
  
  local newindex; newindex = hookmetamethod(game, '__newindex', LPH_NO_VIRTUALIZE(function(self, key, value)
      local calling_script = getcallingscript()
  
      if (Framework and calling_script == Framework and self:IsA('Camera') and key == 'CFrame' and Settings.Misc.Random.NoRecoil) then 
          return 
      end
  
      if (key == 'WalkSpeed' and value < 16 and Settings.Misc.Random.NoSlow) then 
          value = 16
      end
  
      return newindex(self, key, value)
  end))
  
  local function Heartbeat()

    UpdateFov()

    if Settings.Misc.Random.AntiBag then
        Client.Character["Christmas_Sock"]:Destroy()
    end
    if Settings.Misc.Random.AutoStomp then
        game.ReplicatedStorage.MainEvent:FireServer("Stomp")
    end
    if Settings.Misc.Cash.AutoDrop == true then
        game.ReplicatedStorage.MainEvent:FireServer("DropMoney", Settings.Misc.Cash.Amount)
    end
    if Settings.Misc.Cash.AutoPick == true then
        pcall(
            function()
                for _, v in pairs(Workspace.Ignored.Drop:GetChildren()) do
                    if v.Name == "MoneyDrop" then
                        local MoneyMagnitude =
                            (v.Position - Client.Character.HumanoidRootPart.Position).magnitude
                        if MoneyMagnitude < 25 then
                            fireclickdetector(v.ClickDetector)
                        end
                    end
                end
            end
        )
    end
  
    if ENABLEDHIGHTLIGHTCHECK == true and Settings.Combat.Visuals.HighLight.Enabled == true and Settings.Combat.TargetLock.Enabled == true and Target then
        HightLightT.Parent = Target.Character
        HightLightT.FillColor = Settings.Combat.Visuals.HighLight.FillColor
        HightLightT.OutlineColor = Settings.Combat.Visuals.HighLight.OutLineColor
    else
        HightLightT.Parent = game.CoreGui
    end
  
    if AntiAimViewer_Enabled and AntiAimViewer_HighLight and AntiAimViewer_Target and AntiAimViewer_Target.Character and AntiAimViewer_Target.Character:FindFirstChild("HumanoidRootPart") then
        AimViewerHighLight.Parent = AntiAimViewer_Target.Character
        AimViewerHighLight.FillColor = AntiAimViewer_HighLight_FillColor
        AimViewerHighLight.OutlineColor = AntiAimViewer_HighLight_OutLineColor
    else
        AimViewerHighLight.Parent = game.CoreGui
    end
  
    if Settings.Combat.Visuals.Line.Enabled == true and Settings.Combat.TargetLock.Enabled == true and enabled and Target and Target.Character and Target.Character:FindFirstChild("HumanoidRootPart") then
        local mousePos = game:GetService("UserInputService"):GetMouseLocation()
        local ClosestPoint = Players[tostring(Target)].Character[Settings.Combat.TargetLock.HitParts]
        local ClosestPoint2D = Camera:WorldToViewportPoint(ClosestPoint.Position)
        Script.Drawing.Line.From = Vector2.new(ClosestPoint2D.X, ClosestPoint2D.Y)
        Script.Drawing.Line.To = Vector2.new(mousePos.X, mousePos.Y)
        Script.Drawing.Line.Visible = Settings.Combat.Visuals.Line.Visible
        Script.Drawing.Line.Thickness = Settings.Combat.Visuals.Line.Thickness
        Script.Drawing.Line.Color = Settings.Combat.Visuals.Line.Color
        Script.Drawing.Line.Transparency = Settings.Combat.Visuals.Line.Transparency
    else
        Script.Drawing.Line.To = Vector2.new(9999, 9999)
        Script.Drawing.Line.From = Vector2.new(9999, 9999)
        Script.Drawing.Line.Visible = Settings.Combat.Visuals.Line.Visible
        Script.Drawing.Line.Thickness = Settings.Combat.Visuals.Line.Thickness
        Script.Drawing.Line.Color = Settings.Combat.Visuals.Line.Color
        Script.Drawing.Line.Transparency = Settings.Combat.Visuals.Line.Transparency
    end
  
  
  
  
    if enabled and Target and Target.Character and Target.Character:FindFirstChild("LowerTorso") and Settings.Combat.Stuff.LookAt then
        Client.Character.HumanoidRootPart.CFrame = CFrame.new(Client.Character.HumanoidRootPart.CFrame.Position, Vector3.new(Target.Character.HumanoidRootPart.CFrame.X, Client.Character.HumanoidRootPart.CFrame.Position.Y, Target.Character.HumanoidRootPart.CFrame.Z))
    end
    if enabled and Target and Target.Character and Target.Character:FindFirstChild("LowerTorso") and Settings.Combat.Checks.Knocked == true then
        local KOd = Target.Character:WaitForChild("BodyEffects")["K.O"].Value
        local Grabbed = Target.Character:FindFirstChild("GRABBING_CONSTRAINT") ~= nil
        if KOd or Grabbed then
            print("knocked")
            ENABLEDHIGHTLIGHTCHECK = false
            enabled = false
            Target = nil
        end
    end
  
    if Settings.Combat.Stuff.AutoPrediction == true then
        pingvalue = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
        split = string.split(pingvalue,'(')
        ping = tonumber(split[1])
       if ping < 130 then
            Settings.Combat.TargetLock.Prediction = 0.151
       elseif ping < 125 then
            Settings.Combat.TargetLock.Prediction = 0.149
       elseif ping < 110 then
            Settings.Combat.TargetLock.Prediction = 0.146
       elseif ping < 105 then
            Settings.Combat.TargetLock.Prediction = 0.138
       elseif ping < 90 then
            Settings.Combat.TargetLock.Prediction = 0.136
       elseif ping < 80 then
            Settings.Combat.TargetLock.Prediction = 0.134
       elseif ping < 70 then
            Settings.Combat.TargetLock.Prediction = 0.131
       elseif ping < 60 then
            Settings.Combat.TargetLock.Prediction = 0.1229
       elseif ping < 50 then
            Settings.Combat.TargetLock.Prediction = 0.1225
       elseif ping < 40 then
            Settings.Combat.TargetLock.Prediction = 0.1256
       end
   end
  
   if CFrameSpeedKeyBind and Settings.Misc.WalkSpeed.Enabled then
        if Client.Character.Humanoid.MoveDirection.Magnitude > 0 then
            for i = 1, Settings.Misc.WalkSpeed.Speed do
                Client.Character:TranslateBy(Client.Character.Humanoid.MoveDirection)
            end
        end
    end
  
    if Settings.Misc.Fly.Enabled and flyvariableshit then
        spawn(function()
            pcall(function()
                local speed = Settings.Misc.Fly.Speed
                local velocity = Vector3.new(0, 1, 0)
                if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                    velocity = velocity + (workspace.CurrentCamera.CoordinateFrame.lookVector * speed)
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                    velocity = velocity + (workspace.CurrentCamera.CoordinateFrame.rightVector * -speed)
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                    velocity = velocity + (workspace.CurrentCamera.CoordinateFrame.lookVector * -speed)
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                    velocity = velocity + (workspace.CurrentCamera.CoordinateFrame.rightVector * speed)
                end
  
                Client.Character.HumanoidRootPart.Velocity = velocity
                Client.Character.Humanoid:ChangeState("Freefall")
            end)
        end)
    else
        Client.Character.Humanoid:ChangeState("Landing")
    end
  
    if Settings.Misc.TrashTalk.Use.Enabled == true then
        if tick() >= chatSpamTick + 1 then
            sayMessage(getgenv().MethodBeingUsed[math.random(1, #getgenv().MethodBeingUsed)])
            chatSpamTick = tick()
        end
    end
  
  end
  
  
  --\\ Initialize Function
  local function Initialize()
    Menu.Watermark:SetVisible(true)
    Menu:SetTab("Main")
    Menu:SetVisible(true)
    Menu:Init()
    UserInputService.InputBegan:Connect(KeybindHandler)
    RunService.Heartbeat:Connect(Heartbeat)
    Workspace.Ignored.Siren.DescendantAdded:Connect(SirenAdded)
    ContextAction:BindAction('menuToggle', MenuToggle, false, Settings.Configs.Menu.Keybind)
  end
  do Initialize() end
  
  game:GetService("RunService").RenderStepped:Connect(function()

    local Character = Client and (Client.Character or Client.CharacterAdded:Wait())
    local Gun = GetTool(Gun)

    if Settings.Combat.Visuals.Line.Circle and Target and Target.Character then
        TargetCircle.Visible  = true
        TargetCircle.Position = Target.Character.UpperTorso and Target.Character.UpperTorso.Position
        TargetCircle.Color    = MainColor
        TargetCircle.Radius   = 2
        TargetCircle.Sides    = 2
    else
        TargetCircle.Visible  = false
    end
    
    if Settings.Visuals.Character_Chams.Enabled and Character then
        for i, v in pairs(Character:GetDescendants()) do
            if (v.Parent:IsA('Tool') and (v:IsA('MeshPart') or v:IsA('BasePart'))) then continue end 

            if v:IsA('MeshPart') then
                v.Material = Settings.Visuals.Character_Chams.Material
                v.Color = Settings.Visuals.Character_Chams.Color
                v.TextureID = ''
            end

            if v:IsA('BasePart') then
                v.Material = Settings.Visuals.Character_Chams.Material
                v.Color = Settings.Visuals.Character_Chams.Color
            end
        end
    end

    if Settings.Visuals.Weapon_Chams.Enabled and Character and Gun then
        for i, v in pairs(Gun:GetChildren()) do

            if v:IsA('MeshPart') then
                v.Material = Settings.Visuals.Weapon_Chams.Material
                v.Color = Settings.Visuals.Weapon_Chams.Color
                v.TextureID = ''
            end

            if v:IsA('BasePart') then
                v.Material = Settings.Visuals.Weapon_Chams.Material
                v.Color = Settings.Visuals.Weapon_Chams.Color
            end

        end
    end

    local Bars = Client.PlayerGui:FindFirstChild('MainScreenGui') and Client.PlayerGui.MainScreenGui:FindFirstChild('Bar')

    if (Bars) then 
        if Settings.Visuals.World_Customization.Bars then
            Bars.Energy.bar.BackgroundColor3 = Settings.Visuals.World_Customization.BarsColor
            Bars.Armor.bar.BackgroundColor3 = Settings.Visuals.World_Customization.BarsColor
            Bars.HP.bar.BackgroundColor3 = Settings.Visuals.World_Customization.BarsColor
            Bars.Armor.firebar.BackgroundColor3 = Settings.Visuals.World_Customization.BarsColor
        elseif not Settings.Visuals.World_Customization.Bars then
            Bars.Energy.bar.BackgroundColor3 = Color3.fromRGB(182, 182, 9)
            Bars.Armor.bar.BackgroundColor3 = Color3.fromRGB(0, 136, 194)
            Bars.HP.bar.BackgroundColor3 = Color3.fromRGB(36, 182, 3)
            Bars.Armor.firebar.BackgroundColor3 = Color3.fromRGB(253, 121, 33)
        end
    end

    UpdateIndicators()

    cam = workspace.CurrentCamera
end)

for i, v in next, (Players:GetChildren()) do
    if (v == Client) then continue end 
    
    local player = getgenv().esp.NewPlayer(v)
end

Players.PlayerAdded:Connect(function(v)
    local player = getgenv().esp.NewPlayer(v)
end)
   end,
})

local Button = MainTab:CreateButton({
   Name = "üßäosiris.ccüßä",
   Callback = function()
   if not LPH_OBFUSCATED then --  set these if not obfuscated so your script can run without obfuscation for when you are testing
    LPH_JIT_ULTRA = function(...)
        return (...)
    end
    LPH_JIT_MAX = function(...)
        return (...)
    end
end
-- dne exclusive
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/cat"))()
local LinoriaNotifs = loadstring(game:HttpGet("https://pastebin.com/raw/T8K6dsf3"))()
getgenv().WatermarkColor = Color3.fromRGB(255, 0, 125)
local DLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/dnelol/3d-drawing/main/code.lua"))()
local StrafeVisualss = DLib:New3DCircle()

local AnimationModule = {
    Astronaut = {
        "rbxassetid://891621366",
        "rbxassetid://891633237",
        "rbxassetid://891667138",
        "rbxassetid://891636393",
        "rbxassetid://891627522",
        "rbxassetid://891609353",
        "rbxassetid://891617961"
    },
    Bubbly = {
        "rbxassetid://910004836",
        "rbxassetid://910009958",
        "rbxassetid://910034870",
        "rbxassetid://910025107",
        "rbxassetid://910016857",
        "rbxassetid://910001910",
        "rbxassetid://910030921",
        "rbxassetid://910028158"
    },
    Cartoony = {
        "rbxassetid://742637544",
        "rbxassetid://742638445",
        "rbxassetid://742640026",
        "rbxassetid://742638842",
        "rbxassetid://742637942",
        "rbxassetid://742636889",
        "rbxassetid://742637151"
    },
    Confindent = {
        "rbxassetid://1069977950",
        "rbxassetid://1069987858",
        "rbxassetid://1070017263",
        "rbxassetid://1070001516",
        "rbxassetid://1069984524",
        "rbxassetid://1069946257",
        "rbxassetid://1069973677"
    },
    Cowboy = {
        "rbxassetid://1014390418",
        "rbxassetid://1014398616",
        "rbxassetid://1014421541",
        "rbxassetid://1014401683",
        "rbxassetid://1014394726",
        "rbxassetid://1014380606",
        "rbxassetid://1014384571"
    },
    Default = {
        "http://www.roblox.com/asset/?id=507766666",
        "http://www.roblox.com/asset/?id=507766951",
        "http://www.roblox.com/asset/?id=507777826",
        "http://www.roblox.com/asset/?id=507767714",
        "http://www.roblox.com/asset/?id=507765000",
        "http://www.roblox.com/asset/?id=507765644",
        "http://www.roblox.com/asset/?id=507767968"
    },
    Elder = {
        "rbxassetid://845397899",
        "rbxassetid://845400520",
        "rbxassetid://845403856",
        "rbxassetid://845386501",
        "rbxassetid://845398858",
        "rbxassetid://845392038",
        "rbxassetid://845396048"
    },
    Ghost = {
        "rbxassetid://616006778",
        "rbxassetid://616008087",
        "rbxassetid://616013216",
        "rbxassetid://616013216",
        "rbxassetid://616008936",
        "rbxassetid://616005863",
        "rbxassetid://616012453",
        "rbxassetid://616011509"
    },
    Knight = {
        "rbxassetid://657595757",
        "rbxassetid://657568135",
        "rbxassetid://657552124",
        "rbxassetid://657564596",
        "rbxassetid://658409194",
        "rbxassetid://658360781",
        "rbxassetid://657600338"
    },
    Levitation = {
        "rbxassetid://616006778",
        "rbxassetid://616008087",
        "rbxassetid://616013216",
        "rbxassetid://616010382",
        "rbxassetid://616008936",
        "rbxassetid://616003713",
        "rbxassetid://616005863"
    },
    Mage = {
        "rbxassetid://707742142",
        "rbxassetid://707855907",
        "rbxassetid://707897309",
        "rbxassetid://707861613",
        "rbxassetid://707853694",
        "rbxassetid://707826056",
        "rbxassetid://707829716"
    },
    Ninja = {
        "rbxassetid://656117400",
        "rbxassetid://656118341",
        "rbxassetid://656121766",
        "rbxassetid://656118852",
        "rbxassetid://656117878",
        "rbxassetid://656114359",
        "rbxassetid://656115606"
    },
    OldSchool = {
        "rbxassetid://5319828216",
        "rbxassetid://5319831086",
        "rbxassetid://5319847204",
        "rbxassetid://5319844329",
        "rbxassetid://5319841935",
        "rbxassetid://5319839762",
        "rbxassetid://5319852613",
        "rbxassetid://5319850266"
    },
    Patrol = {
        "rbxassetid://1149612882",
        "rbxassetid://1150842221",
        "rbxassetid://1151231493",
        "rbxassetid://1150967949",
        "rbxassetid://1148811837",
        "rbxassetid://1148811837",
        "rbxassetid://1148863382"
    },
    Pirtate = {
        "rbxassetid://750781874",
        "rbxassetid://750782770",
        "rbxassetid://750785693",
        "rbxassetid://750783738",
        "rbxassetid://750782230",
        "rbxassetid://750779899",
        "rbxassetid://750780242"
    },
    Popstar = {
        "rbxassetid://1212900985",
        "rbxassetid://1150842221",
        "rbxassetid://1212980338",
        "rbxassetid://1212980348",
        "rbxassetid://1212954642",
        "rbxassetid://1213044953",
        "rbxassetid://1212900995"
    },
    Princess = {
        "rbxassetid://941003647",
        "rbxassetid://941013098",
        "rbxassetid://941028902",
        "rbxassetid://941015281",
        "rbxassetid://941008832",
        "rbxassetid://940996062",
        "rbxassetid://941000007"
    },
    Robot = {
        "rbxassetid://616088211",
        "rbxassetid://616089559",
        "rbxassetid://616095330",
        "rbxassetid://616091570",
        "rbxassetid://616090535",
        "rbxassetid://616086039",
        "rbxassetid://616087089"
    },
    Rthro = {
        "rbxassetid://2510196951",
        "rbxassetid://2510197257",
        "rbxassetid://2510202577",
        "rbxassetid://2510198475",
        "rbxassetid://2510197830",
        "rbxassetid://2510195892",
        "rbxassetid://02510201162",
        "rbxassetid://2510199791",
        "rbxassetid://2510192778"
    },
    Sneaky = {
        "rbxassetid://1132473842",
        "rbxassetid://1132477671",
        "rbxassetid://1132510133",
        "rbxassetid://1132494274",
        "rbxassetid://1132489853",
        "rbxassetid://1132461372",
        "rbxassetid://1132469004"
    },
    Stylish = {
        "rbxassetid://616136790",
        "rbxassetid://616138447",
        "rbxassetid://616146177",
        "rbxassetid://616140816",
        "rbxassetid://616139451",
        "rbxassetid://616133594",
        "rbxassetid://616134815"
    },
    Superhero = {
        "rbxassetid://782841498",
        "rbxassetid://782845736",
        "rbxassetid://782843345",
        "rbxassetid://782842708",
        "rbxassetid://782847020",
        "rbxassetid://782843869",
        "rbxassetid://782846423"
    },
    Toy = {
        "rbxassetid://782841498",
        "rbxassetid://782845736",
        "rbxassetid://782843345",
        "rbxassetid://782842708",
        "rbxassetid://782847020",
        "rbxassetid://782843869",
        "rbxassetid://782846423"
    },
    Vampire = {
        "rbxassetid://1083445855",
        "rbxassetid://1083450166",
        "rbxassetid://1083473930",
        "rbxassetid://1083462077",
        "rbxassetid://1083455352",
        "rbxassetid://1083439238",
        "rbxassetid://1083443587"
    },
    Werewolf = {
        "rbxassetid://1083195517",
        "rbxassetid://1083214717",
        "rbxassetid://1083178339",
        "rbxassetid://1083216690",
        "rbxassetid://1083218792",
        "rbxassetid://1083182000",
        "rbxassetid://1083189019"
    },
    Zombie = {
        "rbxassetid://616158929",
        "rbxassetid://616160636",
        "rbxassetid://616168032",
        "rbxassetid://616163682",
        "rbxassetid://616161997",
        "rbxassetid://616156119",
        "rbxassetid://616157476"
    }
}

StrafeVisualss.Visible = false
StrafeVisualss.ZIndex = 1
StrafeVisualss.Transparency = 1
StrafeVisualss.Color = Color3.fromRGB(255, 255, 255)
StrafeVisualss.Thickness = 1

--// Lua guard has variables Ill change the 100th and user when released

local BodyParts = {
    "Head",
    "HumanoidRootPart",
    "Torso",
    "UpperTorso",
    "LowerTorso",
    "RightHand",
    "LeftLowerArm",
    "RightLowerArm",
    "RightUpperArm",
    "LeftLowerLeg",
    "LeftUpperLeg",
    "LeftFoot",
    "RightFoot",
    "RightUpperLeg",
    "RightLowerLeg"
}

Library.theme.topheight = 50
Library.theme.accentcolor = Color3.fromRGB(203, 9, 61)
Library.theme.accentcolor2 = Color3.fromRGB(203, 9, 61)
Library.theme.fontsize = 15
Library.theme.titlesize = 17

local CursorPath = Instance.new("ScreenGui")
local Swastika = Instance.new("TextLabel")

CursorPath.Name = "CursorPath"
CursorPath.Parent = game.CoreGui
CursorPath.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Swastika.Name = "Swastika"
Swastika.Parent = CursorPath
Swastika.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Swastika.BackgroundTransparency = 1.000
Swastika.BorderSizePixel = 2
Swastika.Position = UDim2.new(0, 0, 0, 0)
Swastika.Size = UDim2.new(0, 93, 0, 84)
Swastika.Font = Enum.Font.SourceSans
Swastika.Text = "Âçç"
Swastika.TextColor3 = Color3.fromRGB(0, 0, 0)
Swastika.TextSize = 46.000
Swastika.TextTransparency = 0
Swastika.Rotation = 45
Swastika.Visible = false

--[[
local Animations = game.ReplicatedStorage.ClientAnimations

local LeanAnimation = Instance.new("Animation", Animations)
LeanAnimation.Name = "Lean"
LeanAnimation.AnimationId = "rbxassetid://3152375249"

local LayAnimation = Instance.new("Animation", Animations)
LayAnimation.Name = "Lay"
LayAnimation.AnimationId = "rbxassetid://3152378852"

local Dance1Animation = Instance.new("Animation", Animations)
Dance1Animation.Name = "Dance1"
Dance1Animation.AnimationId = "rbxassetid://3189773368"

local Dance2Animation = Instance.new("Animation", Animations)
Dance2Animation.Name = "Dance2"
Dance2Animation.AnimationId = "rbxassetid://3189776546"

local GreetAnimation = Instance.new("Animation", Animations)
GreetAnimation.Name = "Greet"
GreetAnimation.AnimationId = "rbxassetid://3189777795"

local ChestPumpAnimation = Instance.new("Animation", Animations)
ChestPumpAnimation.Name = "Chest Pump"
ChestPumpAnimation.AnimationId = "rbxassetid://3189779152"

local PrayingAnimation = Instance.new("Animation", Animations)
PrayingAnimation.Name = "Praying"
PrayingAnimation.AnimationId = "rbxassetid://3487719500"
]]
local LocalPlayer = game.Players.LocalPlayer
local CC = game.Workspace.CurrentCamera
local LocalMouse = LocalPlayer:GetMouse()

--// Main Table

local Script = {
    Main = {
        Speed = false,
        SpeedPower = 2.5,
        SpeedType = "CFrame",
        InfiniteJump = false,
        FakeMacro = false
    },
    SilentAim = {
        Resolver = false,
        Part = "Head",
        Enabled = false,
        RandomBodyPart = false,
        Prediction = 0.1413
    },
    WorldViusals = {
        Ambient = nil,
        Ambient2 = nil
    },
    AntiAims = {
        JitterBot = false,
        SpinBot = false,
        SpinBotSpeed = 7
    },
    Desync = {
        Velocity = {
            Desync = false,
            Unhittable = false,
            Visualize = false,
            VisualizeColor = Color3.fromRGB(255, 0, 125),
            X = 0,
            Y = 0,
            Z = 0,
            DesyncSpinPower = 0.001,
            DesyncPower = 16
        },
        CFrame = {
            Desync = false,
            RandomMode = false,
            RandomRange = 15,
            AngleX = 0,
            AngleY = 0,
            AngleZ = 0,
            X = 0,
            Y = 0,
            Z = 0
        }
    },
    ShitTalk = {
        Enabled = false,
        Delay = 2,
        Type = "Main"
        --[[
        Emoji
        Chinese
        Main
        ]]
    },
    TargetAim = {
        Enabled = false,
        AirShotFunction = true,
        Notifications = false,
        HitNotifs = false,
        AutoPrediction = false,
        Prediction = 0.1413,
        Part = "HumanoidRootPart",
        SelectedPart = "HumanoidRootPart",
        Resolver = false,
        KnockCheck = false,
        BackWardsBang = false,
        ViewTarget = false,
        LookAt = false,
        RandomBodyPart = false
    },
    CamLock = {
        Enabled = false,
        Prediction = 0.1413,
        AutoPrediction = false,
        Resolver = false,
        Smoothness = 0,
        Part = "Head"
    },
    PartSettings = {
        PartVisible = false,
        PartRainbow = false,
        PartColor = Color3.fromRGB(255, 255, 255),
        PartSize = Vector3.new(10, 10, 10),
        PartTransparency = 0,
        PartMaterial = Enum.Material.Neon,
        PartType = Enum.PartType.Ball
    },
    Tracer = {
        Enabled = true,
        Thickness = 1,
        Color = Color3.fromRGB(255, 255, 255),
        Origin = "Mouse"
    },
    Cursor = {
        Spinning = false,
        Rainbow = false,
        SpinSpeed = 1
    },
    Strafe = {
        Enabled = false,
        DesyncStrafe = false,
        Distance = 10,
        Speed = 5,
        Height = 0,
        Visual = false,
        VisualColor = Color3.fromRGB(255, 0, 0)
    },
    RageBot = {
        Enabled = false,
        Distance = 50,
        LookAt = false,
        Resolver = false
    },
    Ratio = {
        Enabled = false,
        Amount = 80
    },
    Misc = {
        AntiBag = false,
        AutoReload = false,
        Reach = false,
        PickUpMoney = false,
        AntiStomp = false,
        NJCD = false,
        CustomGunSFX = false,
        ID = "rbxassetid://1053296915",
        Volume = 10
    },
    Settings = {
        Watermark = true,
        fpscap = 144,
        Type = "Main",
        CheatName = "osiris"
        --game:GetService("CoreGui").osiris.main.top.title
    }
}

--[[
    },
    Tracer = {
        Enabled = true,
        Thickness = 1 ,
        Color = Color3.fromRGB(255,255,255),
    },
]]
local TargetPart = Instance.new("Part")
TargetPart.Color = Color3.fromRGB(255, 255, 255)
TargetPart.CanCollide = false
TargetPart.Size = Vector3.new(10, 10, 10)
TargetPart.Transparency = 0.8
TargetPart.Material = Enum.Material.Neon
TargetPart.Shape = Enum.PartType.Ball
TargetPart.Parent = game.Workspace
TargetPart.Anchored = true

local FOV = Drawing.new("Circle")
FOV.Filled = false
FOV.Color = Color3.fromRGB(255, 255, 255)
FOV.Visible = false
FOV.Radius = 100000

local Tracer = Drawing.new("Line")
Tracer.Visible = false
Tracer.Thickness = 1
Tracer.Color = Color3.fromRGB(255, 0, 0)

local RandomShitTalk = {
    [1] = {
        "but doctor prognosis: OWNED but doctor prognosis: OWNED but doctor prognosis: OWNED but doctor prognosis: OWNED but doctor prognosis: OWNED but doctor prognosis: OWNED ",
        "but doctor results: üî• but doctor results: üî• but doctor results: üî• but doctor results: üî• but doctor results: üî• but doctor results: üî• but doctor results: üî• ",
        "looks like you need to talk to your doctor looks like you need to talk to your doctor looks like you need to talk to your doctor looks like you need to talk to your doctor ",
        "speak to your doctor about this one speak to your doctor about this one speak to your doctor about this one speak to your doctor about this one speak to your doctor about this one ",
        "but analysis: PWNED but analysis: PWNED but analysis: PWNED but analysis: PWNED but analysis: PWNED but analysis: PWNED but analysis: PWNED but analysis: PWNED but analysis: PWNED ",
        "but diagnosis: OWND but diagnosis: OWND but diagnosis: OWND but diagnosis: OWND but diagnosis: OWND but diagnosis: OWND but diagnosis: OWND but diagnosis: OWND but diagnosis: OWND "
    },
    ["Chinese"] = {
        "Èü≥È¢ëÂ∞ëÂπ¥ÂÖ¨Ê∞ëËÆ∞ÂøÜÊ¨≤Ê±ÇÊó†Â∞Ω heywe ÂÉµÂ∞∏Âº∫Ëø´Ë∫´‰ΩìÂìëÈõÜ‰∏≠ÊéíÊ∞¥",
        "ÊåÅÊúâÊØÅÁÅ≠ÊÄßÁöÑÁ•ûÁªèÈáçÊôØÊ∞îÊ∏∏Ë°åËÑ∏Á∫¢ÈùíÈìúËâ≤Á±ªÂà´ÂàõÊÑèÊ°à",
        "ËØ∂ÊØîË•øËø™‰ºäËâæÂºóÂêâËâæÂ∞∫ËâæÊù∞ÂºÄËâæÂãíËâæÈ©¨ËâæÂ®úÂì¶Â±ÅÂêâÂêæ",
        "ÂÆåÊàê‰∏éËçâÂ±ã‰∏§‰∏™ËãèÂ∑¥ÂÆåÊàê‰∏éËçâÂ±ã‰∏§‰∏™ËãèÂ∑¥ÂÆåÊàê‰∏éËçâÂ±ã",
        "Â∫ÜÂ¥á‰Ω†Â•ΩÊàëËÆ®Âéå‰Ω†ÊÑöË†¢ÁöÑÊØçÊÑöË†¢ÁöÑÊØçÂ∫ÜÂ¥á",
        "Âùê‰∏ãÔºå‰∏ÄÁõ¥‰øùÊåÅÁùÄÂÆâÈùôÁöÑÁä∂ÊÄÅ„ÄÇ Ë∞ÅÊää‰ªñÊã•ÊúâÁöÑ‰∏úË•øÁªô‰∫Ü‰ªñÔºåÊâÄ‰ª•‰ªñ‰∏çÈÇ£‰πàÁà±Ê¨†ÂÄ∫Âä°ÔºåÂç¥Êãí  ÂèÇÂä†ÈîªÁÇºÔºåËøôËÆ©‰ªñÁà±ÂæóÊõ¥Â∞ë‰∫Ü",
        ", yƒ´zh√≠ b«éoch√≠zhe ƒÅnj√¨ng de zhu√†ngt√†i. Sh√©i b«é tƒÅ y«íngy«íu de d≈çngxƒ´ gƒõile tƒÅ, su«íy«ê tƒÅ b√π n√†me √†i qi√†n zh√†iw√π, qu√® j√πju√© cƒÅnjiƒÅ du√†nli√†n, z",
        "‰ªñÔºåÊâÄ‰ª•‰ªñ‰∏çÈÇ£rÁªô‰∫Ü‰ªñ‰∏úË•øÁªô‰∫Ü‰ªñÁà±Ê¨†sÔºåÂç¥ÊãíÁªùÂèÇÂä†ÈîªÁÇºÔºåËøôËÆ©‰ªñÁà±ÂæóÊõ¥UGTÂ∞ë‰∫Ü",
        "ÊúâÁöÑ‰∏úË•øÁªô‰∫Ü‰ªñÔºåÊâÄ‰ª•‰ªñ‰∏çÈÇ£rblx trader captain‰πàÊúâÁöÑ‰∏úË•øÁªô‰∫Ü‰ªñÁà±Ê¨†ÁªùÂèÇÂä†ÈîªsquidwardÁÇºÔºåÂä°ÔºåÂç¥ÊãíÁªùÂèÇÂä†ÈîªÁÇºÔºåËøôËÆ©‰ªñÁà±ÂæóÊõ¥UGTÂ∞ë‰∫Ü",
        "wocky slush‰ªñÁà±Ê¨†ÂÄ∫‰∫Ü‰ªñ‰ªñsquilliamÊã•ÊúâÁöÑ‰∏úË•øÁªôÁà±Ê¨†ÁªùÂèÇÂä†ÈîªsquidwardÁÇº",
        "Âùê‰∏ãÔºå‰∏ÄÁõ¥‰øùÊåÅÁùÄÂÆâÈùôÁöÑÁä∂ÊÄÅ Ë∞ÅÊää‰ªñÊã•ÊúâÁöÑ‰∏úË•øÁªô‰∫Ü‰ªñÔºåÊâÄ‰ª•‰ªñ‰∏çÈÇ£rblx trader captain‰πàÊúâÁöÑ‰∏úË•øÁªô‰∫Ü‰ªñÁà±Ê¨†ÂÄ∫‰∫Ü‰ªñ‰ªñsquilliamÊã•ÊúâÁöÑ‰∏úË•øÁªôÁà±Ê¨†ÁªùÂèÇÂä†ÈîªsquidwardÁÇºÔºåÂä°ÔºåÂç¥ÊãíÁªùÂèÇÂä†ÈîªÁÇºÔºåËøôËÆ©‰ªñÁà±ÂæóÊõ¥UGTÂ∞ë‰∫Ü",
        "ÂÖçË¥πÊâãÊ¶¥Âºπ hackÁªïËøá‰ΩúÂºäÂ∑•‰ΩúDA HOOD roblox aimbotÁûÑÂáÜÊó†Â£∞ÁõÆÊ†áÁªïËøá2020Â∑•‰ΩúÁúüÊ≠£ÂÖçË¥π‰∏ãËΩΩÂíå‰ΩøÁî®",
        "zalÁôºÊòé‰∫ÜrobloxÊ±ΩËªäË≤øÊòìÂïÜÁöÑËàπÈï∑ro blocksÔºå‰∏¶Â∞áÂÖ∂Ê¥©ÊºèÂà∞Êï¥ÂÄãÂÆáÂÆôÔºåÈÇÑ‰øÆË£ú‰∫ÜËôõÂÅáÁöÑËßíÁ•ûÊ®°ÂºèÂíåËôõÂÅáÁöÑË∫´È´îÔºåÈÇÑÁôºÊòé‰∫ÜÂü∫ÊñºÈÄüÂ∫¶ÁöÑAUTOWALLÂíåÁÑ°ÈôêÂà∂ÁöÑËá™ÂãïÂ£ÅÁ¥ôÈÅäÊà≤ ",
        "ÂΩº„ÅåË™§„Å£„Å¶Á¶ÅÊ≠¢„Åï„Çå„Åü„Åü„ÇÅ„Å´„Éï„Ç°„É≥„Éà„É†„Åã„Çâautowallgaming„ÇíÁ¶ÅÊ≠¢Ëß£Èô§„Åô„ÇãË´ãÈ°ò„Å®„Åù„Çå„ÅØ„Åß„Åü„Çâ„ÇÅ„Åß„Åô„Åù„Çå„ÅØ„Åæ„Å£„Åü„ÅèÊÑèÂë≥„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„Å™„Åú„ÅÇ„Å™„Åü„ÅØÂêàÊ≥ïÁöÑ„Å™„Éó„É¨„Éº„É§„Éº„ÇíÁ¶ÅÊ≠¢„Åô„Çã„ÅÆ„Åß„Åô„Åã ",
        "„Ç∏„Çß„Ç§„ÇΩ„É≥„ÅØÁßÅ„ÅåÁ•û„Å´Ë™ì„ÅÜÂ•≥ÊÄßÁöÑ„Å™Áî∑„ÅÆÂ≠ê„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì ",
        "ÂÇëÊ£Æ‰∏çÊòØÊàëÂêë‰∏äÂ∏ùÁôºË™ìÂ•≥ÊÄßÁî∑Â≠© "
    },
    ["Emoji"] = {
        "üî•üî•üî•üî•üî•üî•üî•üî•",
        "üòÖüòÖüòÖüòÖüòÖüòÖüòÖüòÖ",
        "üòÇüòÇüòÇüòÇüòÇüòÇüòÇüòÇ",
        "üòπüòπüòπüòπüòπüòπüòπüòπ",
        "üòõüòõüòõüòõüòõüòõüòõüòõ",
        "ü§©ü§©ü§©ü§©ü§©ü§©ü§©ü§©",
        "üåàüåàüåàüåàüåàüåàüåàüåà",
        "üòéüòéüòéüòéüòéüòéüòéüòé",
        "ü§†ü§†ü§†ü§†ü§†ü§†ü§†ü§†",
        "üòîüòîüòîüòîüòîüòîüòîüòî"
    },
    ["Main"] = {
        "brb taking a nap üí§üí§üí§ ",
        "gonna go take a walk üö∂‚Äç‚ôÇÔ∏èüö∂‚Äç‚ôÄÔ∏èüö∂‚Äç‚ôÇÔ∏èüö∂‚Äç‚ôÄÔ∏è ",
        "#osiris better XD .gg/dhmscript",
        "osiris user VV üò≥üò≥üò≥",
        "just a skill issue that you dont have osiris",
        "mad cause no osiris LOL .gg/dhmscript"
    }
}

function CheckWall(head)
    if v == LocalPlayer then
        return false
    end

    local castPoints = {LocalPlayer.Character.Head.Position, head.Position}
    local ignoreList = {LocalPlayer.Character, head.Parent}
    a = workspace.CurrentCamera:GetPartsObscuringTarget(castPoints, ignoreList)
    if #a == 0 then
        return false
    end

    return true
end

function IsAlive()
    if
        LocalPlayer.Character.Humanoid.Health > 0 and LocalPlayer.Character:FindFirstChild("Humanoid") and
            LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
     then
        return true
    else
        return false
    end
end

function getClosestPlayerToCursor()
    local closestPlayer

    local shortestDistance = FOV.Radius

    for i, v in pairs(game.Players:GetPlayers()) do
        if
            v ~= LocalPlayer and v.Character and v.Character:FindFirstChild("Humanoid") and
                v.Character.Humanoid.Health ~= 0 and
                v.Character:FindFirstChild("LowerTorso")
         then
            if not CheckWall(v.Character.Head) then
                local pos = CC:WorldToViewportPoint(v.Character.PrimaryPart.Position)
                local magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(LocalMouse.X, LocalMouse.Y)).magnitude
                if magnitude < shortestDistance then
                    closestPlayer = v
                    shortestDistance = magnitude
                end
            end
        end
    end
    return closestPlayer
end

local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local VisualizerFolder = Instance.new("Folder")
VisualizerFolder.Parent = game.Workspace.Terrain

function createvisualizer()
    local Visualizer = Instance.new("Part")
    Visualizer.Anchored = true
    Visualizer.CanCollide = false
    Visualizer.Size = Vector3.new(2, 2, 2)
    Visualizer.Parent = VisualizerFolder
    Visualizer.Color = Color3.fromRGB(0, 0, 0)
    Visualizer.Shape = Enum.PartType.Ball
    if Script.Desync.Velocity.Desync and not Script.Desync.CFrame.Desync and getgenv().VisualizerVelocity ~= nil then
        Visualizer.Position = LocalPlayer.Character.HumanoidRootPart.Position + getgenv().VisualizerVelocity * 0.1413
    else
        Visualizer.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame
    end
    Visualizer.Transparency = 1
    BoxVar = Instance.new("BoxHandleAdornment", Visualizer)
    BoxVar.Name = "Box"
    BoxVar.AlwaysOnTop = true
    BoxVar.ZIndex = 4
    BoxVar.Adornee = Visualizer
    BoxVar.Color3 = Script.Desync.Velocity.VisualizeColor
    BoxVar.Transparency = 0.5
    BoxVar.Size = Visualizer.Size
    game:GetService("RunService").RenderStepped:Wait()
    Visualizer:Destroy()
end

local Window = Library:CreateWindow("osiris", Vector2.new(492, 598), Enum.KeyCode.RightShift)

--// Tabs
local Main = Window:CreateTab("Main")
local Rage = Window:CreateTab("Rage")
local Misc = Window:CreateTab("Misc")
local Visuals = Window:CreateTab("Visuals")
local Settings = Window:CreateTab("Settings")

--// Sectors
local a = Main:CreateSector("Movement", "left")
local b = Main:CreateSector("Anti Aim", "right")
local c = Misc:CreateSector("Misc", "left")
local d = Misc:CreateSector("Shit Talk", "right")
local e = Misc:CreateSector("Cursor", "right")
local f = Rage:CreateSector("Target Aim", "left")
local g = Rage:CreateSector("Part", "right")
local i = Rage:CreateSector("Tracer", "right")
local h = Visuals:CreateSector("Self Visuals", "right")
local j = Main:CreateSector("Target Strafe", "left")
local k = Rage:CreateSector("Ragebot", "left")
local l = Visuals:CreateSector("World Visuals", "right")
local n = Rage:CreateSector("Aimlock", "left")
local o = Rage:CreateSector("FOV", "right")
local p = Misc:CreateSector("Auto Buys", "left")
local q = Misc:CreateSector("Animations", "left")

local LibrarySettings = Settings:CreateSector("Settings", "left")

local Speed =
    a:AddToggle(
    "Speed",
    false,
    function(Boolean)
        Script.Main.Speed = Boolean
    end
):AddKeybind()

a:AddDropdown(
    "Method",
    {"CFrame", "BHop"},
    "CFrame",
    false,
    function(Option)
        Script.Main.SpeedType = Option

        if Option ~= "BHop" then
            LocalPlayer.Character.Humanoid.UseJumpPower = true
        end
    end
)

a:AddSlider(
    "Speed",
    0,
    1,
    100,
    1,
    function(Value)
        Script.Main.SpeedPower = Value / 40
    end
)

a:AddToggle(
    "Infinite Jump",
    false,
    function(Boolean)
        Script.Main.InfiniteJump = Boolean

        if Script.Main.InfiniteJump then
            LocalPlayer.Character.Humanoid.UseJumpPower = false
            local InfiniteJump =
                UIS.InputBegan:Connect(
                function(key)
                    if key.KeyCode == Enum.KeyCode.Space and Script.Main.InfiniteJump then
                        LocalPlayer.Character.Humanoid:ChangeState("Jumping")
                    elseif not Script.Main.InfiniteJump then
                        LocalPlayer.Character.Humanoid.UseJumpPower = true
                    end
                end
            )
        end
    end
)

a:AddToggle(
    "Fake Macro",
    false,
    function(Boolean)
        Script.Main.FakeMacro = Boolean

        if Script.Main.FakeMacro then
            local Dance = game:GetService("ReplicatedStorage").ClientAnimations.Crouching
            LoadedAnim = LocalPlayer.Character.Humanoid:LoadAnimation(Dance)
            LoadedAnim:Play()
        else
            pcall(
                function()
                    LoadedAnim:Stop()
                end
            )
        end

        while Script.Main.FakeMacro == true do
            task.wait()
            LocalPlayer.Character.HumanoidRootPart.Velocity =
                LocalPlayer.Character.HumanoidRootPart.CFrame.lookVector * 190
        end
    end
):AddKeybind()
--[[Toggle:AddColorpicker(Color3.fromRGB(255,0,0), function(Color)
    print(Color)
end)]]
a:AddLabel("Label")

b:AddSeperator("Animations")

b:AddToggle(
    "Bicycle",
    false,
    function(Boolean)
        if Boolean then
            local Dance = game:GetService("ReplicatedStorage").ClientAnimations.Bicycling
            LoadedAnim = LocalPlayer.Character.Humanoid:LoadAnimation(Dance)
            LoadedAnim:Play()
        else
            pcall(
                function()
                    LoadedAnim:Stop()
                end
            )
        end
    end
):AddKeybind()

b:AddToggle(
    "Block",
    false,
    function(Boolean)
        if Boolean then
            local Dance = game:GetService("ReplicatedStorage").ClientAnimations.Block
            LoadedAnim = LocalPlayer.Character.Humanoid:LoadAnimation(Dance)
            LoadedAnim:Play()
        else
            pcall(
                function()
                    LoadedAnim:Stop()
                end
            )
        end
    end
):AddKeybind()

b:AddToggle(
    "Lay",
    false,
    function(Boolean)
        if Boolean then
            local Dance = LayAnimation
            LoadedAnim = LocalPlayer.Character.Humanoid:LoadAnimation(Dance)
            LoadedAnim:Play()
        else
            pcall(
                function()
                    LoadedAnim:Stop()
                end
            )
        end
    end
):AddKeybind()

b:AddToggle(
    "Lean",
    false,
    function(Boolean)
        if Boolean then
            local Dance = LeanAnimation
            LoadedAnim = LocalPlayer.Character.Humanoid:LoadAnimation(Dance)
            LoadedAnim:Play()
        else
            pcall(
                function()
                    LoadedAnim:Stop()
                end
            )
        end
    end
):AddKeybind()
--

b:AddToggle(
    "Dance1Animation",
    false,
    function(Boolean)
        if Boolean then
            local Dance = Dance1Animation
            LoadedAnim = LocalPlayer.Character.Humanoid:LoadAnimation(Dance)
            LoadedAnim:Play()
        else
            pcall(
                function()
                    LoadedAnim:Stop()
                end
            )
        end
    end
):AddKeybind()

b:AddToggle(
    "Dance2Animation",
    false,
    function(Boolean)
        if Boolean then
            local Dance = Dance2Animation
            LoadedAnim = LocalPlayer.Character.Humanoid:LoadAnimation(Dance)
            LoadedAnim:Play()
        else
            pcall(
                function()
                    LoadedAnim:Stop()
                end
            )
        end
    end
):AddKeybind()

b:AddSeperator("Visuals")

b:AddToggle(
    "Jitter",
    false,
    function(Boolean)
        Script.AntiAims.JitterBot = Boolean

        if Boolean then
            LocalPlayer.Character.Humanoid.AutoRotate = false
        else
            LocalPlayer.Character.Humanoid.AutoRotate = true
        end
    end
):AddKeybind()

b:AddToggle(
    "SpinBot",
    false,
    function(Boolean)
        Script.AntiAims.SpinBot = Boolean

        if Boolean then
            LocalPlayer.Character.Humanoid.AutoRotate = false
        else
            LocalPlayer.Character.Humanoid.AutoRotate = true
        end
    end
):AddKeybind()

b:AddSlider(
    "Spinbot Speed",
    1,
    100,
    100,
    1,
    function(Value)
        Script.AntiAims.SpinBotSpeed = Value
    end
)

b:AddSeperator("Desync")

b:AddToggle(
    "Velocity Desync",
    false,
    function(Boolean)
        Script.Desync.Velocity.Desync = Boolean
    end
):AddKeybind()

b:AddToggle(
    "Visualize",
    false,
    function(Boolean)
        Script.Desync.Velocity.Visualize = Boolean
    end
):AddColorpicker(
    Color3.fromRGB(203, 9, 61),
    function(Color)
        Script.Desync.Velocity.VisualizeColor = Color
    end
)

b:AddSlider(
    "Position X",
    -50,
    0,
    50,
    1,
    function(Value)
        Script.Desync.Velocity.X = Value / 2500
    end
)

b:AddSlider(
    "Position X",
    -50,
    0,
    50,
    1,
    function(Value)
        Script.Desync.Velocity.Y = Value / 2500
    end
)

b:AddSlider(
    "Position X",
    -50,
    0,
    50,
    1,
    function(Value)
        Script.Desync.Velocity.Z = Value / 2500
    end
)

b:AddToggle(
    "Unhittable",
    false,
    function(Boolean)
        Script.Desync.Velocity.Unhittable = Boolean
    end
)

b:AddSeperator("-")

b:AddToggle(
    "CFrame Desync",
    false,
    function(Boolean)
        Script.Desync.CFrame.Desync = Boolean
    end
):AddKeybind()

b:AddToggle(
    "Random Mode",
    false,
    function(Boolean)
        Script.Desync.CFrame.RandomMode = Boolean
    end
)

b:AddSlider(
    "Power",
    0,
    0,
    50,
    1,
    function(Value)
        Script.Desync.CFrame.RandomModePower = Value
    end
)

b:AddToggle(
    "Roll",
    false,
    function(Boolean)
        Script.Desync.CFrame.Roll = Boolean
    end
)

b:AddToggle(
    "Manual",
    false,
    function(Boolean)
        Script.Desync.CFrame.Manual = Boolean
    end
)

b:AddSlider(
    "X",
    -50,
    0,
    50,
    1,
    function(Value)
        Script.Desync.CFrame.X = Value
    end
)

b:AddSlider(
    "Y",
    -50,
    0,
    50,
    1,
    function(Value)
        Script.Desync.CFrame.Y = Value
    end
)

b:AddSlider(
    "Z",
    -50,
    0,
    50,
    1,
    function(Value)
        Script.Desync.CFrame.Z = Value
    end
)

b:AddSlider(
    "Rotation X",
    -360,
    0,
    360,
    1,
    function(Value)
        Script.Desync.CFrame.RotationX = Value
    end
)

b:AddSlider(
    "Rotation Y",
    -360,
    0,
    360,
    1,
    function(Value)
        Script.Desync.CFrame.RotationY = Value
    end
)

b:AddSlider(
    "Rotation Z",
    -360,
    0,
    360,
    1,
    function(Value)
        Script.Desync.CFrame.RotationZ = Value
    end
)

--fin0

j:AddToggle(
    "Target Strafe",
    false,
    function(Boolean)
        Script.Strafe.Enabled = Boolean
    end
)

j:AddToggle(
    "Desync Strafe",
    false,
    function(Boolean)
        Script.Strafe.DesyncStrafe = Boolean

        if Script.Desync.CFrame.Desync == false and Script.Strafe.DesyncStrafe then
            LinoriaNotifs:Notify("CFrame Desync must be enabled for this to work.", 5)
        end
    end
)

j:AddToggle(
    "Strafe Visualize",
    false,
    function(Boolean)
        Script.Strafe.Visual = Boolean
    end
):AddColorpicker(
    Color3.fromRGB(255, 255, 255),
    function(color)
        Script.Strafe.VisualColor = color
    end
)

j:AddSlider(
    "Strafe Speed",
    0,
    5,
    100,
    1,
    function(Value)
        Script.Strafe.Speed = Value
    end
)

j:AddSlider(
    "Radius",
    0,
    5,
    100,
    1,
    function(Value)
        Script.Strafe.Distance = Value
    end
)

j:AddSlider(
    "Height",
    0,
    5,
    100,
    1,
    function(Value)
        Script.Strafe.Height = Value
    end
)

d:AddDropdown(
    "Shit Talk Type",
    {"Emoji", "Main", "Chinese"},
    "Main",
    false,
    function(Option)
        Script.ShitTalk.Type = Option
    end
)

d:AddSlider(
    "Delay",
    0,
    30,
    30,
    1,
    function(Value)
        Script.ShitTalk.Delay = Value
    end
)

d:AddToggle(
    "Shit talk",
    false,
    function(Boolean)
        Script.ShitTalk.Enabled = Boolean
    end
)

local TopCursorToggle =
    e:AddToggle(
    "Top",
    true,
    function(Boolean)
        game:GetService("Players").LocalPlayer.PlayerGui.MainScreenGui.Aim.Top.Visible = Boolean
    end
)

local TopCursorColor =
    TopCursorToggle:AddColorpicker(
    Color3.fromRGB(255, 255, 255),
    function(color)
        game:GetService("Players").LocalPlayer.PlayerGui.MainScreenGui.Aim.Top.BackgroundColor3 = color
    end
)

local MiddleCursorToggle =
    e:AddToggle(
    "Middle",
    true,
    function(Boolean)
        game:GetService("Players").LocalPlayer.PlayerGui.MainScreenGui.Aim.Visible = Boolean
    end
)

local MiddleCursorColor =
    MiddleCursorToggle:AddColorpicker(
    Color3.fromRGB(255, 255, 255),
    function(color)
        game:GetService("Players").LocalPlayer.PlayerGui.MainScreenGui.Aim.BackgroundColor3 = color
    end
)

local BottomCursorToggle =
    e:AddToggle(
    "Bottom",
    true,
    function(Boolean)
        game:GetService("Players").LocalPlayer.PlayerGui.MainScreenGui.Aim.Bottom.Visible = Boolean
    end
)

local BottomCursorColor =
    BottomCursorToggle:AddColorpicker(
    Color3.fromRGB(255, 255, 255),
    function(color)
        game:GetService("Players").LocalPlayer.PlayerGui.MainScreenGui.Aim.Bottom.BackgroundColor3 = color
    end
)

local LeftCursorToggle =
    e:AddToggle(
    "Left",
    true,
    function(Boolean)
        game:GetService("Players").LocalPlayer.PlayerGui.MainScreenGui.Aim.Left.Visible = Boolean
    end
)

local LeftCursorColor =
    LeftCursorToggle:AddColorpicker(
    Color3.fromRGB(255, 255, 255),
    function(color)
        game:GetService("Players").LocalPlayer.PlayerGui.MainScreenGui.Aim.Left.BackgroundColor3 = color
    end
)

local RightCursorToggle =
    e:AddToggle(
    "Right",
    true,
    function(Boolean)
        game:GetService("Players").LocalPlayer.PlayerGui.MainScreenGui.Aim.Right.Visible = Boolean
    end
)

local RightCursorColor =
    RightCursorToggle:AddColorpicker(
    Color3.fromRGB(255, 255, 255),
    function(color)
        game:GetService("Players").LocalPlayer.PlayerGui.MainScreenGui.Aim.Right.BackgroundColor3 = color
    end
)

local Spin =
    e:AddToggle(
    "Spin",
    false,
    function(Boolean)
        getgenv().SpinningCursor = Boolean
    end
)

e:AddSlider(
    "Spinning Cursor Speed",
    0,
    1,
    50,
    1,
    function(Value)
        getgenv().SpinPower = Value
    end
)

e:AddToggle(
    "Swastika",
    false,
    function(Boolean)
        Swastika.Visible = Boolean
    end
):AddColorpicker(
    Color3.fromRGB(255, 255, 255),
    function(Color)
        Swastika.TextColor3 = Color
    end
)

e:AddToggle(
    "Rainbow",
    false,
    function(Boolean)
        Script.Cursor.Rainbow = Boolean
    end
)

e:AddToggle(
    "Spinning Swastika",
    false,
    function(Boolean)
        Script.Cursor.Spin = Boolean
    end
)

e:AddSlider(
    "Swastika Spin Speed",
    0,
    1,
    5,
    1,
    function(Value)
        Script.Cursor.SpinSpeed = Value
    end
)
--// Target Aim

local Enabled =
    f:AddToggle(
    "Target Aim",
    false,
    function(Boolean)
        Script.TargetAim.Enabled = Boolean
    end
)

f:AddToggle(
    "Lock Keybind",
    false,
    function(Boolean)
        getgenv().Locking = Boolean

        if getgenv().Locking == true and Script.TargetAim.Enabled then
            getgenv().Plr = getClosestPlayerToCursor()

            local Health = getgenv().Plr.Character.Humanoid.Health

            if Script.TargetAim.LookAt then
                LocalPlayer.Character.Humanoid.AutoRotate = false
            else
                LocalPlayer.Character.Humanoid.AutoRotate = true
            end

            if Script.TargetAim.Notifications then
                LinoriaNotifs:Notify("Locked Onto: " .. getgenv().Plr.Name .. "!", 3)
            end

            if Script.Tracer.Enabled then
                Tracer.Visible = true
            end

            if Script.TargetAim.ViewTarget then
                game.Workspace.Camera.CameraSubject = getgenv().Plr.Character.Humanoid
            end

            if Script.Strafe.Enabled and not Script.Strafe.DesyncStrafe then
                if Script.Strafe.Visual then
                    StrafeVisualss.Visible = true
                    StrafeVisualss.Color = Script.Strafe.VisualColor
                    StrafeVisualss.Radius = Script.Strafe.Distance
                end

                for i = 0, 10000000, Script.Strafe.Speed do
                    task.wait()
                    if getgenv().Locking and Script.Strafe.Enabled then
                        LocalPlayer.Character.HumanoidRootPart.CFrame =
                            CFrame.new(getgenv().Plr.Character.HumanoidRootPart.Position) *
                            CFrame.Angles(0, math.rad(i), 0) *
                            CFrame.new(Script.Strafe.Distance, Script.Strafe.Height, 0)
                    end
                end
            end
        else
            game.Workspace.Camera.CameraSubject = LocalPlayer.Character.Humanoid
            LocalPlayer.Character.Humanoid.AutoRotate = true
            Tracer.Visible = false
            if getgenv().HealthNotifs then
                getgenv().HealthNotifs:Disconnect()
            end
            StrafeVisualss.Visible = false
            StrafeVisualss.Position = Vector3.new(9999, 9999, 9999)
        end
    end
):AddKeybind()

f:AddToggle(
    "Notifications",
    false,
    function(Boolean)
        Script.TargetAim.Notifications = Boolean
    end
)

f:AddToggle(
    "Knock Notifs",
    false,
    function(Boolean)
        Script.TargetAim.HitNotifs = Boolean
    end
)

f:AddTextbox(
    "Target Aim Prediction",
    nil,
    function(Text)
        Script.TargetAim.Prediction = Text
    end
)

f:AddToggle(
    "Auto Prediction",
    false,
    function(Boolean)
        Script.TargetAim.AutoPrediction = Boolean
    end
)

f:AddDropdown(
    "BodyPart",
    {
        "Head",
        "HumanoidRootPart",
        "Torso",
        "UpperTorso",
        "LowerTorso",
        "RightHand",
        "LeftLowerArm",
        "RightLowerArm",
        "RightUpperArm",
        "LeftLowerLeg",
        "LeftUpperLeg",
        "LeftFoot",
        "RightFoot",
        "RightUpperLeg",
        "RightLowerLeg"
    },
    "HumanoidRootPart",
    false,
    function(Option)
        Script.TargetAim.Part = Option
        Script.TargetAim.SelectedPart = Option
    end
)

f:AddToggle(
    "Random Body HitPart",
    false,
    function(Boolean)
        Script.TargetAim.RandomBodyPart = Boolean
    end
)

f:AddToggle(
    "Resolver",
    false,
    function(Boolean)
        Script.TargetAim.Resolver = Boolean
    end
)

f:AddToggle(
    "View Target",
    false,
    function(Boolean)
        Script.TargetAim.ViewTarget = Boolean
    end
)

f:AddToggle(
    "Look At",
    false,
    function(Boolean)
        Script.TargetAim.LookAt = Boolean
    end
)

k:AddToggle(
    "RageBot",
    false,
    function(Boolean)
        Script.RageBot.Enabled = Boolean
    end
):AddKeybind()

k:AddToggle(
    "LookAt",
    false,
    function(Boolean)
        Script.RageBot.LookAt = Boolean
    end
)

k:AddToggle(
    "Resolver",
    false,
    function(Boolean)
        Script.RageBot.Resolver = Boolean
    end
)

k:AddSlider(
    "Distance",
    0,
    50,
    200,
    1,
    function(Value)
        Script.RageBot.Distance = Value
    end
)

g:AddToggle(
    "Part Enabled",
    false,
    function(Boolean)
        Script.PartSettings.PartVisible = Boolean
    end
):AddColorpicker(
    Color3.fromRGB(255, 0, 0),
    function(Color)
        Script.PartSettings.PartColor = Color
    end
)

g:AddToggle(
    "Rainbow Part",
    false,
    function(Boolean)
        Script.PartSettings.PartRainbow = Boolean
    end
)

g:AddSlider(
    "Size",
    0,
    6,
    100,
    1,
    function(Value)
        Script.PartSettings.PartSize = Vector3.new(Value, Value, Value)
    end
)

g:AddSlider(
    "Transparency",
    0,
    1,
    10,
    1,
    function(Value)
        Script.PartSettings.PartTransparency = Value / 10
    end
)

g:AddDropdown(
    "Material",
    {"Neon", "Plastic", "ForceField"},
    "ForceField",
    false,
    function(Option)
        Script.PartSettings.PartMaterial = Enum.Material[Option]
    end
)

g:AddDropdown(
    "Shape",
    {"Cylinder", "Block", "Ball"},
    "Block",
    false,
    function(Option)
        Script.PartSettings.PartType = Enum.PartType[Option]
    end
)

l:AddToggle(
    "Bullet Tracers",
    false,
    function(Boolean)
        BulletTracers = Boolean
    end
):AddColorpicker(
    Color3.fromRGB(255, 0, 0),
    function(Color)
        BulletTracerColor = Color
    end
)

l:AddSlider(
    "Bullet Thickness",
    0,
    5,
    10,
    1,
    function(Value)
        BulletWidth = Value
    end
)

l:AddToggle(
    "Custom Gun SFX",
    false,
    function(Boolean)
        Script.Misc.CustomGunSFX = Boolean
    end
)

l:AddTextbox(
    "ID",
    nil,
    function(Text)
        Script.Misc.ID = "rbxassetid://" .. Text .. ""
    end
)

l:AddSlider(
    "Volume",
    0,
    5,
    10,
    1,
    function(Value)
        Script.Misc.Volume = Value
    end
)

local Ambient =
    l:AddToggle(
    "Ambient",
    false,
    function(Boolean)
        Ambient = Boolean

        if not Ambient then
            game:GetService("Lighting").OutdoorAmbient = Color3.fromRGB(152, 152, 146)
            game:GetService("Lighting").Ambient = Color3.fromRGB(0, 0, 0)
        end
    end
)

game:GetService("Lighting").Ambient = Color3.fromRGB(0, 0, 0)
game:GetService("Lighting").OutdoorAmbient = Color3.fromRGB(152, 152, 146)

Ambient:AddColorpicker(
    Color3.fromRGB(255, 255, 255),
    function(Color)
        if Ambient then
            game:GetService("Lighting").Ambient = Color
        end
    end
)

game:GetService("Lighting").Ambient = Color3.fromRGB(0, 0, 0)
game:GetService("Lighting").OutdoorAmbient = Color3.fromRGB(152, 152, 146)

Ambient:AddColorpicker(
    Color3.fromRGB(255, 255, 255),
    function(Color)
        if Ambient then
            game:GetService("Lighting").OutdoorAmbient = Color
        end
    end
)

game:GetService("Lighting").Ambient = Color3.fromRGB(0, 0, 0)
game:GetService("Lighting").OutdoorAmbient = Color3.fromRGB(152, 152, 146)

local highlight =
    h:AddToggle(
    "Shadow",
    false,
    function(state)
        FFBody = state

        if not FFBody then
            if LocalPlayer.Character then
                for i, v in pairs(LocalPlayer.Character:GetChildren()) do
                    if v:IsA("BasePart") then
                        v.Material = Enum.Material.Plastic
                    end
                end
            end
        end
    end
)

function Weld(x, y)
    local W = Instance.new("Weld")
    W.Part0 = x
    W.Part1 = y
    local CJ = CFrame.new(x.Position)
    local C0 = x.CFrame:inverse() * CJ
    local C1 = y.CFrame:inverse() * CJ
    W.C0 = C0
    W.C1 = C1
    W.Parent = x
end

h:AddToggle(
    "Custom Character",
    false,
    function(state)
        if state then
            for i, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                if v:IsA("BasePart") or v:IsA("Decal") then
                    v.Transparency = 1
                end
            end

            getgenv().Custom =
                LocalPlayer.Character:WaitForChild("Humanoid").Died:Connect(
                function()
                    fuc:Destroy()
                    wait(5)
                    fuc = Instance.new("Part", workspace)
                    fuc.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                    fuc.CanCollide = false
                    fuck = Instance.new("SpecialMesh")
                    fuck.Parent = fuc
                    fuck.MeshType = "FileMesh"
                    if getgenv().CharacterType == "AmongUs" then
                        fuck.Scale = Vector3.new(0.2, 0.2, 0.2)
                        fuck.TextureId = "http://www.roblox.com/asset/?id=6686375937"
                        fuck.MeshId = "http://www.roblox.com/asset/?id=6686375902"
                    elseif getgenv().CharacterType == "Stewie" then
                        fuck.Scale = Vector3.new(0.1, 0.1, 0.1)
                        fuck.TextureId = "http://www.roblox.com/asset/?id=3692134820"
                        fuck.MeshId = "http://www.roblox.com/asset/?id=3692134742"
                    elseif getgenv().CharacterType == "Sonic" then
                        fuck.Scale = Vector3.new(0.1, 0.1, 0.1)
                        fuck.TextureId = "http://www.roblox.com/asset/?id=6901422268"
                        fuck.MeshId = "http://www.roblox.com/asset/?id=6901422170"
                    elseif getgenv().CharacterType == "Chicken" then
                        fuck.Scale = Vector3.new(3, 3, 3)
                        fuck.TextureId = "http://www.roblox.com/asset/?id=2114220248"
                        fuck.MeshId = "http://www.roblox.com/asset/?id=2114220154"
                    end

                    Weld(game.Players.LocalPlayer.Character.HumanoidRootPart, fuc)

                    for i, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                        if v:IsA("BasePart") or v:IsA("Decal") then
                            v.Transparency = 1
                        end
                    end
                end
            )

            fuc = Instance.new("Part", workspace)
            fuc.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
            fuc.CanCollide = false
            fuck = Instance.new("SpecialMesh")
            fuck.Parent = fuc
            fuck.MeshType = "FileMesh"

            if getgenv().CharacterType == "AmongUs" then
                fuck.Scale = Vector3.new(0.2, 0.2, 0.2) --sizerbxassetid://6901422268
                fuck.TextureId = "http://www.roblox.com/asset/?id=6686375937" --Texture / Skin
                fuck.MeshId = "http://www.roblox.com/asset/?id=6686375902" -- Mesh Id
            elseif getgenv().CharacterType == "Stewie" then
                fuck.Scale = Vector3.new(0.1, 0.1, 0.1) --sizerbxassetid://6901422268
                fuck.TextureId = "http://www.roblox.com/asset/?id=3692134820" --Texture / Skin
                fuck.MeshId = "http://www.roblox.com/asset/?id=3692134742" -- Mesh Id
            elseif getgenv().CharacterType == "Sonic" then
                fuck.Scale = Vector3.new(0.1, 0.1, 0.1) --sizerbxassetid://6901422268
                fuck.TextureId = "http://www.roblox.com/asset/?id=6901422268" --Texture / Skin
                fuck.MeshId = "http://www.roblox.com/asset/?id=6901422170"
            elseif getgenv().CharacterType == "Chicken" then
                fuck.Scale = Vector3.new(3, 3, 3) --sizerbxassetid://6901422268
                fuck.TextureId = "http://www.roblox.com/asset/?id=2114220248" --Texture / Skin
                fuck.MeshId = "http://www.roblox.com/asset/?id=2114220154" -- Mesh Id
            end

            Weld(game.Players.LocalPlayer.Character.HumanoidRootPart, fuc)
        else
            fuc:Destroy()

            for i, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                if v:IsA("BasePart") or v:IsA("Decal") and v.Name ~= "CUFF" then
                    v.Transparency = 0
                end

                if v.Name == "CUFF" then
                    v:Destroy()
                end
            end

            for i, v in pairs(LocalPlayer.Character.BodyEffects.SpecialParts:GetDescendants()) do
                if v:IsA("BasePart") or v:IsA("Decal") then
                    v.Transparency = 1
                end
            end

            getgenv().Custom:Disconnect()

            LocalPlayer.Character.HumanoidRootPart.Transparency = 1
        end
    end
)

h:AddDropdown(
    "Character Type",
    {"AmongUs", "Stewie", "Sonic", "Chicken"},
    "AmongUs",
    false,
    function(Option)
        getgenv().CharacterType = Option

        if Option == "AmongUs" then
            fuck.Scale = Vector3.new(0.2, 0.2, 0.2) --sizerbxassetid://6901422268
            fuck.TextureId = "http://www.roblox.com/asset/?id=6686375937" --Texture / Skin
            fuck.MeshId = "http://www.roblox.com/asset/?id=6686375902" -- Mesh Id
        elseif Option == "Stewie" then
            fuck.Scale = Vector3.new(0.1, 0.1, 0.1) --sizerbxassetid://6901422268
            fuck.TextureId = "http://www.roblox.com/asset/?id=3692134820" --Texture / Skin
            fuck.MeshId = "http://www.roblox.com/asset/?id=3692134742" -- Mesh Id
        elseif Option == "Sonic" then
            fuck.Scale = Vector3.new(0.25, 0.25, 0.25) --sizerbxassetid://6901422268
            fuck.TextureId = "http://www.roblox.com/asset/?id=6901422268" --Texture / Skin
            fuck.MeshId = "http://www.roblox.com/asset/?id=6901422170"
        elseif Option == "Chicken" then
            fuck.Scale = Vector3.new(3, 3, 3) --sizerbxassetid://6901422268
            fuck.TextureId = "http://www.roblox.com/asset/?id=2114220248" --Texture / Skin
            fuck.MeshId = "http://www.roblox.com/asset/?id=2114220154" -- Mesh Id
        end
    end
)

highlight:AddColorpicker(
    Color3.fromRGB(255, 255, 255),
    function(Color)
        FFBodyColour = Color
    end
)

local skybox = Instance.new("Sky")
skybox.Parent = game.Lighting
skybox.SkyboxBk = "rbxassetid://600830446"
skybox.SkyboxDn = "rbxassetid://600831635"
skybox.SkyboxFt = "rbxassetid://600832720"
skybox.SkyboxLf = "rbxassetid://600886090"
skybox.SkyboxRt = "rbxassetid://600833862"
skybox.SkyboxUp = "rbxassetid://600835177"

l:AddToggle(
    "Custom Skyboxes",
    false,
    function(Boolean)
        getgenv().Skybox = Boolean

        if not getgenv().Skybox then
            skybox.SkyboxBk = "rbxassetid://600830446"
            skybox.SkyboxDn = "rbxassetid://600831635"
            skybox.SkyboxFt = "rbxassetid://600832720"
            skybox.SkyboxLf = "rbxassetid://600886090"
            skybox.SkyboxRt = "rbxassetid://600833862"
            skybox.SkyboxUp = "rbxassetid://600835177"
        end
    end
)

l:AddDropdown(
    "Skybox",
    {"Normal", "DoomSpire", "CatGirl", "Vibe", "Blue Aurora"},
    "Normal",
    false,
    function(Option)
        getgenv().SkyBoxOption = Option

        if getgenv().Skybox then
            if getgenv().SkyBoxOption == "DoomSpire" then
                skybox.SkyboxBk = "rbxassetid://6050664592"
                skybox.SkyboxDn = "rbxassetid://6050648475"
                skybox.SkyboxFt = "rbxassetid://6050644331"
                skybox.SkyboxLf = "rbxassetid://6050649245"
                skybox.SkyboxRt = "rbxassetid://6050649718"
                skybox.SkyboxUp = "rbxassetid://6050650083"
            elseif getgenv().SkyBoxOption == "Normal" then
                skybox.SkyboxBk = "rbxassetid://600830446"
                skybox.SkyboxDn = "rbxassetid://600831635"
                skybox.SkyboxFt = "rbxassetid://600832720"
                skybox.SkyboxLf = "rbxassetid://600886090"
                skybox.SkyboxRt = "rbxassetid://600833862"
                skybox.SkyboxUp = "rbxassetid://600835177"
            elseif getgenv().SkyBoxOption == "CatGirl" then
                skybox.SkyboxBk = "rbxassetid://444167615"
                skybox.SkyboxDn = "rbxassetid://444167615"
                skybox.SkyboxFt = "rbxassetid://444167615"
                skybox.SkyboxLf = "rbxassetid://444167615"
                skybox.SkyboxRt = "rbxassetid://444167615"
                skybox.SkyboxUp = "rbxassetid://444167615"
            elseif getgenv().SkyBoxOption == "Vibe" then
                skybox.SkyboxBk = "rbxassetid://1417494030"
                skybox.SkyboxDn = "rbxassetid://1417494146"
                skybox.SkyboxFt = "rbxassetid://1417494253"
                skybox.SkyboxLf = "rbxassetid://1417494402"
                skybox.SkyboxRt = "rbxassetid://1417494499"
                skybox.SkyboxUp = "rbxassetid://1417494643"
            elseif getgenv().SkyBoxOption == "Blue Aurora" then
                skybox.SkyboxBk = "rbxassetid://12064107"
                skybox.SkyboxDn = "rbxassetid://12064152"
                skybox.SkyboxFt = "rbxassetid://12064121"
                skybox.SkyboxLf = "rbxassetid://12063984"
                skybox.SkyboxRt = "rbxassetid://12064115"
                skybox.SkyboxUp = "rbxassetid://12064131"
            end
        end
    end
)

---

i:AddToggle(
    "Tracer",
    false,
    function(Boolean)
        Script.Tracer.Enabled = Boolean

        if Script.Tracer.Enabled == false then
            Tracer.Visible = false
        end
    end
):AddColorpicker(
    Color3.fromRGB(255, 0, 0),
    function(Color)
        Script.Tracer.Color = Color

        Tracer.Color = Script.Tracer.Color
    end
)

i:AddSlider(
    "Tracer Thickness",
    0,
    1,
    10,
    1,
    function(Value)
        Script.Tracer.Thickness = Value

        Tracer.Thickness = Script.Tracer.Thickness
    end
)

i:AddDropdown(
    "Origin",
    {"Mouse", "Character"},
    "Mouse",
    false,
    function(Option)
        Script.Tracer.Origin = Option
    end
)

c:AddToggle(
    "Auto Stomp",
    false,
    function(state)
        Script.Misc.AutoStomp = state
    end
)

c:AddToggle(
    "Auto Reload",
    false,
    function(state)
        Script.Misc.AutoReload = state
    end
)

c:AddToggle(
    "Pick-Up Monkey",
    false,
    function(state)
        Script.Misc.PickUpMoney = state
    end
)

c:AddToggle(
    "Anti Stomp",
    false,
    function(state)
        Script.Misc.AntiStomp = state
    end
)

c:AddToggle(
    "Anti Bag",
    false,
    function(state)
        Script.Misc.AntiBag = state
    end
)

c:AddToggle(
    "Jump Cooldown",
    true,
    function(state)
        LocalPlayer.Character.Humanoid.UseJumpPower = state
    end
)

----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
--------------------------------SETTINGS BELLOW-----------------------------------
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
Settings:CreateConfigSystem("right")

LibrarySettings:AddTextbox(
    "Watermark Name",
    nil,
    function(Text)
        Script.Settings.CheatName = Text
        Library:CreateWatermark("" .. Script.Settings.CheatName .. " | {fps} | {game}")
    end
)

LibrarySettings:AddToggle(
    "Watermark",
    true,
    function(Boolean)
        game:GetService("CoreGui").Watermark.Enabled = Boolean
    end
)

LibrarySettings:AddToggle(
    "No FPS Cap",
    true,
    function(Boolean)
        if Boolean then
            setfpscap(99999)
        end
    end
)

LibrarySettings:AddTextbox(
    "FPS Cap",
    nil,
    function(Text)
        setfpscap(Text)
    end
)

--[[
        Enabled = false,
        Prediction = 0.1413,
        AutoPrediction = false,
        Resolver = false

]]
n:AddToggle(
    "CamLock",
    false,
    function(state)
        Script.CamLock.Enabled = state
    end
)

n:AddToggle(
    "KeyBind",
    false,
    function(state)
        getgenv().CamLocking = state

        if getgenv().CamLocking and Script.CamLock.Enabled == true then
            getgenv().CLT = getClosestPlayerToCursor()
        end
    end
):AddKeybind()

n:AddTextbox(
    "CamLock Prediction",
    nil,
    function(Text)
        Script.CamLock.Prediction = Text
    end
)

n:AddDropdown(
    "Camlock Part",
    {"Head", "HumanoidRootPart", "UpperTorso", "LowerTorso"},
    "Head",
    false,
    function(Option)
        Script.CamLock.Part = Option
    end
)

n:AddSlider(
    "Smoothness",
    0,
    100,
    100,
    1,
    function(Value)
        Script.CamLock.Smoothness = Value / 100
    end
)

n:AddToggle(
    "Resolver",
    false,
    function(state)
        Script.CamLock.Resolver = state
    end
)

--// FOV

local fov =
    o:AddToggle(
    "FOV",
    false,
    function(state)
        FOV.Visible = state

        if FOV.Visible == false then
            FOV.Radius = math.huge
        else
            FOV.Radius = abc
        end
    end
)

fov:AddColorpicker(
    Color3.fromRGB(255, 255, 255),
    function(Color)
        FOV.Color = Color
    end
)

fov:AddKeybind()

o:AddToggle(
    "FOV Filled",
    false,
    function(state)
        FOV.Filled = state
    end
)

o:AddSlider(
    "FOV Radius",
    0,
    200,
    1000,
    1,
    function(Value)
        FOV.Radius = Value
        abc = Value
    end
)

o:AddSlider(
    "FOV Transparency",
    0,
    10,
    10,
    1,
    function(Value)
        FOV.Transparency = Value / 10
    end
)

o:AddSlider(
    "FOV Sides",
    0,
    100,
    100,
    1,
    function(Value)
        FOV.NumSides = Value
    end
)

o:AddSlider(
    "FOV Thickness",
    0,
    5,
    10,
    1,
    function(Value)
        FOV.Thickness = Value / 3.33333
    end
)

local BuysUwu =
    p:AddDropdown(
    "Other",
    Buys,
    "Pick me",
    false,
    function(Option)
        if Option then
            local OldPosition = LocalPlayer.Character.HumanoidRootPart.CFrame
            LocalPlayer.Character.HumanoidRootPart.CFrame =
                game:GetService("Workspace").Ignored.Shop[Option].Head.CFrame
            wait(0.5)
            fireclickdetector(game:GetService("Workspace").Ignored.Shop[Option].ClickDetector)
            fireclickdetector(game:GetService("Workspace").Ignored.Shop[Option].ClickDetector)
            fireclickdetector(game:GetService("Workspace").Ignored.Shop[Option].ClickDetector)
            fireclickdetector(game:GetService("Workspace").Ignored.Shop[Option].ClickDetector)
            fireclickdetector(game:GetService("Workspace").Ignored.Shop[Option].ClickDetector)
            fireclickdetector(game:GetService("Workspace").Ignored.Shop[Option].ClickDetector)
            wait(0.5)
            LocalPlayer.Character.HumanoidRootPart.CFrame = OldPosition
        end
    end
)

local BuyOptions =
    p:AddDropdown(
    "Ammo",
    Buys,
    "Ammo",
    false,
    function(Option)
        if Option then
            local OldPosition = LocalPlayer.Character.HumanoidRootPart.CFrame
            LocalPlayer.Character.HumanoidRootPart.CFrame =
                game:GetService("Workspace").Ignored.Shop[Option].Head.CFrame
            wait(0.5)
            fireclickdetector(game:GetService("Workspace").Ignored.Shop[Option].ClickDetector)
            fireclickdetector(game:GetService("Workspace").Ignored.Shop[Option].ClickDetector)
            fireclickdetector(game:GetService("Workspace").Ignored.Shop[Option].ClickDetector)
            fireclickdetector(game:GetService("Workspace").Ignored.Shop[Option].ClickDetector)
            fireclickdetector(game:GetService("Workspace").Ignored.Shop[Option].ClickDetector)
            fireclickdetector(game:GetService("Workspace").Ignored.Shop[Option].ClickDetector)
            wait(0.5)
            LocalPlayer.Character.HumanoidRootPart.CFrame = OldPosition
        end
    end
)

local Buys = {}
--[[
for i,v in pairs(game:GetService("Workspace").Ignored.Shop:GetChildren()) do 
    if v:IsA("Model") then 
        if not string.match(v.Name, "Ammo") then
            if not string.match(v.Name, "Phone") then 
                if not string.match(v.Name, "Mask") then 
                    if not string.match(v.Name, "Weights") then 
                        BuysUwu:Add(v.Name)
                    end 
                end 
            end 
        end 
    end 
end 

for i,v in pairs(game:GetService("Workspace").Ignored.Shop:GetChildren()) do 
    if v:IsA("Model") then 
        if string.match(v.Name, "Ammo") then
            BuyOptions:Add(v.Name)
        end 
    end 
end 
]]
q:AddToggle(
    "Animation Changer",
    false,
    function(state)
        Anim = state
    end
)

q:AddDropdown(
    "Idle",
    {
        "Nothing",
        "Astronaut",
        "Bubbly",
        "Cartoony",
        "Confindent",
        "Cowboy",
        "Zombie",
        "Elder",
        "Ghost",
        "Knight",
        "Levitation",
        "Mage",
        "Astronaut",
        "Ninja",
        "OldSchool",
        "Patrol",
        "Pirate",
        "Popstar",
        "Princess",
        "Robot",
        "Rthro",
        "Stylish",
        "Superhero",
        "Toy",
        "Vampire",
        "Werewolf"
    },
    "Rthro",
    false,
    function(Option)
        local ballocks = Option

        if Anim then
            while wait(3) do
                if Anim then
                    LocalPlayer.Character.Animate.idle.Animation1.AnimationId = AnimationModule[ballocks][1]
                    LocalPlayer.Character.Animate.idle.Animation2.AnimationId = AnimationModule[ballocks][2]
                end
            end
        end
    end
)

q:AddDropdown(
    "Walk",
    {
        "Nothing",
        "Astronaut",
        "Bubbly",
        "Cartoony",
        "Confindent",
        "Cowboy",
        "Zombie",
        "Elder",
        "Ghost",
        "Knight",
        "Levitation",
        "Mage",
        "Astronaut",
        "Ninja",
        "OldSchool",
        "Patrol",
        "Pirate",
        "Popstar",
        "Princess",
        "Robot",
        "Rthro",
        "Stylish",
        "Superhero",
        "Toy",
        "Vampire",
        "Werewolf"
    },
    "Rthro",
    false,
    function(Option)
        local ballockss = Option

        if Anim then
            while wait(3) do
                if Anim then
                    LocalPlayer.Character.Animate.walk.WalkAnim.AnimationId = AnimationModule[ballockss][3]
                end
            end
        end
    end
)

q:AddDropdown(
    "Run",
    {
        "Nothing",
        "Astronaut",
        "Bubbly",
        "Cartoony",
        "Confindent",
        "Cowboy",
        "Zombie",
        "Elder",
        "Ghost",
        "Knight",
        "Levitation",
        "Mage",
        "Astronaut",
        "Ninja",
        "OldSchool",
        "Patrol",
        "Pirate",
        "Popstar",
        "Princess",
        "Robot",
        "Rthro",
        "Stylish",
        "Superhero",
        "Toy",
        "Vampire",
        "Werewolf"
    },
    "Rthro",
    false,
    function(Option)
        local Run = Option

        if Anim then
            while wait(3) do
                if Anim then
                    LocalPlayer.Character.Animate.run.RunAnim.AnimationId = AnimationModule[Run][4]
                end
            end
        end
    end
)

q:AddDropdown(
    "Fall",
    {
        "Nothing",
        "Astronaut",
        "Bubbly",
        "Cartoony",
        "Confindent",
        "Cowboy",
        "Zombie",
        "Elder",
        "Ghost",
        "Knight",
        "Levitation",
        "Mage",
        "Astronaut",
        "Ninja",
        "OldSchool",
        "Patrol",
        "Pirate",
        "Popstar",
        "Princess",
        "Robot",
        "Rthro",
        "Stylish",
        "Superhero",
        "Toy",
        "Vampire",
        "Werewolf"
    },
    "Rthro",
    false,
    function(Option)
        local fall = Option

        if Anim then
            while wait(3) do
                if Anim then
                    LocalPlayer.Character.Animate.fall.FallAnim.AnimationId = AnimationModule[fall][7]
                end
            end
        end
    end
)

q:AddDropdown(
    "Jump",
    {
        "Nothing",
        "Astronaut",
        "Bubbly",
        "Cartoony",
        "Confindent",
        "Cowboy",
        "Zombie",
        "Elder",
        "Ghost",
        "Knight",
        "Levitation",
        "Mage",
        "Astronaut",
        "Ninja",
        "OldSchool",
        "Patrol",
        "Pirate",
        "Popstar",
        "Princess",
        "Robot",
        "Rthro",
        "Stylish",
        "Superhero",
        "Toy",
        "Vampire",
        "Werewolf"
    },
    "Rthro",
    false,
    function(Option)
        local pooop = Option

        if Anim then
            while wait(3) do
                if Anim then
                    LocalPlayer.Character.Animate.jump.JumpAnim.AnimationId = AnimationModule[pooop][5]
                end
            end
        end
    end
)

LPH_JIT_ULTRA(
    function()
        RunService.heartbeat:Connect(
            function()
                for _, v in pairs(LocalPlayer.Character:GetChildren()) do
                    if v:IsA("Script") and v.Name ~= "Health" and v.Name ~= "Sound" and v:FindFirstChild("LocalScript") then
                        v:Destroy()
                    end
                end

                if FOV.Visible then
                    FOV.Position = Vector2.new(LocalMouse.X, LocalMouse.Y + 36)
                end

                if getgenv().CamLocking then
                    if getgenv().CLT ~= nil then
                        local Pos, OnScreen = CC:WorldToViewportPoint(getgenv().CLT.Character.Head.Position)
                        if OnScreen and Script.CamLock.Enabled then
                            if Script.CamLock.Resolver then
                                getgenv().Main =
                                    CFrame.new(
                                    CC.CFrame.p,
                                    getgenv().CLT.Character[Script.CamLock.Part].Position +
                                        (getgenv().CLT.Character.Humanoid.MoveDirection * 3)
                                )
                                CC.CFrame =
                                    CC.CFrame:Lerp(
                                    getgenv().Main,
                                    Script.CamLock.Smoothness,
                                    Enum.EasingStyle.Elastic,
                                    Enum.EasingDirection.InOut
                                )
                            else
                                getgenv().Main =
                                    CFrame.new(
                                    CC.CFrame.p,
                                    getgenv().CLT.Character[Script.CamLock.Part].Position +
                                        (getgenv().CLT.Character.HumanoidRootPart.Velocity * Script.CamLock.Prediction)
                                )
                                CC.CFrame =
                                    CC.CFrame:Lerp(
                                    getgenv().Main,
                                    Script.CamLock.Smoothness,
                                    Enum.EasingStyle.Elastic,
                                    Enum.EasingDirection.InOut
                                )
                            end
                        end
                    end
                end

                if Script.Misc.AutoReload then
                    if game:GetService("Players").LocalPlayer.Character:FindFirstChildWhichIsA("Tool") ~= nil then
                        if
                            game:GetService("Players").LocalPlayer.Character:FindFirstChildWhichIsA("Tool"):FindFirstChild(
                                "Ammo"
                            )
                         then
                            if
                                game:GetService("Players").LocalPlayer.Character:FindFirstChildWhichIsA("Tool"):FindFirstChild(
                                    "Ammo"
                                ).Value <= 0
                             then
                                game:GetService("ReplicatedStorage").MainEvent:FireServer(
                                    "Reload",
                                    game:GetService("Players").LocalPlayer.Character:FindFirstChildWhichIsA("Tool")
                                )
                            end
                        end
                    end
                end

                if Script.Misc.CustomGunSFX then
                    for i, v in pairs(LocalPlayer.Character:GetDescendants()) do
                        if v:IsA("Sound") and v.Name == "ShootSound" then
                            v.SoundId = Script.Misc.ID
                            v.Volume = Script.Misc.Volume
                        end
                    end
                end

                if Script.Misc.PickUpMoney then
                    for __, v in pairs(game:GetService("Workspace").Ignored.Drop:GetChildren()) do
                        if v.Name == "MoneyDrop" then
                            if (v.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude < 25 then
                                fireclickdetector(v.ClickDetector)
                            end
                        end
                    end
                end

                if Script.Misc.AntiBag then
                    if LocalPlayer.Character:FindFirstChild("Christmas_Sock") then
                        LocalPlayer.Character["Christmas_Sock"]:Destroy()
                    end
                end

                if Script.Misc.AntiStomp then
                    if LocalPlayer.Character.Humanoid.Health < 50 then
                        for __, v in pairs(LocalPlayer.Character:GetDescendants()) do
                            if v:IsA("BasePart") then
                                v:Destroy()
                            end
                        end
                    end
                end

                if Script.Misc.AutoStomp then
                    game.ReplicatedStorage.MainEvent:FireServer("Stomp")
                end

                if Swastika.Visible then
                    CursorPath.Swastika.Position = UDim2.fromOffset(LocalMouse.X - 43, LocalMouse.Y - 39)

                    if Script.Cursor.Rainbow then
                        CursorPath.Swastika.TextColor3 = Color3.fromHSV(tick() % 6 / 6, 1, 1)
                    end

                    if Script.Cursor.Spin == true then
                        CursorPath.Swastika.Rotation = CursorPath.Swastika.Rotation + Script.Cursor.SpinSpeed
                    end
                end

                if BulletTracers then
                    local ColourSequence =
                        ColorSequence.new(
                        {
                            ColorSequenceKeypoint.new(0, BulletTracerColor),
                            ColorSequenceKeypoint.new(1, BulletTracerColor)
                        }
                    )

                    for _, v in pairs(game:GetService("Workspace").Ignored:GetDescendants()) do
                        if v.Name == "BULLET_RAYS" then
                            if 100 > (v.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude then
                                v.GunBeam.Texture = "http://www.roblox.com/asset/?id=9150561638"
                                v.GunBeam.Width0 = BulletWidth
                                v.GunBeam.Width1 = BulletWidth
                                v.GunBeam.Color = ColourSequence
                            end
                        end
                    end
                end

                if Script.Main.Speed then
                    if Script.Main.SpeedType == "CFrame" then
                        LocalPlayer.Character.HumanoidRootPart.CFrame =
                            LocalPlayer.Character.HumanoidRootPart.CFrame +
                            LocalPlayer.Character.Humanoid.MoveDirection * Script.Main.SpeedPower
                    elseif Script.Main.SpeedType == "BHop" then
                        LocalPlayer.Character.HumanoidRootPart.CFrame =
                            LocalPlayer.Character.HumanoidRootPart.CFrame +
                            LocalPlayer.Character.Humanoid.MoveDirection * Script.Main.SpeedPower
                        if
                            LocalPlayer.Character.Humanoid.MoveDirection.Magnitude > 0 and
                                LocalPlayer.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall
                         then
                            LocalPlayer.Character.Humanoid.UseJumpPower = false
                            LocalPlayer.Character.Humanoid:ChangeState("Jumping")
                        end
                    end
                end

                if Script.RageBot.Enabled then
                    if game:GetService("Players").LocalPlayer.Character:FindFirstChildWhichIsA("Tool") ~= nil then
                        if
                            game:GetService("Players").LocalPlayer.Character:FindFirstChildWhichIsA("Tool"):FindFirstChild(
                                "Ammo"
                            )
                         then
                            if
                                game:GetService("Players").LocalPlayer.Character:FindFirstChildWhichIsA("Tool"):FindFirstChild(
                                    "Ammo"
                                ).Value <= 0
                             then
                                game:GetService("ReplicatedStorage").MainEvent:FireServer(
                                    "Reload",
                                    game:GetService("Players").LocalPlayer.Character:FindFirstChildWhichIsA("Tool")
                                )
                            end
                        end
                    end

                    for _, q in pairs(game:GetService("Players"):GetPlayers()) do
                        if q ~= LocalPlayer and q and q.Character then
                            local RageBotD =
                                (LocalPlayer.Character.HumanoidRootPart.Position - q.Character.HumanoidRootPart.Position).Magnitude
                            if Script.RageBot.Distance > RageBotD and not CheckWall(q.Character.Head) then
                                if q.Character.BodyEffects["K.O"].Value == false then
                                    getgenv().RBTarget = q

                                    if getgenv().RBTarget ~= nil then
                                        LocalPlayer.Character:FindFirstChildOfClass("Tool"):Activate()
                                    end
                                end
                            end
                        end
                    end
                end

                --[[if getgenv().RBTarget ~= nil and LocalPlayer.Character:FindFirstChildWhichIsA("Tool") ~= nil then  
    if LocalPlayer.Information.Armory[tostring(LocalPlayer.Character:FindFirstChildWhichIsA("Tool"))].Ammo.Normal.Value > 0 and getgenv().RBTarget ~= nil then 
    if getgenv().RBTarget ~= nil then 
    LocalPlayer.Character:FindFirstChildOfClass("Tool"):Activate()
end 
end ]]
                if Script.RageBot.LookAt and getgenv().RBTarget ~= nil then
                    local OldCframe = LocalPlayer.Character.PrimaryPart
                    local NearestRoot = getgenv().RBTarget.Character.HumanoidRootPart
                    local NearestPos =
                        CFrame.new(
                        LocalPlayer.Character.PrimaryPart.Position,
                        Vector3.new(NearestRoot.Position.X, OldCframe.Position.Y, NearestRoot.Position.Z)
                    )
                    LocalPlayer.Character:SetPrimaryPartCFrame(NearestPos)
                    LocalPlayer.Character.Humanoid.AutoRotate = false
                end

                if getgenv().SpinningCursor then
                    LocalPlayer.PlayerGui.MainScreenGui.Aim.Rotation =
                        LocalPlayer.PlayerGui.MainScreenGui.Aim.Rotation + getgenv().SpinPower
                end

                if FFBody then
                    if LocalPlayer.Character then
                        for i, v in pairs(LocalPlayer.Character:GetChildren()) do
                            if v:IsA("BasePart") then
                                v.Material = Enum.Material.ForceField
                                v.Color = FFBodyColour
                            end
                        end
                    end
                end

                if Script.AntiAims.SpinBot and not Script.AntiAims.JitterBot then
                    LocalPlayer.Character.HumanoidRootPart.CFrame =
                        LocalPlayer.Character.HumanoidRootPart.CFrame *
                        CFrame.Angles(0, Script.AntiAims.SpinBotSpeed * 0.01234, 0)
                end

                if Script.AntiAims.JitterBot and not Script.AntiAims.SpinBot then
                    local RandomJit = math.random(30, 90)
                    LocalPlayer.Character.HumanoidRootPart.CFrame =
                        CFrame.new(LocalPlayer.Character.HumanoidRootPart.CFrame.Position) *
                        CFrame.Angles(
                            0,
                            math.rad(180) + math.rad((math.random(1, 2) == 1 and RandomJit or -RandomJit)),
                            0
                        )
                end

                if Script.Desync.Velocity.Desync then
                    local lvle = LocalPlayer.Character.HumanoidRootPart.Velocity
                    local lcf = LocalPlayer.Character.HumanoidRootPart.CFrame

                    LocalPlayer.Character.HumanoidRootPart.CFrame =
                        lcf * CFrame.Angles(0, math.rad(Script.Desync.Velocity.DesyncSpinPower * 10), 0)

                    if not Script.Desync.Velocity.Unhittable then
                        LocalPlayer.Character.HumanoidRootPart.Velocity =
                            Vector3.new(Script.Desync.Velocity.X, Script.Desync.Velocity.Y, Script.Desync.Velocity.Z) *
                            -(2 ^ Script.Desync.Velocity.DesyncPower)
                    else
                        LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(1, 1, 1) * -(2 ^ 16)
                    end

                    RunService.RenderStepped:Wait()

                    getgenv().VisualizerVelocity = LocalPlayer.Character.HumanoidRootPart.Velocity

                    LocalPlayer.Character.HumanoidRootPart.Velocity = lvle
                end

                if getgenv().Locking then
                    if Script.TargetAim.AutoPrediction then
                        local pingvalue = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
                        local split = string.split(pingvalue, "(")
                        local ping = tonumber(split[1])
                        if ping < 130 then
                            Script.TargetAim.Prediction = 0.151
                        elseif ping < 125 then
                            Script.TargetAim.Prediction = 0.149
                        elseif ping < 110 then
                            Script.TargetAim.Prediction = 0.146
                        elseif ping < 105 then
                            Script.TargetAim.Prediction = 0.138
                        elseif ping < 90 then
                            Script.TargetAim.Prediction = 0.136
                        elseif ping < 80 then
                            Script.TargetAim.Prediction = 0.134379
                        elseif ping < 70 then
                            Script.TargetAim.Prediction = 0.129762
                        elseif ping < 60 then
                            Script.TargetAim.Prediction = 0.1248976
                        elseif ping < 50 then
                            Script.TargetAim.Prediction = 0.1245
                        elseif ping < 40 then
                            Script.TargetAim.Prediction = 0.13232
                        end
                    end

                    if Script.Strafe.Enabled then
                        if Script.Strafe.Visual then
                            StrafeVisualss.Position = getgenv().Plr.Character.HumanoidRootPart.Position
                        end
                    end

                    if Script.PartSettings.PartVisible then
                        TargetPart.Color = Script.PartSettings.PartColor
                        TargetPart.CanCollide = false
                        TargetPart.Size = Script.PartSettings.PartSize
                        TargetPart.Transparency = Script.PartSettings.PartTransparency
                        TargetPart.Material = Script.PartSettings.PartMaterial
                        TargetPart.Shape = Script.PartSettings.PartType

                        TargetPart.CFrame = getgenv().Plr.Character.HumanoidRootPart.CFrame

                        if Script.PartSettings.PartRainbow then
                            TargetPart.Color = Color3.fromHSV(tick() % 6 / 6, 1, 1)
                        end
                    end

                    if Script.Tracer.Enabled then
                        local Vector = CC:WorldToViewportPoint(getgenv().Plr.Character.HumanoidRootPart.Position)
                        local LocalPlayerVector =
                            CC:WorldToViewportPoint(LocalPlayer.Character.HumanoidRootPart.Position)
                        local Inset = game:GetService("GuiService"):GetGuiInset().Y

                        if Script.Tracer.Origin == "Mouse" then
                            Tracer.From = Vector2.new(LocalMouse.X, LocalMouse.Y + Inset)
                            Tracer.To = Vector2.new(Vector.X, Vector.Y)
                        elseif Script.Tracer.Origin == "Character" then
                            Tracer.From = Vector2.new(LocalPlayerVector.X, LocalPlayerVector.Y)
                            Tracer.To = Vector2.new(Vector.X, Vector.Y)
                        end
                    end

                    if Script.TargetAim.LookAt then
                        local OldCframe = LocalPlayer.Character.PrimaryPart
                        local NearestRoot = Plr.Character.HumanoidRootPart
                        local NearestPos =
                            CFrame.new(
                            LocalPlayer.Character.PrimaryPart.Position,
                            Vector3.new(NearestRoot.Position.X, OldCframe.Position.Y, NearestRoot.Position.Z)
                        )
                        LocalPlayer.Character:SetPrimaryPartCFrame(NearestPos)
                    end

                    if Script.TargetAim.RandomBodyPart then
                        Script.TargetAim.Part = BodyParts[math.random(0, #BodyParts)]
                    end

                    if Script.SilentAim.RandomBodyPart then
                        Script.SilentAim.Part = BodyParts[math.random(0, #BodyParts)]
                    end
                else
                    -- finopa was here
                    TargetPart.CFrame = CFrame.new(9999, 9999, 9999)
                end

                if Script.Desync.Velocity.Visualize then
                    createvisualizer()
                end
            end
        )

        RunService.heartbeat:Connect(
            function()
                if Script.Main.Speed and Script.Desync.CFrame.Desync then
                    if Script.Main.SpeedType == "CFrame" then
                        LocalPlayer.Character.HumanoidRootPart.CFrame =
                            LocalPlayer.Character.HumanoidRootPart.CFrame +
                            LocalPlayer.Character.Humanoid.MoveDirection * Script.Main.SpeedPower
                    elseif Script.Main.SpeedType == "BHop" then
                        LocalPlayer.Character.HumanoidRootPart.CFrame =
                            LocalPlayer.Character.HumanoidRootPart.CFrame +
                            LocalPlayer.Character.Humanoid.MoveDirection * Script.Main.SpeedPower
                        if
                            LocalPlayer.Character.Humanoid.MoveDirection.Magnitude > 0 and
                                LocalPlayer.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall
                         then
                            LocalPlayer.Character.Humanoid.UseJumpPower = false
                            LocalPlayer.Character.Humanoid:ChangeState("Jumping")
                        end
                    end
                end

                if Script.Desync.CFrame.Desync then
                    getgenv().hrppos = LocalPlayer.Character.HumanoidRootPart.CFrame

                    if Script.Desync.CFrame.RandomMode then
                        local TargetPos = LocalPlayer.Character.HumanoidRootPart.Position
                        LocalPlayer.Character.HumanoidRootPart.CFrame =
                            (CFrame.new(TargetPos) +
                            Vector3.new(
                                math.random(-Script.Desync.CFrame.RandomModePower, Script.Desync.CFrame.RandomModePower),
                                math.random(-Script.Desync.CFrame.RandomModePower, Script.Desync.CFrame.RandomModePower),
                                math.random(-Script.Desync.CFrame.RandomModePower, Script.Desync.CFrame.RandomModePower)
                            )) *
                            CFrame.Angles(
                                math.rad(math.random(-180, 180)),
                                math.rad(math.random(-180, 180)),
                                math.rad(math.random(-180, 180))
                            )
                    end

                    if Script.Strafe.DesyncStrafe and getgenv().Locking then
                        LocalPlayer.Character.HumanoidRootPart.CFrame =
                            getgenv().Plr.Character.HumanoidRootPart.CFrame * CFrame.new(0, -8, 0)
                    end

                    if Script.Desync.CFrame.Manual then
                        local Position = LocalPlayer.Character.HumanoidRootPart.Position
                        LocalPlayer.Character.HumanoidRootPart.CFrame =
                            (CFrame.new(Position) +
                            Vector3.new(Script.Desync.CFrame.X, Script.Desync.CFrame.Y, Script.Desync.CFrame.Z)) *
                            CFrame.Angles(
                                Script.Desync.CFrame.RotationX,
                                Script.Desync.CFrame.RotationY,
                                Script.Desync.CFrame.RotationZ
                            )
                    end

                    if Script.Desync.CFrame.Roll then
                        local Position = LocalPlayer.Character.HumanoidRootPart.Position
                        LocalPlayer.Character.HumanoidRootPart.CFrame =
                            (CFrame.new(Position) - Vector3.new(0, -2, 0)) * CFrame.Angles(0, 0, 5)
                    end

                    game:GetService("RunService").RenderStepped:Wait()

                    LocalPlayer.Character.HumanoidRootPart.CFrame = getgenv().hrppos

                    getgenv().hrppos = LocalPlayer.Character.HumanoidRootPart.CFrame
                end
            end
        )
    end
)()

LPH_JIT_ULTRA(
    function()
        local oldIndex
        oldIndex =
            hookmetamethod(
            game,
            "__index",
            newcclosure(
                function(self, key)
                    if not checkcaller() then
                        if
                            key == "CFrame" and Script.Desync.CFrame.Desync and LocalPlayer.Character and
                                LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and
                                LocalPlayer.Character:FindFirstChild("Humanoid") and
                                LocalPlayer.Character:FindFirstChild("Humanoid").Health > 0
                         then
                            if self == LocalPlayer.Character.HumanoidRootPart then
                                return getgenv().hrppos
                            end
                        end
                    end
                    return oldIndex(self, key)
                end
            )
        )

        local rawmetatable = getrawmetatable(game)
        local old = rawmetatable.__namecall
        setreadonly(rawmetatable, false)
        rawmetatable.__namecall =
            newcclosure(
            function(...)
                local args = {...}
                if
                    getgenv().Locking and getnamecallmethod() == "FireServer" and args[2] == "UpdateMousePos" and
                        getgenv().Plr ~= nil and
                        not Script.RageBot.Enabled
                 then
                    if Script.TargetAim.Resolver == false then
                        args[3] =
                            getgenv().Plr.Character[Script.TargetAim.Part].Position +
                            (getgenv().Plr.Character[Script.TargetAim.Part].Velocity * Script.TargetAim.Prediction)
                    else
                        args[3] =
                            getgenv().Plr.Character[Script.TargetAim.Part].Position +
                            (getgenv().Plr.Character.Humanoid.MoveDirection * 3)
                    end
                    return old(unpack(args))
                end
                return old(...)
            end
        )

        local rawmetatable = getrawmetatable(game)
        local old = rawmetatable.__namecall
        setreadonly(rawmetatable, false)
        rawmetatable.__namecall =
            newcclosure(
            function(...)
                local args = {...}
                if
                    Script.RageBot.Enabled and getnamecallmethod() == "FireServer" and args[2] == "UpdateMousePos" and
                        getgenv().RBTarget ~= nil
                 then
                    if Script.RageBot.Resolver == false then
                        args[3] =
                            getgenv().RBTarget.Character[Script.TargetAim.Part].Position +
                            (getgenv().RBTarget.Character[Script.TargetAim.Part].Velocity * Script.TargetAim.Prediction)
                    else
                        args[3] =
                            getgenv().RBTarget.Character[Script.TargetAim.Part].Position +
                            (getgenv().RBTarget.Character.Humanoid.MoveDirection * 3)
                    end
                    return old(unpack(args))
                end
                return old(...)
            end
        )
    end
)()
--game:GetService("CoreGui").Watermark.Enabled = false
   end,
})

local Button = MainTab:CreateButton({
   Name = "üßäLunar.vipüßä",
   Callback = function()
   --[[
		

‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïó
‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ï¶‚ïù‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë‚ñë‚ïö‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ï¶‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë
‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù

// Fixed by @finobe 28/05/24 :^) \\ 


Enjoy skidding this terrific code from april btw

fixed target aim blah blah
]]


if not LPH_OBFUSCATED then
    getfenv().LPH_NO_VIRTUALIZE = function(...) return (...) end;
end

local font = Enum.Font.Ubuntu;
local Library = {};
local Library = {
	Open = true;
	Folders = {
		main = "test";
		configs = "test/Configs";
	};
	Accent = Color3.fromRGB(132,108,188);
	Pages = {};
	Sections = {};
	Flags = {};
	UnNamedFlags = 0;
	ThemeObjects = {};
	Instances = {};
	Holder = nil;
	PageHolder = nil;
	Gradient = nil;
	UIGradient = nil;
	CopiedColor = Color3.new(1,1,1);
	CopiedAlpha = 0;
	AllowedCharacters = {
		[1] = ' ',
		[2] = '!',
		[3] = '"',
		[4] = '#',
		[5] = '$',
		[6] = '%',
		[7] = '&',
		[8] = "'",
		[9] = '(',
		[10] = ')',
		[11] = '*',
		[12] = '+',
		[13] = ',',
		[14] = '-',
		[15] = '.',
		[16] = '/',
		[17] = '0',
		[18] = '1',
		[19] = '2',
		[20] = '3',
		[21] = '4',
		[22] = '5',
		[23] = '6',
		[24] = '7',
		[25] = '8',
		[26] = '9',
		[27] = ':',
		[28] = ';',
		[29] = '<',
		[30] = '=',
		[31] = '>',
		[32] = '?',
		[33] = '@',
		[34] = 'A',
		[35] = 'B',
		[36] = 'C',
		[37] = 'D',
		[38] = 'E',
		[39] = 'F',
		[40] = 'G',
		[41] = 'H',
		[42] = 'I',
		[43] = 'J',
		[44] = 'K',
		[45] = 'L',
		[46] = 'M',
		[47] = 'N',
		[48] = 'O',
		[49] = 'P',
		[50] = 'Q',
		[51] = 'R',
		[52] = 'S',
		[53] = 'T',
		[54] = 'U',
		[55] = 'V',
		[56] = 'W',
		[57] = 'X',
		[58] = 'Y',
		[59] = 'Z',
		[60] = '[',
		[61] = "\\",
		[62] = ']',
		[63] = '^',
		[64] = '_',
		[65] = '`',
		[66] = 'a',
		[67] = 'b',
		[68] = 'c',
		[69] = 'd',
		[70] = 'e',
		[71] = 'f',
		[72] = 'g',
		[73] = 'h',
		[74] = 'i',
		[75] = 'j',
		[76] = 'k',
		[77] = 'l',
		[78] = 'm',
		[79] = 'n',
		[80] = 'o',
		[81] = 'p',
		[82] = 'q',
		[83] = 'r',
		[84] = 's',
		[85] = 't',
		[86] = 'u',
		[87] = 'v',
		[88] = 'w',
		[89] = 'x',
		[90] = 'y',
		[91] = 'z',
		[92] = '{',
		[93] = '|',
		[94] = '}',
		[95] = '~'
	};
	ShiftCharacters = {
		["1"] = "!",
		["2"] = "@",
		["3"] = "#",
		["4"] = "$",
		["5"] = "%",
		["6"] = "^",
		["7"] = "&",
		["8"] = "*",
		["9"] = "(",
		["0"] = ")",
		["-"] = "_",
		["="] = "+",
		["["] = "{",
		["\\"] = "|",
		[";"] = ":",
		["'"] = "\"",
		[","] = "<",
		["."] = ">",
		["/"] = "?",
		["`"] = "~"
	};
	Keys = {
		[Enum.KeyCode.LeftShift] = "LShift",
		[Enum.KeyCode.RightShift] = "RShift",
		[Enum.KeyCode.LeftControl] = "LCtrl",
		[Enum.KeyCode.RightControl] = "RCtrl",
		[Enum.KeyCode.LeftAlt] = "LAlt",
		[Enum.KeyCode.RightAlt] = "RAlt",
		[Enum.KeyCode.CapsLock] = "Caps",
		[Enum.KeyCode.One] = "1",
		[Enum.KeyCode.Two] = "2",
		[Enum.KeyCode.Three] = "3",
		[Enum.KeyCode.Four] = "4",
		[Enum.KeyCode.Five] = "5",
		[Enum.KeyCode.Six] = "6",
		[Enum.KeyCode.Seven] = "7",
		[Enum.KeyCode.Eight] = "8",
		[Enum.KeyCode.Nine] = "9",
		[Enum.KeyCode.Zero] = "0",
		[Enum.KeyCode.KeypadOne] = "Num1",
		[Enum.KeyCode.KeypadTwo] = "Num2",
		[Enum.KeyCode.KeypadThree] = "Num3",
		[Enum.KeyCode.KeypadFour] = "Num4",
		[Enum.KeyCode.KeypadFive] = "Num5",
		[Enum.KeyCode.KeypadSix] = "Num6",
		[Enum.KeyCode.KeypadSeven] = "Num7",
		[Enum.KeyCode.KeypadEight] = "Num8",
		[Enum.KeyCode.KeypadNine] = "Num9",
		[Enum.KeyCode.KeypadZero] = "Num0",
		[Enum.KeyCode.Minus] = "-",
		[Enum.KeyCode.Equals] = "=",
		[Enum.KeyCode.Tilde] = "~",
		[Enum.KeyCode.LeftBracket] = "[",
		[Enum.KeyCode.RightBracket] = "]",
		[Enum.KeyCode.RightParenthesis] = ")",
		[Enum.KeyCode.LeftParenthesis] = "(",
		[Enum.KeyCode.Semicolon] = ",",
		[Enum.KeyCode.Quote] = "'",
		[Enum.KeyCode.BackSlash] = "\\",
		[Enum.KeyCode.Comma] = ",",
		[Enum.KeyCode.Period] = ".",
		[Enum.KeyCode.Slash] = "/",
		[Enum.KeyCode.Asterisk] = "*",
		[Enum.KeyCode.Plus] = "+",
		[Enum.KeyCode.Period] = ".",
		[Enum.KeyCode.Backquote] = "`",
		[Enum.UserInputType.MouseButton1] = "MB1",
		[Enum.UserInputType.MouseButton2] = "MB2",
		[Enum.UserInputType.MouseButton3] = "MB3"
	};
	Connections = {};
	Font = Enum.Font.Ubuntu;
	FontSize = 9;
	Notifs = {};
	KeyList = nil;
	UIKey = Enum.KeyCode.End;
	ScreenGUI = nil;
}

local InputService = game:GetService("UserInputService");
local TeleportService = game:GetService("TeleportService");
local RunService = game:GetService("RunService");
local Workspace = game:GetService("Workspace");
local Lighting = game:GetService("Lighting");
local Players = game:GetService("Players");
local HttpService = game:GetService("HttpService");
local StarterGui = game:GetService("StarterGui");
local ReplicatedStorage = game:GetService("ReplicatedStorage");
local TweenService = game:GetService("TweenService");
local VirtualUser = game:GetService("VirtualUser");
local PathFindingService = game:GetService("PathfindingService");

local utility = {
	Circle = nil, 
	bodyParts = {}, 
	target = nil, 
	angle = 0, 
	drawings = {}, 
	folders = {}
};
local framework = {connections = {}};
local Flags = {}; 
local flags = Library.Flags;
local ESP = {};
local IgnoreList = {};
local HitReg = {};
local loadingTime = tick() 
local Visuals = {   
    ["Drawings"] = {},
	["Bases"] = {},
	["Base"] = {},
	["Settings"] = { 
		["Line"] = {
		    Thickness = 1,
		    Color = Color3.fromRGB(0, 255, 0)
	    },
		["Text"] = {
			Size = 13,
			Center = true,
			Outline = true,
			Font = Drawing.Fonts.Plex,
			Color = Color3.fromRGB(255, 255, 255)
		},
		["Square"] = {
			Thickness = 1,
			Color = Color3.fromRGB(255, 255, 255),
			Filled = false,
		},
		["Triangle"] = {
			Color = Color3.fromRGB(255, 255, 255),
			Filled = true,
			Visible = false,
			Thickness = 1,
		},
		["Image"] = {
			Transparency = 1,
			Data = game:HttpGet("https://raw.githubusercontent.com/portallol/luna/main/Gradient.png")
		}
	},
}
local Sparkles = game:GetObjects("rbxassetid://16883621036")[1]; Sparkles.Parent = ReplicatedStorage;
local SparklesEffect = Sparkles.LevelParticle;
local sfx = {["Bameware"] = "16910460773",["Skeet"] = "4753603610",["Bonk"] = "3765689841",["Lazer Beam"] = "130791043",["Windows XP Error"] = "160715357",["TF2 Hitsound"] = "3455144981",["TF2 Critical"] = "296102734",["TF2 Bat"] = "3333907347",['Bow Hit'] = "1053296915",['Bow'] = "3442683707",['OSU'] = "7147454322",['Minecraft Hit'] = "4018616850",['Steve'] = "5869422451",['1nn'] = "7349055654",['Rust'] = "3744371091",["TF2 Pan"] = "3431749479",["Neverlose"] = "8679627751",["Mario"] = "5709456554",};
local sfx_names = {"Bameware", "Skeet", "Bonk", "Lazer Beam", "Windows XP Error", "TF2 Hitsound", "TF2 Critical", "TF2 Bat", "Bow Hit", "Bow", "OSU", "Minecraft Hit", "Steve", "1nn", "Rust", "TF2 Pan", "Neverlose", "Mario"};
local LocalPlayer = Players.LocalPlayer; 
local Mouse = LocalPlayer:GetMouse();
local Camera = Workspace.Camera;
local viewportSize = game.Workspace.Camera.ViewportSize;
local hitmodule = game:GetObjects("rbxassetid://7255773215")[1]; hitmodule.Parent = ReplicatedStorage;
local Offset = game:GetService("GuiService"):GetGuiInset().Y;
local Math = loadstring(game:HttpGet("https://pastebin.com/raw/xhT2X3cH"))(); 
local NotifiactionSGui = Instance.new("ScreenGui", game.CoreGui); NotifiactionSGui.Enabled = true
local Remote = ReplicatedStorage.MainEvent
local NewVector2 = Vector2.new;
local NewVector3 = Vector3.new;
local NewCFrame = CFrame.new; 
local Angle = CFrame.Angles; 
local NewHex = Color3.fromHex;
local Floor = math.floor;
local Random = math.random; 
local Find = table.find;
local Round = math.round;
local Cos = math.cos;
local Sin = math.sin;
local Rad = math.rad; 
local Clamp = math.clamp; 
local Ceil = math.ceil; 
local Pi = math.pi;
local Sqrt = math.sqrt;
local Lighting_Save = {["ColorShift_Bottom"] = Lighting.ColorShift_Bottom, ["Ambient"]=Lighting.Ambient, ["OutdoorAmbient"]=Lighting.OutdoorAmbient, ["ColorShift_Top"]=Lighting.ColorShift_Top, ["FogColor"]=Lighting.FogColor, ["FogEnd"]=Lighting.FogEnd, ["FogStart"]=Lighting.FogStart, ["ClockTime"]=Lighting.ClockTime, ["Brightness"]=Lighting.Brightness}
local bodyClone = game:GetObjects("rbxassetid://8246626421")[1]; bodyClone.Humanoid:Destroy(); bodyClone.Head.Face:Destroy(); bodyClone.Parent = game.Workspace; bodyClone.HumanoidRootPart.Velocity = Vector3.new(); bodyClone.HumanoidRootPart.CFrame = NewCFrame(9999,9999,9999); bodyClone.HumanoidRootPart.Transparency = 1; bodyClone.HumanoidRootPart.CanCollide = false 
local visualizeChams = Instance.new("Highlight"); visualizeChams.Enabled = true; visualizeChams.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop; visualizeChams.FillColor = Color3.fromRGB(102, 60, 153); visualizeChams.OutlineColor =  Color3.fromRGB(0, 0, 0); visualizeChams.Adornee = bodyClone; visualizeChams.OutlineTransparency = 0.2; visualizeChams.FillTransparency = 0.5; visualizeChams.Parent = game.CoreGui
local targetHighlight = Instance.new("Highlight", game.CoreGui); targetHighlight.Enabled = true; targetHighlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop; targetHighlight.FillColor = Color3.fromRGB(0,0,0); targetHighlight.OutlineColor = Color3.fromRGB(255,255,255); targetHighlight.OutlineTransparency = 0.5; targetHighlight.FillTransparency = 0;
local IgnoreList = {};
local Tween = {};
local crosshair_Lines = {}; 
local crosshair_Outlines = {}; 
local C_Desync = {Enabled = false, OldPosition = nil, PredictedPosition = nil};
local connections = {};
local highlights = {};
local Dropdowns = {}; 
local Pickers = {}; 
local VisValues = {}; 
local Typing = false; 
local aimAssistTarget; 
local checks; 
local prediction; 
local partClosest; 
local antiCheattick = 0; 
local CursorSize = 0; 
local statsTick = 0;
local crosshair_LineAmount = 4;
local crosshair_SpinAngle = 0; 
local crosshair_tick = 0;
local buying = false; 
local PlaceHolderUI = Instance.new("ScreenGui", game.CoreGui);
PlaceHolderUI.Enabled = false
local Path = 
	"https://raw.githubusercontent.com/fortniteisveryepic/assets/main/"
local images = {
	["[AK47]"] = game:HttpGet(Path.. "ak.png"),
	["[AR]"] = game:HttpGet(Path.. "ar.png"),
	["[AUG]"] = game:HttpGet(Path.. "aug.png"),
	["[Double-Barrel SG]"] = game:HttpGet(Path.. "db.png"),
	["[DrumGun]"] = game:HttpGet(Path.. "drumgun.png"),
	["[Flamethrower]"] = game:HttpGet(Path.. "flame.png"),
	["[Glock]"] = game:HttpGet(Path.. "glock.png"),
	["[LMG]"] = game:HttpGet(Path.. "lmg.png"),
	["[P90]"]= game:HttpGet(Path.. "p90.png"),
	["[Revolver]"] = game:HttpGet(Path.. "rev.png"),
	["[SMG]"] = game:HttpGet(Path.. "smg.png"),
	["[Shotgun]"] = game:HttpGet(Path.. "shotgun.png"),
	["[SilencerAR]"] = game:HttpGet(Path.. "ar.png"),
	["[TacticalShotgun]"] = game:HttpGet(Path.. "tac.png"),
	["[Knife]"] = game:HttpGet(Path.. "knife.png"),
	["[Rifle]"] = game:HttpGet(Path.. "rifle.png")
} 
local Languages = {
    A = {English = "A", Arabic = "ÿ£", Albanian = "A", Japanese = "„ÅÇ", Spanish = "A", Russian = "–ê", Chinese = "Èòø", Urdu = "ÿß", French = "A", Portuguese = "A", Hindi = "‡§Ö"},
    B = {English = "B", Arabic = "ÿ®", Albanian = "B", Japanese = "„ÅÑ", Spanish = "B", Russian = "–ë", Chinese = "Ê≥¢", Urdu = "ÿ®", French = "B", Portuguese = "B", Hindi = "‡§¨"},
    C = {English = "C", Arabic = "ÿ™", Albanian = "C", Japanese = "„ÅÜ", Spanish = "C", Russian = "–¶", Chinese = "Ë•ø", Urdu = "ÿ≥", French = "C", Portuguese = "C", Hindi = "‡§∏"},
    D = {English = "D", Arabic = "ÿØ", Albanian = "D", Japanese = "„Åà", Spanish = "D", Russian = "–î", Chinese = "Âæ∑", Urdu = "⁄à", French = "D", Portuguese = "D", Hindi = "‡§°"},
    E = {English = "E", Arabic = "ÿ•", Albanian = "E", Japanese = "„Åä", Spanish = "E", Russian = "–ï", Chinese = "‰øÑ", Urdu = "ÿß€í", French = "E", Portuguese = "E", Hindi = "‡§è"},
    F = {English = "F", Arabic = "ŸÅ", Albanian = "F", Japanese = "„Åã", Spanish = "F", Russian = "–§", Chinese = "Â§´", Urdu = "ŸÅ", French = "F", Portuguese = "F", Hindi = "‡§´"},
    G = {English = "G", Arabic = "ÿ¨", Albanian = "G", Japanese = "„Åç", Spanish = "G", Russian = "–ì", Chinese = "Âêâ", Urdu = "ÿ¨", French = "G", Portuguese = "G", Hindi = "‡§ó"},
    H = {English = "H", Arabic = "ÿ≠", Albanian = "H", Japanese = "„Åè", Spanish = "H", Russian = "–•", Chinese = "ËâæÂ∞∫", Urdu = "ÿ≠", French = "H", Portuguese = "H", Hindi = "‡§π"},
    I = {English = "I", Arabic = "Ÿä", Albanian = "I", Japanese = "„Åë", Spanish = "I", Russian = "–ò", Chinese = "‰ºä", Urdu = "ÿ¢ÿ¶€å", French = "I", Portuguese = "I", Hindi = "‡§á"},
    J = {English = "J", Arabic = "ÿ¨", Albanian = "J", Japanese = "„Åì", Spanish = "J", Russian = "–ô", Chinese = "Êù∞", Urdu = "ÿ¨€í", French = "J", Portuguese = "J", Hindi = "‡§ú"},
    K = {English = "K", Arabic = "ŸÉ", Albanian = "K", Japanese = "„Åï", Spanish = "K", Russian = "–ö", Chinese = "ÂºÄ", Urdu = "⁄©€í", French = "K", Portuguese = "K", Hindi = "‡§ï"},
    L = {English = "L", Arabic = "ŸÑ", Albanian = "L", Japanese = "„Åó", Spanish = "L", Russian = "–õ", Chinese = "ËâæÂãí", Urdu = "ŸÑ", French = "L", Portuguese = "L", Hindi = "‡§≤"},
    M = {English = "M", Arabic = "ŸÖ", Albanian = "M", Japanese = "„Åô", Spanish = "M", Russian = "–ú", Chinese = "ËâæÈ©¨", Urdu = "ŸÖ", French = "M", Portuguese = "M", Hindi = "‡§Æ"},
    N = {English = "N", Arabic = "ŸÜ", Albanian = "N", Japanese = "„Åõ", Spanish = "N", Russian = "–ù", Chinese = "ËâæÂ®ú", Urdu = "ŸÜ", French = "N", Portuguese = "N", Hindi = "‡§®"},
    O = {English = "O", Arabic = "ÿ£Ÿà", Albanian = "O", Japanese = "„Åù", Spanish = "O", Russian = "–û", Chinese = "Âì¶", Urdu = "ÿßŸà", French = "O", Portuguese = "O", Hindi = "‡§ì"},
    P = {English = "P", Arabic = "ÿ®", Albanian = "P", Japanese = "„Åü", Spanish = "P", Russian = "–ü", Chinese = "Â±Å", Urdu = "Ÿæ", French = "P", Portuguese = "P", Hindi = "‡§™"},
    Q = {English = "Q", Arabic = "ŸÇ", Albanian = "Q", Japanese = "„Å°", Spanish = "Q", Russian = "–ö", Chinese = "‰∏ò", Urdu = "ŸÇ", French = "Q", Portuguese = "Q", Hindi = "‡§ï‡•ç‡§Ø‡•Ç"},
    R = {English = "R", Arabic = "ÿ±", Albanian = "R", Japanese = "„Å§", Spanish = "R", Russian = "–†", Chinese = "ËâæÂÑø", Urdu = "ÿ±", French = "R", Portuguese = "R", Hindi = "‡§∞"},
    S = {English = "S", Arabic = "ÿ≥", Albanian = "S", Japanese = "„Å¶", Spanish = "S", Russian = "–°", Chinese = "Ëâæ‰∏ù", Urdu = "ÿ≥", French = "S", Portuguese = "S", Hindi = "‡§è‡§∏"},
    T = {English = "T", Arabic = "ÿ™", Albanian = "T", Japanese = "„Å®", Spanish = "T", Russian = "–¢", Chinese = "Êèê", Urdu = "Ÿπ", French = "T", Portuguese = "T", Hindi = "‡§ü"},
    U = {English = "U", Arabic = "ÿ£Ÿà", Albanian = "U", Japanese = "„Å™", Spanish = "U", Russian = "–£", Chinese = "‰ºò", Urdu = "€åŸà", French = "U", Portuguese = "U", Hindi = "‡§Ø‡•Ç"},
    V = {English = "V", Arabic = "ŸÅ", Albanian = "V", Japanese = "„Å´", Spanish = "V", Russian = "–í", Chinese = "Áª¥", Urdu = "Ÿà€å", French = "V", Portuguese = "V", Hindi = "‡§µ"},
    W = {English = "W", Arabic = "Ÿà", Albanian = "W", Japanese = "„Å¨", Spanish = "W", Russian = "–í", Chinese = "Ë±ÜË¥ùÂ∞îÁª¥", Urdu = "⁄àÿ®ŸÑ€åŸà", French = "W", Portuguese = "W", Hindi = "‡§°‡§¨‡•ç‡§≤‡•ç‡§Ø‡•Ç"},
    X = {English = "X", Arabic = "ÿ•ŸÉÿ≥", Albanian = "X", Japanese = "„Å≠", Spanish = "X", Russian = "–•", Chinese = "ËâæÂÖãÊñØ", Urdu = "ÿß⁄©ÿ≥", French = "X", Portuguese = "X", Hindi = "‡§è‡§ï‡•ç‡§∏"},
    Y = {English = "Y", Arabic = "Ÿä", Albanian = "Y", Japanese = "„ÅÆ", Spanish = "Y", Russian = "–£", Chinese = "‰ºäÂÑø", Urdu = "Ÿàÿßÿ¶€å", French = "Y", Portuguese = "Y", Hindi = "‡§µ‡§æ‡§à"},
    Z = {English = "Z", Arabic = "ÿ≤", Albanian = "Z", Japanese = "„ÅØ", Spanish = "Z", Russian = "–ó", Chinese = "Ë¥ºÂæ∑", Urdu = "ÿ≤€å⁄à", French = "Z", Portuguese = "Z", Hindi = "‡§ú‡•á‡§°"}
}
local utx = {} 
local Messages = {}
local drawingCache = {} 

utility.folders["Part Chams"] = Instance.new("Folder", Workspace);
utility.folders["Hit Chams"] = Instance.new("Folder", Workspace);
Library.__index = Library;
Library.Pages.__index = Library.Pages;
Library.Sections.__index = Library.Sections;

-- // Functions
do 
	-- // Library Functions
	do
		function Library:Connection(Signal, Callback)
			local Con = Signal:Connect(Callback)
			return Con
		end
		--  
		function Library:updateNotifsPositions(position)
			for i, v in pairs(Library.Notifs) do 
				local Position = position == "Middle" and NewVector2(viewportSize.X/2 - (v["Objects"][3].TextBounds.X + 4)/2,600) or NewVector2(20, 20)
				game:GetService("TweenService"):Create(v.Container, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = UDim2.new(0,Position.X,0,Position.Y + (i * 25))}):Play()
			end 
		end
		-- 
		function Library:Notification(message, duration, color, position)
			local notification = {Container = nil, Objects = {}}
			-- 
			local NotifContainer = Instance.new('Frame', NotifiactionSGui)
			local Background = Instance.new('Frame', NotifContainer)
			local Outline = Instance.new('Frame', Background)
			local UIStroke = Instance.new('UIStroke', Outline)
			local TextLabel = Instance.new('TextLabel', Background)
			local Accemt = Instance.new('Frame', Background)
			local Progress = Instance.new('Frame', Background)
			--
			local Position = position == "Middle" and NewVector2(viewportSize.X/2 - (TextLabel.TextBounds.X + 4)/2, 600) or NewVector2(20, 20)
			--
			NotifContainer.Name = "NotifContainer"
			NotifContainer.Position = UDim2.new(0,Position.X, 0, Position.Y)
			NotifContainer.Size = UDim2.new(0,TextLabel.TextBounds.X + 4,0,20)
			NotifContainer.BackgroundColor3 = Color3.new(1,1,1)
			NotifContainer.BackgroundTransparency = 1
			NotifContainer.BorderSizePixel = 0
			NotifContainer.BorderColor3 = Color3.new(0,0,0)
			NotifContainer.ZIndex = 99999999
			notification.Container = NotifContainer
			--
			Background.Name = "Background"
			Background.Size = UDim2.new(1,0,1,0)
			Background.BackgroundColor3 = Color3.new(0.0588,0.0588,0.0784)
			Background.BorderColor3 = Color3.new(0.1373,0.1373,0.1569)
			table.insert(notification.Objects, Background)
			--
			Outline.Name = "Outline"
			Outline.Position = UDim2.new(0,-1,0,-1)
			Outline.Size = UDim2.new(1,2,1,2)
			Outline.BackgroundColor3 = Color3.new(1,1,1)
			Outline.BackgroundTransparency = 1
			Outline.BorderSizePixel = 0
			Outline.BorderColor3 = Color3.new(0,0,0)
			table.insert(notification.Objects, Outline)
			--
			TextLabel.Name = "TextLabel"
			TextLabel.Position = UDim2.new(0,1,0,0)
			TextLabel.Size = UDim2.new(1,0,1,0)
			TextLabel.BackgroundColor3 = Color3.new(1,1,1)
			TextLabel.BackgroundTransparency = 1
			TextLabel.BorderSizePixel = 0
			TextLabel.BorderColor3 = Color3.new(0,0,0)
			TextLabel.Text = message
			TextLabel.TextColor3 = Color3.new(0.9216,0.9216,0.9216)
			TextLabel.FontFace = Font.new("rbxassetid://12187371840")
			TextLabel.TextSize = Library.FontSize
			TextLabel.AutomaticSize = Enum.AutomaticSize.X
			TextLabel.TextXAlignment = Enum.TextXAlignment.Left
			table.insert(notification.Objects, TextLabel)
			--
			Accemt.Name = "Accemt"
			Accemt.Size = UDim2.new(1,0,0,1)
			Accemt.BackgroundColor3 = Library.Accent
			Accemt.BorderSizePixel = 0
			Accemt.BorderColor3 = Color3.new(0,0,0)
			table.insert(notification.Objects, Accemt)
			--
			Progress.Name = "Progress"
			Progress.Position = UDim2.new(0,0,1,-1)
			Progress.Size = UDim2.new(0,0,0,1)
			Progress.BackgroundColor3 = Color3.new(1,0,0)
			Progress.BorderSizePixel = 0
			Progress.BorderColor3 = Color3.new(0,0,0)
			table.insert(notification.Objects, Progress)
		
			if color ~= nil then
				Progress.BackgroundColor3 = color
				Accemt.BackgroundColor3 = color
			end
		
			function notification:remove()
				table.remove(Library.Notifs, table.find(Library.Notifs, notification))
				Library:updateNotifsPositions(position)
				notification.Container:Destroy()
			end
		
			task.spawn(function()
				Background.AnchorPoint = NewVector2(1,0)
				local Tween1 = game:GetService("TweenService"):Create(Background, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {AnchorPoint = NewVector2(0,0)}):Play()
				local Tween2 = game:GetService("TweenService"):Create(Progress, TweenInfo.new(duration or 5, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {Size = UDim2.new(1,0,0,1)}):Play()
				game:GetService("TweenService"):Create(Progress, TweenInfo.new(duration or 5, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.new(0,1,0)}):Play()
				task.wait(duration)
				game:GetService("TweenService"):Create(Background, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {AnchorPoint = NewVector2(1,0)}):Play()
				for i,v in next, notification.Objects do
					game:GetService("TweenService"):Create(v, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1}):Play()
				end
				game:GetService("TweenService"):Create(TextLabel, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextTransparency = 1}):Play()
				game:GetService("TweenService"):Create(UIStroke, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 1}):Play()
			end)
		
			task.delay(0.25 + duration + 0.25, function()
				notification:remove()
			end)
		
			table.insert(Library.Notifs, notification)
			NotifContainer.Position = UDim2.new(0,Position.X,0,Position.Y + (table.find(Library.Notifs, notification) * 25))
			NotifContainer.Size = UDim2.new(0,TextLabel.TextBounds.X + 4,0,18)
			Library:updateNotifsPositions(position)

			return notification
		end
		--
		function Library:Disconnect(Connection)
			Connection:Disconnect()
		end
		--
		function Library:Round(Number, Float)
			return Float * math.floor(Number / Float)
		end
		--
		function Library.NextFlag()
			Library.UnNamedFlags = Library.UnNamedFlags + 1
			return string.format("%.14g", Library.UnNamedFlags)
		end
		--
		function Library:GetConfig()
			local Config = ""
			for Index, Value in pairs(self.Flags) do
				if
					Index ~= "ConfigConfig_List"
					and Index ~= "ConfigConfig_Load"
					and Index ~= "ConfigConfig_Save"
				then
					local Value2 = Value
					local Final = ""
					--
					if typeof(Value2) == "Color3" then
						local hue, sat, val = Value2:ToHSV()
						--
						Final = ("rgb(%s,%s,%s,%s)"):format(hue, sat, val, 1)
					elseif typeof(Value2) == "table" and Value2.Color and Value2.Transparency then
						local hue, sat, val = Value2.Color:ToHSV()
						--
						Final = ("rgb(%s,%s,%s,%s)"):format(hue, sat, val, Value2.Transparency)
					elseif typeof(Value2) == "table" and Value.Mode then
						local Values = Value.current
						--
						Final = ("key(%s,%s,%s)"):format(Values[1] or "nil", Values[2] or "nil", Value.Mode)
					elseif Value2 ~= nil then
						if typeof(Value2) == "boolean" then
							Value2 = ("bool(%s)"):format(tostring(Value2))
						elseif typeof(Value2) == "table" then
							local New = "table("
							--
							for Index2, Value3 in pairs(Value2) do
								New = New .. Value3 .. ","
							end
							--
							if New:sub(#New) == "," then
								New = New:sub(0, #New - 1)
							end
							--
							Value2 = New .. ")"
						elseif typeof(Value2) == "string" then
							Value2 = ("string(%s)"):format(Value2)
						elseif typeof(Value2) == "number" then
							Value2 = ("number(%s)"):format(Value2)
						end
						--
						Final = Value2
					end
					--
					Config = Config .. Index .. ": " .. tostring(Final) .. "\n"
				end
			end
			--
			return Config
		end
		--
		function Library:LoadConfig(Config)
			for i = 1, 10 do 
				local Table = string.split(Config, "\n")
				local Table2 = {}
				for Index, Value in pairs(Table) do
					local Table3 = string.split(Value, ":")
					--
					if Table3[1] ~= "ConfigConfig_List" and #Table3 >= 2 then
						local Value = Table3[2]:sub(2, #Table3[2])
						--
						if Value:sub(1, 3) == "rgb" then
							local Table4 = string.split(Value:sub(5, #Value - 1), ",")
							--
							Value = Table4
						elseif Value:sub(1, 3) == "key" then
							local Table4 = string.split(Value:sub(5, #Value - 1), ",")
							--
							if Table4[1] == "nil" and Table4[2] == "nil" then
								Table4[1] = nil
								Table4[2] = nil
							end
							--
							Value = Table4
						elseif Value:sub(1, 4) == "bool" then
							local Bool = Value:sub(6, #Value - 1)
							--
							Value = Bool == "true"
						elseif Value:sub(1, 5) == "table" then
							local Table4 = string.split(Value:sub(7, #Value - 1), ",")
							--
							Value = Table4
						elseif Value:sub(1, 6) == "string" then
							local String = Value:sub(8, #Value - 1)
							--
							Value = String
						elseif Value:sub(1, 6) == "number" then
							local Number = tonumber(Value:sub(8, #Value - 1))
							--
							Value = Number
						end
						--
						Table2[Table3[1]] = Value
					end
				end 
				--
				for i, v in pairs(Table2) do
					if Flags[i] then
						if typeof(Flags[i]) == "table" then
							Flags[i]:Set(v)
						else
							Flags[i](v)
						end
					end
				end
			end
		end
		--
		function Library:SetOpen(bool)
			if typeof(bool) == 'boolean' then
				Library.Open = bool;
				Library.Holder.Visible = bool;
			end
		end;
		--
		function Library:ChangeAccent(Color)
			Library.Accent = Color

			for obj, theme in next, Library.ThemeObjects do
				if theme:IsA("Frame") or theme:IsA("TextButton") then
					theme.BackgroundColor3 = Color
				elseif theme:IsA("TextLabel") then
					theme.TextColor3 = Color
				elseif theme:IsA("TextButton") and theme.BackgroundTransparency == 1 then
					theme.TextColor3 = Color
				end
			end
		end
		--
		function Library:IsMouseOverFrame(Frame)
			local AbsPos, AbsSize = Frame.AbsolutePosition, Frame.AbsoluteSize;

			if Mouse.X >= AbsPos.X and Mouse.X <= AbsPos.X + AbsSize.X
				and Mouse.Y >= AbsPos.Y and Mouse.Y <= AbsPos.Y + AbsSize.Y then

				return true;
			end;
		end;
		-- 
		function Library:KeybindList()
			local KeyList = {Keybinds = {}};
			Library.KeyList = KeyList
			--
			local KeyOutline = Instance.new('Frame', PlaceHolderUI)
			local KeyInline = Instance.new('Frame', KeyOutline)
			local KeyAccent = Instance.new('Frame', KeyInline)
			local KeyHolder = Instance.new('Frame', KeyInline)
			local UIListLayout = Instance.new('UIListLayout', KeyHolder)
			local KeyTitle = Instance.new('TextLabel', KeyInline)
			local LineThing = Instance.new('Frame', KeyInline)
			--
			KeyOutline.Name = "KeyOutline"
			KeyOutline.Position = UDim2.new(0.01,0,0.5,0)
			KeyOutline.BackgroundColor3 = Color3.new(0.1765,0.1765,0.1765)
			KeyOutline.BorderColor3 = Color3.new(0.0392,0.0392,0.0392)
			KeyOutline.AnchorPoint = NewVector2(0.009999999776482582,0.5)
			KeyOutline.AutomaticSize = Enum.AutomaticSize.XY
			--
			KeyInline.Name = "KeyInline"
			KeyInline.Position = UDim2.new(0,1,0,1)
			KeyInline.Size = UDim2.new(0,-2,0,-2)
			KeyInline.BackgroundColor3 = Color3.new(0.0745,0.0745,0.0745)
			KeyInline.BorderSizePixel = 0
			KeyInline.BorderColor3 = Color3.new(0,0,0)
			KeyInline.AutomaticSize = Enum.AutomaticSize.XY
			--
			KeyAccent.Name = "KeyAccent"
			KeyAccent.Size = UDim2.new(1,0,0,1)
			KeyAccent.BackgroundColor3 = Library.Accent
			KeyAccent.BorderSizePixel = 0
			KeyAccent.BorderColor3 = Color3.new(0,0,0)
			--
			KeyHolder.Name = "KeyHolder"
			KeyHolder.Position = UDim2.new(0,0,0,22)
			KeyHolder.BackgroundColor3 = Color3.new(1,1,1)
			KeyHolder.BackgroundTransparency = 1
			KeyHolder.BorderSizePixel = 0
			KeyHolder.BorderColor3 = Color3.new(0,0,0)
			KeyHolder.AutomaticSize = Enum.AutomaticSize.XY
			--
			UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
			--
			KeyTitle.Name = "KeyTitle"
			KeyTitle.Size = UDim2.new(1,0,0,20)
			KeyTitle.BackgroundColor3 = Color3.new(1,1,1)
			KeyTitle.BackgroundTransparency = 1
			KeyTitle.BorderSizePixel = 0
			KeyTitle.BorderColor3 = Color3.new(0,0,0)
			KeyTitle.Text = "Keybinds"
			KeyTitle.TextColor3 = Color3.new(1,1,1)
			KeyTitle.FontFace = Font.new("rbxassetid://12187371840")
			KeyTitle.TextSize = 12
			KeyTitle.TextStrokeTransparency = 0
			--
			LineThing.Name = "LineThing"
			LineThing.Position = UDim2.new(0,0,0,20)
			LineThing.Size = UDim2.new(1,0,0,1)
			LineThing.BackgroundColor3 = Color3.new(0.1765,0.1765,0.1765)
			LineThing.BorderSizePixel = 0
			LineThing.BorderColor3 = Color3.new(0,0,0)
			-- Functions
			function KeyList:SetVisible(State)
				KeyOutline.Visible = State;
			end;
			--
			function KeyList:NewKey(Name, Key, Mode)
				local KeyValue = {}
				--
				local NewValue = Instance.new('TextLabel', KeyHolder)
				--
				NewValue.Name = "NewValue"
				NewValue.Size = UDim2.new(0,0,0,15)
				NewValue.BackgroundColor3 = Color3.new(1,1,1)
				NewValue.BackgroundTransparency = 1
				NewValue.BorderSizePixel = 0
				NewValue.BorderColor3 = Color3.new(0,0,0)
				NewValue.Text = tostring(" ["..Key.."] " .. Name .. " (" .. Mode ..") ")
				NewValue.TextColor3 = Color3.new(1,1,1)
				NewValue.FontFace = Font.new("rbxassetid://12187371840")
				NewValue.TextSize = 12
				NewValue.AutomaticSize = Enum.AutomaticSize.X
				NewValue.TextXAlignment = Enum.TextXAlignment.Left
				NewValue.Visible = false
				--
				function KeyValue:SetVisible(State)
					NewValue.Visible = State;
				end;
				--
				function KeyValue:Update(NewName, NewKey, NewMode)
					NewValue.Text = tostring(" ["..NewName.."] " .. NewKey .. " (" .. NewMode ..") ")
				end;
				return KeyValue
			end;
			return KeyList
		end
	end
	-- // Color Picker Functions
	do
		function Library:NewPicker(name, default, defaultalpha, parent, count, flag, callback)
			-- // Instances
			local Icon = Instance.new('TextButton', parent)
			local IconInline = Instance.new('Frame', Icon)
			local ColorWindow = Instance.new('Frame', parent)
			local WindowInline = Instance.new('Frame', ColorWindow)
			local Color = Instance.new('TextButton', WindowInline)
			local Sat = Instance.new('ImageLabel', Color)
			local Val = Instance.new('ImageLabel', Color)
			local Pointer = Instance.new('Frame', Color)
			local Container = Instance.new('Frame', Color)
			local ColorOutline = Instance.new('Frame', Color)
			local UIStroke = Instance.new('UIStroke', ColorOutline)
			local Hue = Instance.new('ImageButton', Color)
			local HueOutline = Instance.new('Frame', Hue)
			local UIStroke2 = Instance.new('UIStroke', HueOutline)
			local Alpha = Instance.new('ImageButton', Color)
			local AlphaOutline = Instance.new('Frame', Alpha)
			local UIStroke3 = Instance.new('UIStroke', AlphaOutline)
			local HueSlide = Instance.new('Frame', Hue)
			local AlphaSlide = Instance.new('Frame', Alpha)
			local ModeOutline = Instance.new('Frame', parent)
			local ModeInline = Instance.new('Frame', ModeOutline)
			local UIListLayout = Instance.new('UIListLayout', ModeInline)
			local Hold = Instance.new('TextButton', ModeInline)
			local Toggle = Instance.new('TextButton', ModeInline)
			--
			Icon.Name = "Icon"
			Icon.Position = UDim2.new(1, - (count * 20) - (count * 6),0.5,0)
			Icon.Size = UDim2.new(0,20,0,10)
			Icon.BackgroundColor3 = Color3.fromRGB(45,45,45)
			Icon.BorderColor3 = Color3.fromRGB(10,10,10)
			Icon.AnchorPoint = NewVector2(1,0.5)
			Icon.AutoButtonColor = false
			Icon.Text = ""
			--
			IconInline.Name = "IconInline"
			IconInline.Position = UDim2.new(0,1,0,1)
			IconInline.Size = UDim2.new(1,-2,1,-2)
			IconInline.BackgroundColor3 = default
			IconInline.BorderSizePixel = 0
			--
			ColorWindow.Name = "ColorWindow"
			ColorWindow.Position = UDim2.new(1,-2,1,2)
			ColorWindow.Size = UDim2.new(0,206,0,170)
			ColorWindow.BackgroundColor3 = Color3.fromRGB(45,45,45)
			ColorWindow.BorderColor3 = Color3.fromRGB(10,10,10)
			ColorWindow.AnchorPoint = NewVector2(1,0)
			ColorWindow.ZIndex = 100
			ColorWindow.Visible = false
			--
			WindowInline.Name = "WindowInline"
			WindowInline.Position = UDim2.new(0,1,0,1)
			WindowInline.Size = UDim2.new(1,-2,1,-2)
			WindowInline.BackgroundColor3 = Color3.fromRGB(20,20,20)
			WindowInline.BorderSizePixel = 0;
			WindowInline.ZIndex = 100
			--
			Color.Name = "Color"
			Color.Position = UDim2.new(0,8,0,10)
			Color.Size = UDim2.new(0,150,0,150)
			Color.BackgroundColor3 = default
			Color.BorderColor3 = Color3.new(0,0,0)
			Color.Text = ""
			Color.TextColor3 = Color3.new(0,0,0)
			Color.AutoButtonColor = false
			Color.FontFace = Font.new("rbxassetid://12187371840")
			Color.TextSize = 14
			Color.ZIndex = 100
			--
			Sat.Name = "Sat"
			Sat.Size = UDim2.new(1,0,1,0)
			Sat.BackgroundColor3 = Color3.new(1,1,1)
			Sat.BackgroundTransparency = 1
			Sat.BorderSizePixel = 0
			Sat.BorderColor3 = Color3.new(0,0,0)
			Sat.Image = "http://www.roblox.com/asset/?id=14684562507"
			Sat.ZIndex = 100
			--
			Val.Name = "Val"
			Val.Size = UDim2.new(1,0,1,0)
			Val.BackgroundColor3 = Color3.new(1,1,1)
			Val.BackgroundTransparency = 1
			Val.BorderSizePixel = 0
			Val.BorderColor3 = Color3.new(0,0,0)
			Val.Image = "http://www.roblox.com/asset/?id=14684563800"
			Val.ZIndex = 100
			--
			Pointer.Name = "Pointer"
			Pointer.Position = UDim2.new(1,0,1,0)
			Pointer.Size = UDim2.new(0,1,0,1)
			Pointer.BackgroundColor3 = Color3.new(1,1,1)
			Pointer.BorderColor3 = Color3.new(0,0,0)
			Pointer.ZIndex = 100
			--
			Container.Name = "Container"
			Container.Position = UDim2.new(0,-2,1,5)
			Container.Size = UDim2.new(0,189,0,55)
			Container.BackgroundColor3 = Color3.new(1,1,1)
			Container.BackgroundTransparency = 1
			Container.BorderColor3 = Color3.new(0,0,0)
			Container.ZIndex = 100
			--
			ColorOutline.Name = "ColorOutline"
			ColorOutline.Position = UDim2.new(0,-1,0,-1)
			ColorOutline.Size = UDim2.new(1,2,1,2)
			ColorOutline.BackgroundColor3 = Color3.new(1,1,1)
			ColorOutline.BackgroundTransparency = 1
			ColorOutline.BorderSizePixel = 0
			ColorOutline.BorderColor3 = Color3.new(0,0,0)
			ColorOutline.ZIndex = 100
			--
			UIStroke.Color = Color3.fromRGB(45,45,45)
			--
			Hue.Name = "Hue"
			Hue.Position = UDim2.new(1,10,0,0)
			Hue.Size = UDim2.new(0,10,1,0)
			Hue.BackgroundColor3 = Color3.new(1,1,1)
			Hue.BorderColor3 = Color3.new(0,0,0)
			Hue.Image = "http://www.roblox.com/asset/?id=14684557999"
			Hue.AutoButtonColor = false
			Hue.ZIndex = 100
			--
			HueOutline.Name = "HueOutline"
			HueOutline.Position = UDim2.new(0,-1,0,-1)
			HueOutline.Size = UDim2.new(1,2,1,2)
			HueOutline.BackgroundColor3 = Color3.new(1,1,1)
			HueOutline.BackgroundTransparency = 1
			HueOutline.BorderSizePixel = 0
			HueOutline.BorderColor3 = Color3.new(0,0,0)
			HueOutline.ZIndex = 100
			--
			UIStroke2.Color = Color3.fromRGB(45,45,45)
			--
			Alpha.Name = "Alpha"
			Alpha.Position = UDim2.new(1,30,0,0)
			Alpha.Size = UDim2.new(0,10,1,0)
			Alpha.BackgroundColor3 = Color3.new(1,1,1)
			Alpha.BorderColor3 = Color3.new(0,0,0)
			Alpha.Image = "http://www.roblox.com/asset/?id=14684560169"
			Alpha.AutoButtonColor = false
			Alpha.ZIndex = 100
			--
			AlphaOutline.Name = "AlphaOutline"
			AlphaOutline.Position = UDim2.new(0,-1,0,-1)
			AlphaOutline.Size = UDim2.new(1,2,1,2)
			AlphaOutline.BackgroundColor3 = Color3.new(1,1,1)
			AlphaOutline.BackgroundTransparency = 1
			AlphaOutline.BorderSizePixel = 0
			AlphaOutline.BorderColor3 = Color3.new(0,0,0)
			AlphaOutline.ZIndex = 100
			--
			UIStroke3.Color = Color3.fromRGB(45,45,45)
			--
			HueSlide.Name = "HueSlide"
			HueSlide.Size = UDim2.new(1,0,0,3)
			HueSlide.BackgroundColor3 = Color3.new(1,1,1)
			HueSlide.BorderColor3 = Color3.new(0,0,0)
			--
			AlphaSlide.Name = "AlphaSlide"
			AlphaSlide.Size = UDim2.new(1,0,0,3)
			AlphaSlide.BackgroundColor3 = Color3.new(1,1,1)
			AlphaSlide.BorderColor3 = Color3.new(0,0,0)
			AlphaSlide.ZIndex = 100
			--
			ModeOutline.Name = "ModeOutline"
			ModeOutline.Position = UDim2.new(1,65,0.5,0)
			ModeOutline.Size = UDim2.new(0,60,0,12)
			ModeOutline.BackgroundColor3 = Color3.new(0.1765,0.1765,0.1765)
			ModeOutline.BorderColor3 = Color3.new(0.0392,0.0392,0.0392)
			ModeOutline.AnchorPoint = NewVector2(1,0.5)
			ModeOutline.AutomaticSize = Enum.AutomaticSize.Y
			ModeOutline.Visible = false
			ModeOutline.ZIndex = 1020000010
			--
			ModeInline.Name = "ModeInline"
			ModeInline.Position = UDim2.new(0,1,0,1)
			ModeInline.Size = UDim2.new(1,-2,1,-2)
			ModeInline.BackgroundColor3 = Color3.new(0.1294,0.1294,0.1294)
			ModeInline.BorderSizePixel = 0
			ModeInline.BorderColor3 = Color3.new(0,0,0)
			ModeInline.ZIndex = 100
			--
			UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
			--
			Hold.Name = "Hold"
			Hold.Size = UDim2.new(1,0,0,15)
			Hold.BackgroundColor3 = Color3.new(1,1,1)
			Hold.BackgroundTransparency = 1
			Hold.BorderSizePixel = 0
			Hold.BorderColor3 = Color3.new(0,0,0)
			Hold.Text = "Copy"
			Hold.TextColor3 = Color3.fromRGB(145,145,145)
			Hold.AutoButtonColor = false
			Hold.FontFace = Font.new("rbxassetid://12187371840")
			Hold.TextSize = Library.FontSize
			Hold.TextStrokeTransparency = 0
			Hold.ZIndex = 100
			--
			Toggle.Name = "Toggle"
			Toggle.Size = UDim2.new(1,0,0,15)
			Toggle.BackgroundColor3 = Color3.new(1,1,1)
			Toggle.BackgroundTransparency = 1
			Toggle.BorderSizePixel = 0
			Toggle.BorderColor3 = Color3.new(0,0,0)
			Toggle.Text = "Paste"
			Toggle.TextColor3 = Color3.fromRGB(145,145,145)
			Toggle.AutoButtonColor = false
			Toggle.FontFace = Font.new("rbxassetid://12187371840")
			Toggle.TextSize = Library.FontSize
			Toggle.TextStrokeTransparency = 0
			Toggle.ZIndex = 100

			Library:Connection(Icon.MouseEnter, function()
				Icon.BorderColor3 = Library.Accent
			end)
			--
			Library:Connection(Icon.MouseLeave, function()
				Icon.BorderColor3 = Color3.fromRGB(10,10,10)
			end)

			-- // Connections
			local mouseover = false
			local hue, sat, val = default:ToHSV()
			local hsv = default:ToHSV()
			local alpha = defaultalpha
			local oldcolor = hsv
			local slidingsaturation = false
			local slidinghue = false
			local slidingalpha = false

			local function update()
				local real_pos = game:GetService("UserInputService"):GetMouseLocation()
				local mouse_position = NewVector2(real_pos.X, real_pos.Y - 40)
				local relative_palette = (mouse_position - Color.AbsolutePosition)
				local relative_hue     = (mouse_position - Hue.AbsolutePosition)
				local relative_opacity = (mouse_position - Alpha.AbsolutePosition)
				--
				if slidingsaturation then
					sat = math.clamp(1 - relative_palette.X / Color.AbsoluteSize.X, 0, 1)
					val = math.clamp(1 - relative_palette.Y / Color.AbsoluteSize.Y, 0, 1)
				end 
				--  
				if slidinghue then
					hue = math.clamp(relative_hue.Y / Hue.AbsoluteSize.Y, 0, 1)
				end  
				-- 
				if slidingalpha then
					alpha = math.clamp(relative_opacity.Y / Alpha.AbsoluteSize.Y, 0, 1)
				end
				-- edited by finobe (yes these fucking alphas crash on roexec? nice executor for $8 a week :[ )
				hsv = Color3.fromHSV(hue, sat, val)
				Pointer.Position = UDim2.new(math.clamp(1 - sat, 0.005, 0.995), 0, math.clamp(1 - val, 0.005, 0.995), 0)
				Color.BackgroundColor3 = Color3.fromHSV(hue, 1, 1)
				Alpha.BackgroundColor3 = Color3.fromHSV(hue, 1, 1)
				IconInline.BackgroundColor3 = hsv

				HueSlide.Position = UDim2.new(0,0,math.clamp(hue, 0.005, 0.995),0)
				AlphaSlide.Position = UDim2.new(0,0,math.clamp(alpha, 0.005, 0.995),0)

				if flag then
					Library.Flags[flag] = {} 
					Library.Flags[flag]["Color"] = Color3.fromRGB(hsv.r * 255, hsv.g * 255, hsv.b * 255)
					Library.Flags[flag]["Transparency"] = alpha
				end

				callback(Color3.fromRGB(hsv.r * 255, hsv.g * 255, hsv.b * 255), alpha)
			end

			local function set(color, a)
				if type(color) == "table" then
					a = color[4]
					color = Color3.fromHSV(color[1], color[2], color[3])
				end
				if type(color) == "string" then
					color = Color3.fromHex(color)
				end

				local oldcolor = hsv
				local oldalpha = alpha

				hue, sat, val = color:ToHSV()
				alpha = a or 1
				hsv = Color3.fromHSV(hue, sat, val)

				if hsv ~= oldcolor then
					IconInline.BackgroundColor3 = hsv
					Color.BackgroundColor3 = Color3.fromHSV(hue, 1, 1)
					Pointer.Position = UDim2.new(math.clamp(1 - sat, 0.005, 0.995), 0, math.clamp(1 - val, 0.005, 0.995), 0)
					Alpha.BackgroundColor3 = Color3.fromHSV(hue, 1, 1)
					HueSlide.Position = UDim2.new(0,0,math.clamp(hue, 0.005, 0.995),0)
					AlphaSlide.Position = UDim2.new(0,0,math.clamp(alpha, 0.005, 0.995),0)

					if flag then
						Library.Flags[flag] = {} 
						Library.Flags[flag]["Color"] = Color3.fromRGB(hsv.r * 255, hsv.g * 255, hsv.b * 255)
						Library.Flags[flag]["Transparency"] = alpha
					end

					callback(Color3.fromRGB(hsv.r * 255, hsv.g * 255, hsv.b * 255), alpha)
				end
			end

			Flags[flag] = set

			set(default, defaultalpha)

			Sat.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					slidingsaturation = true
					update()
				end
			end)

			Sat.InputEnded:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					slidingsaturation = false
					update()
				end
			end)

			Hue.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					slidinghue = true
					update()
				end
			end)

			Hue.InputEnded:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					slidinghue = false
					update()
				end
			end)

			Alpha.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					slidingalpha = true
					update()
				end
			end)

			Alpha.InputEnded:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					slidingalpha = false
					update()
				end
			end)

			Library:Connection(game:GetService("UserInputService").InputChanged, function(input)
				if input.UserInputType == Enum.UserInputType.MouseMovement then
					if slidingalpha then
						update()
					end

					if slidinghue then
						update()
					end

					if slidingsaturation then
						update()
					end
				end
			end)

			Icon.MouseButton1Down:Connect(function()
				ColorWindow.Visible = not ColorWindow.Visible
				parent.ZIndex = ColorWindow.Visible and 5 or 1

				if slidinghue then
					slidinghue = false
				end

				if slidingsaturation then
					slidingsaturation = false
				end

				if slidingalpha then
					slidingalpha = false
				end
			end)
			
			Library:Connection(Icon.MouseButton2Down, function()
				ModeOutline.Visible = not ModeOutline.Visible
			end)
			--
			Library:Connection(Hold.MouseButton1Down, function()
				Library.CopiedColor = hsv
				Library.CopiedAlpha = alpha
			end)
			--
			Library:Connection(Toggle.MouseButton1Down, function()
				set(Library.CopiedColor or Color3.new(1,1,1), Library.CopiedAlpha or 0)
			end)
			--
			Library:Connection(game:GetService("UserInputService").InputBegan, function(Input)
				if ModeOutline.Visible and Input.UserInputType == Enum.UserInputType.MouseButton1 then
					if not Library:IsMouseOverFrame(Icon) then
						ModeOutline.Visible = false
					end
				end
			end)

			local colorpickertypes = {}

			function colorpickertypes:Set(color, newalpha)
				set(color, newalpha)
			end

			Library:Connection(game:GetService("UserInputService").InputBegan, function(Input)
				if ColorWindow.Visible and Input.UserInputType == Enum.UserInputType.MouseButton1 then
					if not Library:IsMouseOverFrame(ColorWindow) and not Library:IsMouseOverFrame(Icon) then
						ColorWindow.Visible = false
						parent.ZIndex = 1
					end
				end
			end)

			return colorpickertypes, ColorWindow
		end
	end
	-- // Doc Functions
	do
		local Pages = Library.Pages;
		local Sections = Library.Sections;
		function Library:Window(Options)
			local Window = {
				Pages = {};
				Sections = {};
				Elements = {};
				Dragging = { false, UDim2.new(0, 0, 0, 0) };
				Size = Options.Size or Options.size or UDim2.new(0, 550,0, 600);
			};
			--
			local ScreenGui = Instance.new('ScreenGui', game.CoreGui)
			local Outline = Instance.new('Frame', ScreenGui)
			local Inline = Instance.new('Frame', Outline)
			local Accent = Instance.new('Frame', Inline)
			local HolderOutline = Instance.new('Frame', Inline)
			local HolderInline = Instance.new('Frame', HolderOutline)
			local Tabs = Instance.new('Frame', HolderInline)
			local UIListLayout = Instance.new('UIListLayout', Tabs)
			local DragButton = Instance.new('TextButton', Outline)
			local KeybindList = Library:KeybindList()
			--
			ScreenGui.DisplayOrder = 2
			--
			Outline.Name = "Outline"
			Outline.Position = UDim2.new(0.5,0,0.5,0)
			Outline.Size = Window.Size
			Outline.BackgroundColor3 = Color3.new(0.1765,0.1765,0.1765)
			Outline.BorderColor3 = Color3.new(0.0392,0.0392,0.0392)
			Outline.AnchorPoint = Vector2.new(0.5,0.5)
			Library.Holder = Outline
			--
			Inline.Name = "Inline"
			Inline.Position = UDim2.new(0,1,0,1)
			Inline.Size = UDim2.new(1,-2,1,-2)
			Inline.BackgroundColor3 = Color3.new(0.0784,0.0784,0.0784)
			Inline.BorderSizePixel = 0
			Inline.BorderColor3 = Color3.new(0,0,0)
			--
			Accent.Name = "Accent"
			Accent.Size = UDim2.new(1,0,0,1)
			Accent.BackgroundColor3 = Library.Accent
			Accent.BorderSizePixel = 0
			Accent.BorderColor3 = Color3.new(0,0,0)
			table.insert(Library.ThemeObjects, Accent)
			--
			HolderOutline.Name = "HolderOutline"
			HolderOutline.Position = UDim2.new(0,7,0,11)
			HolderOutline.Size = UDim2.new(1,-14,1,-18)
			HolderOutline.BackgroundColor3 = Color3.new(0.1765,0.1765,0.1765)
			HolderOutline.BorderColor3 = Color3.new(0.0392,0.0392,0.0392)
			--
			HolderInline.Name = "HolderInline"
			HolderInline.Position = UDim2.new(0,1,0,1)
			HolderInline.Size = UDim2.new(1,-2,1,-2)
			HolderInline.BackgroundColor3 = Color3.new(0.0784,0.0784,0.0784)
			HolderInline.BorderSizePixel = 0
			HolderInline.BorderColor3 = Color3.new(0,0,0)
			--
			Tabs.Name = "Tabs"
			Tabs.Size = UDim2.new(1,0,0,22)
			Tabs.BackgroundColor3 = Color3.new(1,1,1)
			Tabs.BackgroundTransparency = 1
			Tabs.BorderSizePixel = 0
			Tabs.BorderColor3 = Color3.new(0,0,0)
			--
			UIListLayout.FillDirection = Enum.FillDirection.Horizontal
			UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
			--
			DragButton.Name = "DragButton"
			DragButton.Size = UDim2.new(1,0,0,10)
			DragButton.BackgroundColor3 = Color3.new(1,1,1)
			DragButton.BackgroundTransparency = 1
			DragButton.BorderSizePixel = 0
			DragButton.BorderColor3 = Color3.new(0,0,0)
			DragButton.Text = ""
			DragButton.TextColor3 = Color3.new(0,0,0)
			DragButton.AutoButtonColor = false
			DragButton.FontFace = Font.new("rbxassetid://12187371840")
			DragButton.TextSize = 14
			
            
			
			-- // Elements
			Window.Elements = {
				TabHolder = Tabs,
				Holder = HolderInline
			}

			-- // Dragging
			Library:Connection(DragButton.MouseButton1Down, function()
				local Location = game:GetService("UserInputService"):GetMouseLocation()
				Window.Dragging[1] = true
				Window.Dragging[2] = UDim2.new(0, Location.X - Outline.AbsolutePosition.X, 0, Location.Y - Outline.AbsolutePosition.Y)
			end)
			Library:Connection(game:GetService("UserInputService").InputEnded, function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 and Window.Dragging[1] then
					local Location = game:GetService("UserInputService"):GetMouseLocation()
					Window.Dragging[1] = false
					Window.Dragging[2] = UDim2.new(0, 0, 0, 0)
				end
			end)
			Library:Connection(game:GetService("UserInputService").InputChanged, function(Input)
				local Location = game:GetService("UserInputService"):GetMouseLocation()
				local ActualLocation = nil

				-- Dragging
				if Window.Dragging[1] then
					Outline.Position = UDim2.new(
						0,
						Location.X - Window.Dragging[2].X.Offset + (Outline.Size.X.Offset * Outline.AnchorPoint.X),
						0,
						Location.Y - Window.Dragging[2].Y.Offset + (Outline.Size.Y.Offset * Outline.AnchorPoint.Y)
					)
				end
			end)
			Library:Connection(game:GetService("UserInputService").InputBegan, function(Input)
				if Input.KeyCode == Library.UIKey then
					Library:SetOpen(not Library.Open)
				end
			end)

			-- // Functions
			function Window:UpdateTabs()
				for Index, Page in pairs(Window.Pages) do
					Page.Elements.Button.Size = UDim2.new(1/#Window.Pages,0,1,0)
					Page:Turn(Page.Open)
				end
			end

			-- // Returns
			Library.Holder = Outline
			return setmetatable(Window, Library)
		end
		--
		function Library:Page(Properties)
			if not Properties then
				Properties = {}
			end
			--
			local Page = {
				Name = Properties.Name or "Page",
				Window = self,
				Open = false,
				Sections = {},
				Elements = {},
                Weapons = {},
                Icons = Properties.Weapons or Properties.weapons or false,
			}
			--
			local TabButton = Instance.new('TextButton', Page.Window.Elements.TabHolder)
			local TabAccent = Instance.new('Frame', TabButton)
			local TabLine = Instance.new('Frame', TabButton)
            local WeaponOutline = Instance.new("Frame", Page.Window.Elements.Holder)
            local WeaponInline = Instance.new("Frame", WeaponOutline)
            local UIListLayout3 = Instance.new("UIListLayout", WeaponInline)
            local Left = Instance.new('Frame', Page.Window.Elements.Holder)
            local Right = Instance.new('Frame', Page.Window.Elements.Holder)
            local UIListLayout = Instance.new('UIListLayout', Left)
            local UIListLayout_2 = Instance.new('UIListLayout', Right)
            Left.Name = "Left"
            Left.Position = UDim2.new(0,5,0,35)
            Left.Size = UDim2.new(0.485,-3,1,-40)
            Left.BackgroundColor3 = Color3.new(1,1,1)
            Left.BorderSizePixel = 0
            Left.BackgroundTransparency = 1
            Left.BorderColor3 = Color3.new(0,0,0)
            Left.Visible = false
            Left.ZIndex = 3
            --
            Right.Name = "Right"
            Right.Position = UDim2.new(1,-5,0,35)
            Right.Size = UDim2.new(0.485,-3,1,-40)
            Right.BackgroundColor3 = Color3.new(1,1,1)
            Right.BorderSizePixel = 0
            Right.BorderColor3 = Color3.new(0,0,0)
            Right.AnchorPoint = Vector2.new(1,0)
            Right.Visible = false
            Right.BackgroundTransparency = 1
            --
            UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
            UIListLayout.Padding = UDim.new(0,12)
            --
            UIListLayout_2.SortOrder = Enum.SortOrder.LayoutOrder
            UIListLayout_2.Padding = UDim.new(0,12)
			--
			TabButton.Name = "TabButton"
			TabButton.Size = UDim2.new(0.25,0,1,0)
			TabButton.BackgroundColor3 = Color3.new(1,1,1)
			TabButton.BackgroundTransparency = 1
			TabButton.BorderSizePixel = 0
			TabButton.BorderColor3 = Color3.new(0,0,0)
			TabButton.Text = Page.Name
			TabButton.TextColor3 = Color3.new(0.5686,0.5686,0.5686)
			TabButton.AutoButtonColor = false
			TabButton.FontFace = Font.new("rbxassetid://12187371840")
			TabButton.TextSize = Library.FontSize
			TabButton.TextStrokeTransparency = 0
			TabButton.LineHeight = 1.1
			--
			TabAccent.Name = "TabAccent"
			TabAccent.Size = UDim2.new(1,0,0,1)
			TabAccent.BackgroundColor3 = Library.Accent
			TabAccent.BorderSizePixel = 0
			TabAccent.BorderColor3 = Color3.new(0,0,0)
			TabAccent.Visible = false
			table.insert(Library.ThemeObjects, TabAccent)
			--
			TabLine.Name = "TabLine"
			TabLine.Position = UDim2.new(0,0,1,-1)
			TabLine.Size = UDim2.new(1,0,0,1)
			TabLine.BackgroundColor3 = Color3.new(0.1765,0.1765,0.1765)
			TabLine.BorderSizePixel = 0
			TabLine.BorderColor3 = Color3.new(0,0,0)

            WeaponOutline.Name = "WeaponOutline"
            WeaponOutline.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
            WeaponOutline.BorderColor3 = Color3.fromRGB(10, 10, 10)
            WeaponOutline.Position = UDim2.new(0, 5, 0, 25)
            WeaponOutline.Size = UDim2.new(1, -10, 0, 40)
            WeaponOutline.Visible = false
            
            WeaponInline.Name = "WeaponInline"
            WeaponInline.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
            WeaponInline.BorderColor3 = Color3.fromRGB(0, 0, 0)
            WeaponInline.BorderSizePixel = 0
            WeaponInline.Position = UDim2.new(0, 1, 0, 1)
            WeaponInline.Size = UDim2.new(1, -2, 1, -2)
            
            UIListLayout3.FillDirection = Enum.FillDirection.Horizontal
            UIListLayout3.SortOrder = Enum.SortOrder.LayoutOrder
			
			function Page:Turn(bool)
				Page.Open = bool
				if not Page.Icons then
                    Left.Visible = Page.Open
				    Right.Visible = Page.Open
                else
                    WeaponOutline.Visible = Page.Open
                    for Index, Weapon in pairs(Page.Weapons) do
                        Weapon:Turn(Weapon.Open)
                    end
                end
				TabAccent.Visible = Page.Open
				TabLine.Visible = not Page.Open
				TabButton.TextColor3 = Page.Open and Color3.fromRGB(255,255,255) or Color3.fromRGB(145,145,145)
			end
			--
			Library:Connection(TabButton.MouseButton1Down, function()
				if not Page.Open then
					Page:Turn(true)
					for _, Pages in pairs(Page.Window.Pages) do
						if Pages.Open and Pages ~= Page then
							Pages:Turn(false)
						end
					end
				end
			end)
			--
			Library:Connection(TabButton.MouseEnter, function() 
				if not Page.Open then
					TabButton.TextColor3 = Library.Accent
				end
			end)
			--
			Library:Connection(TabButton.MouseLeave, function() 
				if not Page.Open then
					TabButton.TextColor3 = Color3.fromRGB(145,145,145)
				end
			end)

            -- // Functions
			function Page:UpdateWeapons()
				for Index, Weapon in pairs(Page.Weapons) do
					Weapon.Elements.Button.Size = UDim2.new(1/#Page.Weapons,0,1,0)
					Weapon:Turn(Weapon.Open)
				end
			end

			-- // Elements
			Page.Elements = {
                Left = Page.Icons and nil or Left,
				Right = Page.Icons and nil or Right,
				Button = TabButton,
                WeaponOutline = WeaponOutline,
                WeaponInline = WeaponInline,
			}

			-- // Drawings
			if #Page.Window.Pages == 0 then
				Page:Turn(true)
			end
			Page.Window.Pages[#Page.Window.Pages + 1] = Page
			Page.Window:UpdateTabs()
			return setmetatable(Page, Library.Pages)
		end
        --
        function Pages:Weapon(Properties)
            if not Properties then
				Properties = {}
			end
			--
			local Weapon = {
				Icon = Properties.Icon or Properties.icon or "rbxassetid://11127408662",
				Window = self,
				Open = false,
				Sections = {},
				Elements = {},
			}
			--
            --Weapon.Window.Elements.WeaponOutline.Visible = true

			local Left = Instance.new('Frame', Weapon.Window.Window.Elements.Holder)
			local Right = Instance.new('Frame', Weapon.Window.Window.Elements.Holder)
			local UIListLayout = Instance.new('UIListLayout', Left)
			local UIListLayout_2 = Instance.new('UIListLayout', Right)
            local New = Instance.new("ImageButton")
			--
			New.Name = "New"
            New.Parent = Weapon.Window.Elements.WeaponInline
            New.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            New.BackgroundTransparency = 1.000
            New.BorderColor3 = Color3.fromRGB(0, 0, 0)
            New.BorderSizePixel = 0
            New.Size = UDim2.new(0.200000003, 0, 1, 0)
            New.Image = Weapon.Icon
            New.ScaleType = Enum.ScaleType.Fit
			--
			Left.Name = "Left"
			Left.Position = UDim2.new(0,5,0,75)
			Left.Size = UDim2.new(0.485,-3,1, -80)
			Left.BackgroundColor3 = Color3.new(1,1,1)
			Left.BorderSizePixel = 0
			Left.BackgroundTransparency = 1
			Left.BorderColor3 = Color3.new(0,0,0)
			Left.Visible = false
			Left.ZIndex = 3
			--
			Right.Name = "Right"
			Right.Position = UDim2.new(1,-5,0,75)
			Right.Size = UDim2.new(0.485,-3,1, -80)
			Right.BackgroundColor3 = Color3.new(1,1,1)
			Right.BorderSizePixel = 0
			Right.BorderColor3 = Color3.new(0,0,0)
			Right.AnchorPoint = Vector2.new(1,0)
			Right.Visible = false
			Right.BackgroundTransparency = 1
			--
			UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
			UIListLayout.Padding = UDim.new(0,12)
			--
			UIListLayout_2.SortOrder = Enum.SortOrder.LayoutOrder
			UIListLayout_2.Padding = UDim.new(0,12)
			
			function Weapon:Turn(bool)
				Weapon.Open = bool
				Left.Visible = Weapon.Open and Weapon.Window.Open
				Right.Visible = Weapon.Open and Weapon.Window.Open
				New.ImageColor3 = Weapon.Open and Color3.new(1,1,1) or Color3.fromRGB(145,145,145)
			end
			--
			Library:Connection(New.MouseButton1Down, function()
				if not Weapon.Open then
					Weapon:Turn(true)
					for _, Weapons in pairs(Weapon.Window.Weapons) do
						if Weapons.Open and Weapons ~= Weapon then
							Weapons:Turn(false)
						end
					end
				end
			end)
			--

			-- // Elements
			Weapon.Elements = {
				Left = Left,
				Right = Right,
				Button = New
			}

			-- // Drawings
			if #Weapon.Window.Weapons == 0 then
				Weapon:Turn(true)
			end
			Weapon.Window.Weapons[#Weapon.Window.Weapons + 1] = Weapon
			Weapon.Window:UpdateWeapons()
			return setmetatable(Weapon, Library.Pages)
        end
		--
		function Pages:Section(Properties)
			if not Properties then
				Properties = {}
			end
			--
			local Section = {
				Name = Properties.Name or "Section",
				Page = self,
				Side = (Properties.side or Properties.Side or "left"):lower(),
				ZIndex = Properties.ZIndex or 1, -- Idfk why
				Elements = {},
				Content = {},
			}
			--
			local SectionOutline = Instance.new('Frame', Section.Side == "left" and Section.Page.Elements.Left or Section.Side == "right" and Section.Page.Elements.Right)
			local SectionInline = Instance.new('Frame', SectionOutline)
			local Container = Instance.new('Frame', SectionInline)
			local UIListLayout = Instance.new('UIListLayout', Container)
			local Space = Instance.new('Frame', Container)
			local SectionAccent = Instance.new('Frame', SectionInline)
			local Title = Instance.new('TextLabel', SectionOutline)
			local TextBorder = Instance.new('Frame', SectionOutline)	
			--
			SectionOutline.Name = "SectionOutline"
			SectionOutline.Size = UDim2.new(1,0,0,20)
			SectionOutline.BackgroundColor3 = Color3.new(0.1765,0.1765,0.1765)
			SectionOutline.BorderColor3 = Color3.new(0.0392,0.0392,0.0392)
			SectionOutline.AutomaticSize = Enum.AutomaticSize.Y
			SectionOutline.ZIndex = Section.ZIndex
			--
			
			--
			SectionInline.Name = "SectionInline"
			SectionInline.Position = UDim2.new(0,1,0,1)
			SectionInline.Size = UDim2.new(1,-2,1,-2)
			SectionInline.BackgroundColor3 = Color3.new(0.0784,0.0784,0.0784)
			SectionInline.BorderSizePixel = 0
			SectionInline.BorderColor3 = Color3.new(0,0,0)
			--
			Container.Name = "Container"
			Container.Position = UDim2.new(0,7,0,10)
			Container.Size = UDim2.new(1,-14,1,-10)
			Container.BackgroundColor3 = Color3.new(1,1,1)
			Container.BackgroundTransparency = 1
			Container.BorderSizePixel = 0
			Container.BorderColor3 = Color3.new(0,0,0)
			Container.AutomaticSize = Enum.AutomaticSize.Y
			--
			Space.Name = "Space"
			Space.Position = UDim2.new(0,0,1,0)
			Space.Size = UDim2.new(1,0,0,1)
			Space.BackgroundColor3 = Color3.new(1,1,1)
			Space.BackgroundTransparency = 1
			Space.BorderSizePixel = 0
			Space.BorderColor3 = Color3.new(0,0,0)
			Space.LayoutOrder = 1000
			--
			SectionAccent.Name = "SectionAccent"
			SectionAccent.Size = UDim2.new(1,0,0,1)
			SectionAccent.BackgroundColor3 = Library.Accent
			SectionAccent.BorderSizePixel = 0
			SectionAccent.BorderColor3 = Color3.new(0,0,0)
			table.insert(Library.ThemeObjects, SectionAccent)
			table.insert(Library.ThemeObjects, SectionAccent)
			--
			Title.Name = "Title"
			Title.Position = UDim2.new(0,10,0,-8)
			Title.Size = UDim2.new(0,100,0,16)
			Title.BackgroundColor3 = Color3.new(1,1,1)
			Title.BackgroundTransparency = 1
			Title.BorderSizePixel = 0
			Title.BorderColor3 = Color3.new(0,0,0)
			Title.TextColor3 = Color3.new(1,1,1)
			Title.FontFace = Font.new("rbxassetid://12187371840")
			Title.TextSize = Library.FontSize
			Title.ZIndex = 3
			Title.TextXAlignment = Enum.TextXAlignment.Left
			Title.Text = Section.Name
			Title.TextStrokeTransparency = 0
			--
			TextBorder.Name = "TextBorder"
			TextBorder.Position = UDim2.new(0,6,0,-2)
			TextBorder.Size = UDim2.new(0,Title.TextBounds.X + 8,0,4)
			TextBorder.BackgroundColor3 = Color3.new(0.0784,0.0784,0.0784)
			TextBorder.BorderSizePixel = 0
			TextBorder.BorderColor3 = Color3.new(0,0,0)
			--
			UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
			UIListLayout.Padding = UDim.new(0,10)
			
			-- // Elements
			Section.Elements = {
				SectionContent = Container;
				SectionHolder = SectionOutline;
			}

			-- // Returning
			Section.Page.Sections[#Section.Page.Sections + 1] = Section
			wait(0.01)
			TextBorder.Size = UDim2.new(0,Title.TextBounds.X + 8,0,4)
			return setmetatable(Section, Library.Sections)
		end
		--
		function Sections:Toggle(Properties)
			if not Properties then
				Properties = {}
			end
			--
			local Toggle = {
				Window = self.Window,
				Page = self.Page,
				Section = self,
				Risk = Properties.Risk or false,
				Name = Properties.Name or "Toggle",
				State = (
					Properties.state
						or Properties.State
						or Properties.def
						or Properties.Def
						or Properties.default
						or Properties.Default
						or false
				),
				Callback = (
					Properties.callback
						or Properties.Callback
						or Properties.callBack
						or Properties.CallBack
						or function() end
				),
				Flag = (
					Properties.flag
						or Properties.Flag
						or Properties.pointer
						or Properties.Pointer
						or Library.NextFlag()
				),
				Toggled = false,
				Colorpickers = 0,
			}
			--
			local NewToggle = Instance.new('TextButton', Toggle.Section.Elements.SectionContent)
			local Outline = Instance.new('Frame', NewToggle)
			local Inline = Instance.new('Frame', Outline)
			local Title = Instance.new('TextLabel', NewToggle)
			--
			NewToggle.Name = "NewToggle"
			NewToggle.Size = UDim2.new(1,0,0,10)
			NewToggle.BackgroundColor3 = Color3.new(1,1,1)
			NewToggle.BackgroundTransparency = 1
			NewToggle.BorderSizePixel = 0
			NewToggle.BorderColor3 = Color3.new(0,0,0)
			NewToggle.Text = ""
			NewToggle.TextColor3 = Color3.new(0,0,0)
			NewToggle.AutoButtonColor = false
			NewToggle.FontFace = Font.new("rbxassetid://12187371840")
			NewToggle.TextSize = 14
			--
			Outline.Name = "Outline"
			Outline.Size = UDim2.new(0,10,0,10)
			Outline.BackgroundColor3 = Color3.new(0.1765,0.1765,0.1765)
			Outline.BorderColor3 = Color3.new(0.0392,0.0392,0.0392)
			--
			Inline.Name = "Inline"
			Inline.Position = UDim2.new(0,1,0,1)
			Inline.Size = UDim2.new(1,-2,1,-2)
			Inline.BackgroundColor3 = Color3.new(0.1294,0.1294,0.1294)
			Inline.BorderSizePixel = 0
			Inline.BorderColor3 = Color3.new(0,0,0)
			--
			--[[local inputText = string.upper(Toggle.Name)
			local targetLanguage = "Chinese" -- // English, Arabic, Albanian, Japanese, Spanish, Russian, Chinese, Urdu, French, Portuguese, Hindi
			local translatedText = utility:TranslateString(inputText, targetLanguage)]] 
			-- 
			Title.Name = "Title"
			Title.Position = UDim2.new(0,15,0,0)
			Title.Size = UDim2.new(1,0,0,10)
			Title.BackgroundColor3 = Color3.new(1,1,1)
			Title.BackgroundTransparency = 1
			Title.BorderSizePixel = 0
			Title.BorderColor3 = Color3.new(0,0,0)
			Title.TextColor3 = Toggle.Risk and Color3.fromRGB(158, 158, 24) or Color3.new(0.5686,0.5686,0.5686)
			Title.FontFace = Font.new("rbxassetid://12187371840")
			Title.TextSize = Library.FontSize
			Title.TextXAlignment = Enum.TextXAlignment.Left
			Title.Text = Toggle.Name
			Title.TextStrokeTransparency = 0
			
			-- // Functions
			local function SetState()
				Toggle.Toggled = not Toggle.Toggled
				if Toggle.Toggled then
					table.insert(Library.ThemeObjects, Inline)
					Inline.BackgroundColor3 = Library.Accent
					if Toggle.Risk then
						Title.TextColor3 = Color3.fromRGB(227, 227, 34)
					else
						Title.TextColor3 = Color3.fromRGB(255,255,255)
					end
				else
					table.remove(Library.ThemeObjects, table.find(Library.ThemeObjects, Inline))
					Inline.BackgroundColor3 = Color3.new(0.1294,0.1294,0.1294)
					if Toggle.Risk then
						Title.TextColor3 = Color3.fromRGB(158, 158, 24)
					else
						Title.TextColor3 = Color3.fromRGB(145,145,145)
					end
				end
				Library.Flags[Toggle.Flag] = Toggle.Toggled
				Toggle.Callback(Toggle.Toggled)
			end
			--
			Library:Connection(NewToggle.MouseButton1Down, SetState)
			Library:Connection(NewToggle.MouseEnter, function()
				if not Toggle.Toggled then
					table.insert(Library.ThemeObjects, Title)
					Title.TextColor3 = Library.Accent
				end
			end)
			--
			Library:Connection(NewToggle.MouseLeave, function()
				if not Toggle.Toggled then
					table.remove(Library.ThemeObjects, table.find(Library.ThemeObjects, Title))
					if Toggle.Risk then
						Title.TextColor3 = Color3.fromRGB(158, 158, 24)
					else
						Title.TextColor3 = Color3.fromRGB(145,145,145)
					end
				else
					table.remove(Library.ThemeObjects, table.find(Library.ThemeObjects, Title))
				end
			end)
			
			function Toggle:Keybind(Properties)
				local Properties = Properties or {}
				local Keybind = {
					Section = self,
					State = (
						Properties.state
							or Properties.State
							or Properties.def
							or Properties.Def
							or Properties.default
							or Properties.Default
							or nil
					),
					Mode = (Properties.mode or Properties.Mode or "Toggle"),
					Callback = (
						Properties.callback
							or Properties.Callback
							or Properties.callBack
							or Properties.CallBack
							or function() end
					),
					Flag = (
						Properties.flag
							or Properties.Flag
							or Properties.pointer
							or Properties.Pointer
							or Library.NextFlag()
					),
					Name = Properties.name or Properties.Name or "Keybind",
					Binding = nil,
				}
				local Key
				local State = false
				--
				local Outline = Instance.new('TextButton', NewToggle)
				local Inline = Instance.new('Frame', Outline)
				local Value = Instance.new('TextLabel', Inline)
				local ModeOutline = Instance.new('Frame', NewToggle)
				local ModeInline = Instance.new('Frame', ModeOutline)
				local UIListLayout = Instance.new('UIListLayout', ModeInline)
				local Hold = Instance.new('TextButton', ModeInline)
				local Toggle = Instance.new('TextButton', ModeInline)
				local Always = Instance.new('TextButton', ModeInline)
				local ListValue = Library.KeyList:NewKey(tostring(Keybind.State):gsub("Enum.KeyCode.", ""), Title.Text, Keybind.Mode)
				--
				Outline.Name = "Outline"
				Outline.Position = UDim2.new(1,0,0.5,0)
				Outline.Size = UDim2.new(0,40,0,12)
				Outline.BackgroundColor3 = Color3.new(0.1765,0.1765,0.1765)
				Outline.BorderColor3 = Color3.new(0.0392,0.0392,0.0392)
				Outline.AnchorPoint = NewVector2(1,0.5)
				Outline.Text = ""
				Outline.AutoButtonColor = false
				--
				Inline.Name = "Inline"
				Inline.Position = UDim2.new(0,1,0,1)
				Inline.Size = UDim2.new(1,-2,1,-2)
				Inline.BackgroundColor3 = Color3.new(0.1294,0.1294,0.1294)
				Inline.BorderSizePixel = 0
				Inline.BorderColor3 = Color3.new(0,0,0)
				--
				Value.Name = "Value"
				Value.Size = UDim2.new(1,0,1,0)
				Value.BackgroundColor3 = Color3.new(1,1,1)
				Value.BackgroundTransparency = 1
				Value.BorderSizePixel = 0
				Value.BorderColor3 = Color3.new(0,0,0)
				Value.Text = "MB2"
				Value.TextColor3 = Color3.new(0.5686,0.5686,0.5686)
				Value.FontFace = Font.new("rbxassetid://12187371840")
				Value.TextSize = Library.FontSize
				Value.TextStrokeTransparency = 0
				--
				ModeOutline.Name = "ModeOutline"
				ModeOutline.Position = UDim2.new(1,65,0.5,0)
				ModeOutline.Size = UDim2.new(0,60,0,12)
				ModeOutline.BackgroundColor3 = Color3.new(0.1765,0.1765,0.1765)
				ModeOutline.BorderColor3 = Color3.new(0.0392,0.0392,0.0392)
				ModeOutline.AnchorPoint = NewVector2(1,0.5)
				ModeOutline.AutomaticSize = Enum.AutomaticSize.Y
				ModeOutline.Visible = false
				--
				ModeInline.Name = "ModeInline"
				ModeInline.Position = UDim2.new(0,1,0,1)
				ModeInline.Size = UDim2.new(1,-2,1,-2)
				ModeInline.BackgroundColor3 = Color3.new(0.1294,0.1294,0.1294)
				ModeInline.BorderSizePixel = 0
				ModeInline.BorderColor3 = Color3.new(0,0,0)
				--
				UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
				--
				Hold.Name = "Hold"
				Hold.Size = UDim2.new(1,0,0,15)
				Hold.BackgroundColor3 = Color3.new(1,1,1)
				Hold.BackgroundTransparency = 1
				Hold.BorderSizePixel = 0
				Hold.BorderColor3 = Color3.new(0,0,0)
				Hold.Text = "Hold"
				Hold.TextColor3 = Keybind.Mode == "Hold" and Color3.new(1,1,1) or Color3.new(0.5686,0.5686,0.5686)
				Hold.AutoButtonColor = false
				Hold.FontFace = Font.new("rbxassetid://12187371840")
				Hold.TextSize = Library.FontSize
				Hold.TextStrokeTransparency = 0
				--
				Toggle.Name = "Toggle"
				Toggle.Size = UDim2.new(1,0,0,15)
				Toggle.BackgroundColor3 = Color3.new(1,1,1)
				Toggle.BackgroundTransparency = 1
				Toggle.BorderSizePixel = 0
				Toggle.BorderColor3 = Color3.new(0,0,0)
				Toggle.Text = "Toggle"
				Toggle.TextColor3 = Keybind.Mode == "Toggle" and Color3.new(1,1,1) or Color3.new(0.5686,0.5686,0.5686)
				Toggle.AutoButtonColor = false
				Toggle.FontFace = Font.new("rbxassetid://12187371840")
				Toggle.TextSize = Library.FontSize
				Toggle.TextStrokeTransparency = 0
				--
				Always.Name = "Always"
				Always.Size = UDim2.new(1,0,0,15)
				Always.BackgroundColor3 = Color3.new(1,1,1)
				Always.BackgroundTransparency = 1
				Always.BorderSizePixel = 0
				Always.BorderColor3 = Color3.new(0,0,0)
				Always.Text = "Always"
				Always.TextColor3 = Keybind.Mode == "Always" and Color3.new(1,1,1) or Color3.new(0.5686,0.5686,0.5686)
				Always.AutoButtonColor = false
				Always.FontFace = Font.new("rbxassetid://12187371840")
				Always.TextSize = Library.FontSize
				Always.TextStrokeTransparency = 0

				-- // Functions
				local function set(newkey)
					if string.find(tostring(newkey), "Enum") then
						if c then
							c:Disconnect()
							if Keybind.Flag then
								Library.Flags[Keybind.Flag] = false
							end
							Keybind.Callback(false)
						end
						if tostring(newkey):find("Enum.KeyCode.") then
							newkey = Enum.KeyCode[tostring(newkey):gsub("Enum.KeyCode.", "")]
						elseif tostring(newkey):find("Enum.UserInputType.") then
							newkey = Enum.UserInputType[tostring(newkey):gsub("Enum.UserInputType.", "")]
						end
						if newkey == Enum.KeyCode.Backspace then
							Key = nil

							local text = "None"

							Value.Text = text
							ListValue:Update(text, Keybind.Name, Keybind.Mode)
						elseif newkey ~= nil then
							Key = newkey

							local text = (Library.Keys[newkey] or tostring(newkey):gsub("Enum.KeyCode.", ""))

							Value.Text = text
							ListValue:Update(text, Keybind.Name, Keybind.Mode)
						end

						Library.Flags[Keybind.Flag .. "_KEY"] = newkey
					elseif table.find({ "Always", "Toggle", "Hold" }, newkey) then
						Library.Flags[Keybind.Flag .. "_KEY STATE"] = newkey
						Keybind.Mode = newkey
						ListValue:Update((Library.Keys[Key] or tostring(Key):gsub("Enum.KeyCode.", "")), Keybind.Name, Keybind.Mode)
						if Keybind.Mode == "Always" then
							State = true
							if Keybind.Flag then
								Library.Flags[Keybind.Flag] = State
							end
							Keybind.Callback(true)
							ListValue:SetVisible(true)
						end
					else
						State = newkey
						if Keybind.Flag then
							Library.Flags[Keybind.Flag] = newkey
						end
						Keybind.Callback(newkey)
					end
				end
				--
				set(Keybind.State)
				set(Keybind.Mode)
				Outline.MouseButton1Click:Connect(function()
					if not Keybind.Binding then

						Value.Text = "..."

						Keybind.Binding = Library:Connection(
							game:GetService("UserInputService").InputBegan,
							function(input, gpe)
								set(
									input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode
										or input.UserInputType
								)
								Library:Disconnect(Keybind.Binding)
								task.wait()
								Keybind.Binding = nil
							end
						)
					end
				end)
				--
				local HoldLoop; 
				Library:Connection(game:GetService("UserInputService").InputBegan, function(inp, Typing)
					if Typing then return end 

					if HoldLoop then 
						HoldLoop:Disconnect() 
					end 
					-- 
					if (inp.KeyCode == Key or inp.UserInputType == Key) and not Keybind.Binding then
						if Keybind.Mode == "Hold" then
							if Keybind.Flag then
								Library.Flags[Keybind.Flag] = true
							end
							HoldLoop = Library:Connection(game:GetService("RunService").RenderStepped, function()
								if Keybind.Callback then
									Keybind.Callback(true)
								end
							end)
							ListValue:SetVisible(true)
						elseif Keybind.Mode == "Toggle" then
							State = not State
							if Keybind.Flag then
								Library.Flags[Keybind.Flag] = State
							end
							Keybind.Callback(State)
							ListValue:SetVisible(State)
						end
					end
				end)
				--
				Library:Connection(game:GetService("UserInputService").InputEnded, function(inp, Typing)
					if Typing then return end 
					if Keybind.Mode == "Hold" then
						if Key ~= "" or Key ~= nil then
							if inp.KeyCode == Key or inp.UserInputType == Key then
								if c then
									c:Disconnect()
									if Keybind.Flag then
										Library.Flags[Keybind.Flag] = false
									end
									if Keybind.Callback then
										Keybind.Callback(false)
									end
									ListValue:SetVisible(false)
								end
							end
						end
					end
				end)
				Library:Connection(Outline.MouseEnter, function()
					Outline.BorderColor3 = Library.Accent
				end)
				--
				Library:Connection(Outline.MouseLeave, function()
					Outline.BorderColor3 = Color3.new(0.0392,0.0392,0.0392)
				end)
				--
				Library:Connection(Outline.MouseButton2Down, function()
					ModeOutline.Visible = not ModeOutline.Visible
				end)
				--
				Library:Connection(Hold.MouseButton1Down, function()
					set("Hold")
					Hold.TextColor3 = Color3.new(1,1,1)
					Toggle.TextColor3 = Color3.fromRGB(145,145,145)
					Always.TextColor3 = Color3.fromRGB(145,145,145)
				end)
				--
				Library:Connection(Toggle.MouseButton1Down, function()
					set("Toggle")
					Hold.TextColor3 = Color3.fromRGB(145,145,145)
					Toggle.TextColor3 = Color3.new(1,1,1)
					Always.TextColor3 = Color3.fromRGB(145,145,145)
				end)
				--
				Library:Connection(Always.MouseButton1Down, function()
					set("Always")
					Hold.TextColor3 = Color3.fromRGB(145,145,145)
					Toggle.TextColor3 = Color3.fromRGB(145,145,145)
					Always.TextColor3 = Color3.new(1,1,1)
				end)
				--
				Library:Connection(game:GetService("UserInputService").InputBegan, function(Input)
					if ModeOutline.Visible and Input.UserInputType == Enum.UserInputType.MouseButton1 then
						if not Library:IsMouseOverFrame(ModeOutline) then
							ModeOutline.Visible = false
						end
					end
				end)
				--
				Library.Flags[Keybind.Flag .. "_KEY"] = Keybind.State
				Library.Flags[Keybind.Flag .. "_KEY STATE"] = Keybind.Mode
				Flags[Keybind.Flag] = set
				Flags[Keybind.Flag .. "_KEY"] = set
				Flags[Keybind.Flag .. "_KEY STATE"] = set
				--
				function Keybind:Set(key)
					set(key)
				end

				-- // Returning
				return Keybind
			end
			
			function Toggle:Colorpicker(Properties)
				local Properties = Properties or {}
				local Colorpicker = {
					State = (
						Properties.state
							or Properties.State
							or Properties.def
							or Properties.Def
							or Properties.default
							or Properties.Default
							or Color3.fromRGB(255, 0, 0)
					),
					Alpha = (
						Properties.alpha
							or Properties.Alpha
							or Properties.transparency
							or Properties.Transparency
							or 1
					),
					Callback = (
						Properties.callback
							or Properties.Callback
							or Properties.callBack
							or Properties.CallBack
							or function() end
					),
					Flag = (
						Properties.flag
							or Properties.Flag
							or Properties.pointer
							or Properties.Pointer
							or Library.NextFlag()
					),
				}
				-- // Functions
				Toggle.Colorpickers = Toggle.Colorpickers + 1
				local colorpickertypes = Library:NewPicker(
					"",
					Colorpicker.State,
					Colorpicker.Alpha,
					NewToggle,
					Toggle.Colorpickers - 1,
					Colorpicker.Flag,
					Colorpicker.Callback
				)

				function Colorpicker:Set(color)
					colorpickertypes:set(color)
				end

				-- // Returning
				return Colorpicker
			end
			
			-- // Misc Functions
			function Toggle.Set(bool)
				bool = type(bool) == "boolean" and bool or false
				if Toggle.Toggled ~= bool then
					SetState()
				end
			end
			Toggle.Set(Toggle.State)
			Library.Flags[Toggle.Flag] = Toggle.State
			Flags[Toggle.Flag] = Toggle.Set

			-- // Returning
			return Toggle
		end
		--
		function Sections:Slider(Properties)
			if not Properties then
				Properties = {}
			end
			--
			local Slider = {
				Window = self.Window,
				Page = self.Page,
				Section = self,
				Name = Properties.Name or nil,
				Min = (Properties.min or Properties.Min or Properties.minimum or Properties.Minimum or 0),
				State = (
					Properties.state
						or Properties.State
						or Properties.def
						or Properties.Def
						or Properties.default
						or Properties.Default
						or 10
				),
				Max = (Properties.max or Properties.Max or Properties.maximum or Properties.Maximum or 100),
				Sub = (
					Properties.suffix
						or Properties.Suffix
						or Properties.ending
						or Properties.Ending
						or Properties.prefix
						or Properties.Prefix
						or Properties.measurement
						or Properties.Measurement
						or ""
				),
				Decimals = (Properties.decimals or Properties.Decimals or 1),
				Callback = (
					Properties.callback
						or Properties.Callback
						or Properties.callBack
						or Properties.CallBack
						or function() end
				),
				Flag = (
					Properties.flag
						or Properties.Flag
						or Properties.pointer
						or Properties.Pointer
						or Library.NextFlag()
				),
				Disabled = (Properties.Disabled or Properties.disable or nil),
			}
			local TextValue = ("[value]" .. Slider.Sub)
			--
			local NewSlider = Instance.new('TextButton', Slider.Section.Elements.SectionContent)
			local Outline = Instance.new('Frame', NewSlider)
			local Inline = Instance.new('Frame', Outline)
			local Accent = Instance.new('TextButton', Inline)
			local Add = Instance.new('TextButton', Outline)
			local Subtract = Instance.new('TextButton', Outline)
			local Title = Instance.new('TextLabel', NewSlider)
			local Value = Instance.new('TextLabel', NewSlider)
			--
			NewSlider.Name = "NewSlider"
			NewSlider.Size = UDim2.new(1,0,0,22)
			NewSlider.BackgroundColor3 = Color3.new(1,1,1)
			NewSlider.BackgroundTransparency = 1
			NewSlider.BorderSizePixel = 0
			NewSlider.BorderColor3 = Color3.new(0,0,0)
			NewSlider.Text = ""
			NewSlider.TextColor3 = Color3.new(0,0,0)
			NewSlider.AutoButtonColor = false
			NewSlider.FontFace = Font.new("rbxassetid://12187371840")
			NewSlider.TextSize = 14
			--
			Outline.Name = "Outline"
			Outline.Position = UDim2.new(0,15,1,0)
			Outline.Size = UDim2.new(1,-30,0,7)
			Outline.BackgroundColor3 = Color3.new(0.1765,0.1765,0.1765)
			Outline.BorderColor3 = Color3.new(0.0392,0.0392,0.0392)
			Outline.AnchorPoint = NewVector2(0,1)
			--
			Inline.Name = "Inline"
			Inline.Position = UDim2.new(0,1,0,1)
			Inline.Size = UDim2.new(1,-2,1,-2)
			Inline.BackgroundColor3 = Color3.new(0.1294,0.1294,0.1294)
			Inline.BorderSizePixel = 0
			Inline.BorderColor3 = Color3.new(0,0,0)
			--
			Accent.Name = "Accent"
			Accent.Size = UDim2.new(0,0,1,0)
			Accent.BackgroundColor3 = Library.Accent
			Accent.BorderSizePixel = 0
			Accent.BorderColor3 = Color3.new(0,0,0)
			Accent.Text = ""
			Accent.TextColor3 = Color3.new(0,0,0)
			Accent.AutoButtonColor = false
			Accent.FontFace = Font.new("rbxassetid://12187371840")
			Accent.TextSize = 14
			table.insert(Library.ThemeObjects, Accent)
			table.insert(Library.ThemeObjects, Accent)
			--
			Add.Name = "Add"
			Add.Position = UDim2.new(1,5,0.5,0)
			Add.Size = UDim2.new(0,10,0,10)
			Add.BackgroundColor3 = Color3.new(1,1,1)
			Add.BackgroundTransparency = 1
			Add.BorderSizePixel = 0
			Add.BorderColor3 = Color3.new(0,0,0)
			Add.AnchorPoint = NewVector2(0,0.5)
			Add.Text = "+"
			Add.TextColor3 = Color3.new(0.5686,0.5686,0.5686)
			Add.AutoButtonColor = false
			Add.FontFace = Font.new("rbxassetid://12187371840")
			Add.TextSize = Library.FontSize
			Add.TextStrokeTransparency = 0
			--
			Subtract.Name = "Subtract"
			Subtract.Position = UDim2.new(0,-15,0.5,0)
			Subtract.Size = UDim2.new(0,10,0,10)
			Subtract.BackgroundColor3 = Color3.new(1,1,1)
			Subtract.BackgroundTransparency = 1
			Subtract.BorderSizePixel = 0
			Subtract.BorderColor3 = Color3.new(0,0,0)
			Subtract.AnchorPoint = NewVector2(0,0.5)
			Subtract.Text = "-"
			Subtract.TextColor3 = Color3.new(0.5686,0.5686,0.5686)
			Subtract.AutoButtonColor = false
			Subtract.FontFace = Font.new("rbxassetid://12187371840")
			Subtract.TextSize = Library.FontSize
			Subtract.TextStrokeTransparency = 0
			--
			Title.Name = "Title"
			Title.Position = UDim2.new(0,15,0,0)
			Title.Size = UDim2.new(1,0,0,10)
			Title.BackgroundColor3 = Color3.new(1,1,1)
			Title.BackgroundTransparency = 1
			Title.BorderSizePixel = 0
			Title.BorderColor3 = Color3.new(0,0,0)
			Title.TextColor3 = Color3.new(0.5686,0.5686,0.5686)
			Title.FontFace = Font.new("rbxassetid://12187371840")
			Title.TextSize = Library.FontSize
			Title.TextXAlignment = Enum.TextXAlignment.Left
			Title.Text = Slider.Name
			Title.TextStrokeTransparency = 0
			--
			Value.Name = "Value"
			Value.Position = UDim2.new(0,15,0,0)
			Value.Size = UDim2.new(1,-30,0,10)
			Value.BackgroundColor3 = Color3.new(1,1,1)
			Value.BackgroundTransparency = 1
			Value.BorderSizePixel = 0
			Value.BorderColor3 = Color3.new(0,0,0)
			Value.TextColor3 = Color3.new(1,1,1)
			Value.FontFace = Font.new("rbxassetid://12187371840")
			Value.TextSize = Library.FontSize
			Value.TextXAlignment = Enum.TextXAlignment.Right
			Value.TextStrokeTransparency = 0
			
			-- // Functions
			local Sliding = false
			local Val = Slider.State
			local function Set(value)
				value = math.clamp(Library:Round(value, Slider.Decimals), Slider.Min, Slider.Max)

				local sizeX = ((value - Slider.Min) / (Slider.Max - Slider.Min))
				Accent.Size = UDim2.new(sizeX, 0, 1, 0)
				--Value.Text = TextValue:gsub("%[value%]", string.format("%.14g", value))
				if Slider.Disabled and value == Slider.Min then
					Value.Text = Slider.Disabled
				else
					Value.Text = TextValue:gsub("%[value%]", string.format("%.14g", value))
				end
				Val = value

				Library.Flags[Slider.Flag] = value
				Slider.Callback(value)
			end				
			--
			local function Slide(input)
				local sizeX = (input.Position.X - Outline.AbsolutePosition.X) / Outline.AbsoluteSize.X
				local value = ((Slider.Max - Slider.Min) * sizeX) + Slider.Min
				Set(value)
			end
			--
			Library:Connection(NewSlider.InputBegan, function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					Sliding = true
					Slide(input)
				end
			end)
			Library:Connection(NewSlider.InputEnded, function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					Sliding = false
				end
			end)
			Library:Connection(Accent.InputBegan, function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					Sliding = true
					Slide(input)
				end
			end)
			Library:Connection(Accent.InputEnded, function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					Sliding = false
				end
			end)
			Library:Connection(game:GetService("UserInputService").InputChanged, function(input)
				if input.UserInputType == Enum.UserInputType.MouseMovement then
					if Sliding then
						Slide(input)
					end
				end
			end)
			Library:Connection(NewSlider.MouseEnter, function()
				table.insert(Library.ThemeObjects, Title)
				Title.TextColor3 = Library.Accent
			end)
			--
			Library:Connection(NewSlider.MouseLeave, function()
				table.remove(Library.ThemeObjects, table.find(Library.ThemeObjects, Title))
				Title.TextColor3 = Color3.new(0.5686,0.5686,0.5686)
			end)
			--
			Library:Connection(Add.MouseButton1Down, function()
				Set(Val + 1)
			end)
			--
			Library:Connection(Subtract.MouseButton1Down, function()
				Set(Val - 1)
			end)
			--
			function Slider:Set(Value)
				Set(Value)
			end
			-- 
			function Slider:SetVisible(Bool) 
				NewSlider.Visible = Bool
			end 
			--
			Flags[Slider.Flag] = Set
			Library.Flags[Slider.Flag] = Slider.State
			Set(Slider.State)

			-- // Returning
			return Slider
		end
		--
		function Sections:Dropdown(Properties)
			local Properties = Properties or {};
			local Dropdown = {
				Window = self.Window,
				Page = self.Page,
				Section = self,
				Open = false,
				Name = Properties.Name or Properties.name or nil,
				Options = (Properties.options or Properties.Options or Properties.values or Properties.Values or {
					"1",
					"2",
					"3",
				}),
				Max = (Properties.Max or Properties.max or nil),
				State = (
					Properties.state
						or Properties.State
						or Properties.def
						or Properties.Def
						or Properties.default
						or Properties.Default
						or nil
				),
				Callback = (
					Properties.callback
						or Properties.Callback
						or Properties.callBack
						or Properties.CallBack
						or function() end
				),
				Flag = (
					Properties.flag
						or Properties.Flag
						or Properties.pointer
						or Properties.Pointer
						or Library.NextFlag()
				),
				OptionInsts = {},
			}
			--
			local NewDrop = Instance.new('Frame', Dropdown.Section.Elements.SectionContent)
			local Outline = Instance.new('TextButton', NewDrop)
			local Inline = Instance.new('Frame', Outline)
			local Value = Instance.new('TextLabel', Inline)
			local Icon = Instance.new('TextLabel', Inline)
			local Title = Instance.new('TextLabel', NewDrop)
			local ContainerOutline = Instance.new('Frame', NewDrop)
			local ContainerInline = Instance.new('Frame', ContainerOutline)
			local UIListLayout = Instance.new('UIListLayout', ContainerInline)
			--
			NewDrop.Name = "NewDrop"
			NewDrop.Size = UDim2.new(1,0,0,30)
			NewDrop.BackgroundColor3 = Color3.new(1,1,1)
			NewDrop.BackgroundTransparency = 1
			NewDrop.BorderSizePixel = 0
			NewDrop.BorderColor3 = Color3.new(0,0,0)
			--
			Outline.Name = "Outline"
			Outline.Position = UDim2.new(0,15,1,0)
			Outline.Size = UDim2.new(1,-30,0,16)
			Outline.BackgroundColor3 = Color3.new(0.1765,0.1765,0.1765)
			Outline.BorderColor3 = Color3.new(0.0392,0.0392,0.0392)
			Outline.AnchorPoint = NewVector2(0,1)
			Outline.Text = ""
			Outline.AutoButtonColor = false
			--
			Inline.Name = "Inline"
			Inline.Position = UDim2.new(0,1,0,1)
			Inline.Size = UDim2.new(1,-2,1,-2)
			Inline.BackgroundColor3 = Color3.new(0.1294,0.1294,0.1294)
			Inline.BorderSizePixel = 0
			Inline.BorderColor3 = Color3.new(0,0,0)
			--
			Value.Name = "Value"
			Value.Position = UDim2.new(0,2,0,0)
			Value.Size = UDim2.new(1,-30,1,0)
			Value.BackgroundColor3 = Color3.new(1,1,1)
			Value.BackgroundTransparency = 1
			Value.BorderSizePixel = 0
			Value.BorderColor3 = Color3.new(0,0,0)
			Value.TextColor3 = Color3.new(0.5686,0.5686,0.5686)
			Value.FontFace = Font.new("rbxassetid://12187371840")
			Value.TextSize = Library.FontSize
			Value.TextXAlignment = Enum.TextXAlignment.Left
			Value.TextStrokeTransparency = 0
			Value.TextWrapped = true
			--
			Icon.Name = "Icon"
			Icon.Position = UDim2.new(0,-5,0,0)
			Icon.Size = UDim2.new(1,0,1,0)
			Icon.BackgroundColor3 = Color3.new(1,1,1)
			Icon.BackgroundTransparency = 1
			Icon.BorderSizePixel = 0
			Icon.BorderColor3 = Color3.new(0,0,0)
			Icon.Text = "+"
			Icon.TextColor3 = Color3.new(0.5686,0.5686,0.5686)
			Icon.FontFace = Font.new("rbxassetid://12187371840")
			Icon.TextSize = Library.FontSize
			Icon.TextXAlignment = Enum.TextXAlignment.Right
			Icon.TextStrokeTransparency = 0
			--
			Title.Name = "Title"
			Title.Position = UDim2.new(0,15,0,0)
			Title.Size = UDim2.new(1,0,0,10)
			Title.BackgroundColor3 = Color3.new(1,1,1)
			Title.BackgroundTransparency = 1
			Title.BorderSizePixel = 0
			Title.BorderColor3 = Color3.new(0,0,0)
			Title.TextColor3 = Color3.new(0.5686,0.5686,0.5686)
			Title.FontFace = Font.new("rbxassetid://12187371840")
			Title.TextSize = Library.FontSize
			Title.TextXAlignment = Enum.TextXAlignment.Left
			Title.TextStrokeTransparency = 0
			Title.Text = Dropdown.Name
			--
			ContainerOutline.Name = "ContainerOutline"
			ContainerOutline.Position = UDim2.new(0,15,1,2)
			ContainerOutline.Size = UDim2.new(1,-30,0,10)
			ContainerOutline.BackgroundColor3 = Color3.new(0.1765,0.1765,0.1765)
			ContainerOutline.BorderColor3 = Color3.new(0.0392,0.0392,0.0392)
			ContainerOutline.Visible = false
			ContainerOutline.AutomaticSize = Enum.AutomaticSize.Y
			ContainerOutline.ZIndex = 5
			--
			ContainerInline.Name = "ContainerInline"
			ContainerInline.Position = UDim2.new(0,1,0,1)
			ContainerInline.Size = UDim2.new(1,-2,1,-2)
			ContainerInline.BackgroundColor3 = Color3.new(0.1294,0.1294,0.1294)
			ContainerInline.BorderSizePixel = 0
			ContainerInline.BorderColor3 = Color3.new(0,0,0)
			ContainerInline.ZIndex = 6;
			--
			UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
			
			-- // Connections
			Library:Connection(Outline.MouseButton1Down, function()
				ContainerOutline.Visible = not ContainerOutline.Visible
				if ContainerOutline.Visible then
					NewDrop.ZIndex = 2
					Icon.Text = "-"
				else
					NewDrop.ZIndex = 1
					Icon.Text = "+"
				end
			end)
			Library:Connection(game:GetService("UserInputService").InputBegan, function(Input)
				if ContainerOutline.Visible and Input.UserInputType == Enum.UserInputType.MouseButton1 then
					if not Library:IsMouseOverFrame(ContainerOutline) and not Library:IsMouseOverFrame(NewDrop) then
						ContainerOutline.Visible = false
						NewDrop.ZIndex = 1
						Icon.Text = "+"
					end
				end
			end)
			Library:Connection(NewDrop.MouseEnter, function()
				Outline.BorderColor3 = Library.Accent
				table.insert(Library.ThemeObjects, Title)
				Title.TextColor3 = Library.Accent
			end)
			--
			Library:Connection(NewDrop.MouseLeave, function()
				Outline.BorderColor3 = Color3.new(0.0392,0.0392,0.0392)
				table.remove(Library.ThemeObjects, table.find(Library.ThemeObjects, Title))
				Title.TextColor3 = Color3.new(0.5686,0.5686,0.5686)
			end)
			--
			local chosen = Dropdown.Max and {} or nil
			--
			local function handleoptionclick(option, button, text)
				button.MouseButton1Down:Connect(function()
					if Dropdown.Max then
						if table.find(chosen, option) then
							table.remove(chosen, table.find(chosen, option))

							local textchosen = {}
							local cutobject = false

							for _, opt in next, chosen do
								table.insert(textchosen, opt)
							end

							Value.Text = #chosen == 0 and "" or table.concat(textchosen, ",") .. (cutobject and ", ..." or "")

							text.TextColor3 = Color3.fromRGB(145,145,145)

							Library.Flags[Dropdown.Flag] = chosen
							Dropdown.Callback(chosen)
						else
							if #chosen == Dropdown.Max then
								Dropdown.OptionInsts[chosen[1]].text.TextColor3 = Color3.fromRGB(145,145,145)
								table.remove(chosen, 1)
							end

							table.insert(chosen, option)

							local textchosen = {}
							local cutobject = false

							for _, opt in next, chosen do
								table.insert(textchosen, opt)
							end

							Value.Text = #chosen == 0 and "" or table.concat(textchosen, ",") .. (cutobject and ", ..." or "")

							text.TextColor3 = Color3.fromRGB(255,255,255)

							Library.Flags[Dropdown.Flag] = chosen
							Dropdown.Callback(chosen)
						end
					else
						for opt, tbl in next, Dropdown.OptionInsts do
							if opt ~= option then
								tbl.text.TextColor3 = Color3.fromRGB(145,145,145)
							end
						end
						chosen = option
						Value.Text = option
						text.TextColor3 = Color3.fromRGB(255,255,255)
						Library.Flags[Dropdown.Flag] = option
						Dropdown.Callback(option)
					end
				end)
			end
			--
			local function createoptions(tbl)
				for _, option in next, tbl do
					Dropdown.OptionInsts[option] = {}
					local NewOption = Instance.new('TextButton', ContainerInline)
					local OptionName = Instance.new('TextLabel', NewOption)
					NewOption.Name = "NewOption"
					NewOption.Size = UDim2.new(1,0,0,15)
					NewOption.BackgroundColor3 = Color3.new(1,1,1)
					NewOption.BackgroundTransparency = 1
					NewOption.BorderSizePixel = 0
					NewOption.BorderColor3 = Color3.new(0,0,0)
					NewOption.Text = ""
					NewOption.TextColor3 = Color3.new(0,0,0)
					NewOption.AutoButtonColor = false
					NewOption.FontFace = Font.new("rbxassetid://12187371840")
					NewOption.TextSize = 14
					NewOption.ZIndex = 7;
					Dropdown.OptionInsts[option].button = NewOption
					--
					OptionName.Name = "OptionName"
					OptionName.Position = UDim2.new(0,2,0,0)
					OptionName.Size = UDim2.new(1,0,1,0)
					OptionName.BackgroundColor3 = Color3.new(1,1,1)
					OptionName.BackgroundTransparency = 1
					OptionName.BorderSizePixel = 0
					OptionName.BorderColor3 = Color3.new(0,0,0)
					OptionName.Text = option
					OptionName.TextColor3 = Color3.new(0.5686,0.5686,0.5686)
					OptionName.FontFace = Font.new("rbxassetid://12187371840")
					OptionName.TextSize = Library.FontSize
					OptionName.TextXAlignment = Enum.TextXAlignment.Left
					OptionName.TextStrokeTransparency = 0
					OptionName.ZIndex = 8;
					Dropdown.OptionInsts[option].text = OptionName

					handleoptionclick(option, NewOption, OptionName)
				end
			end
			createoptions(Dropdown.Options)
			--
			local set
			set = function(option)
				if Dropdown.Max then
					table.clear(chosen)
					option = type(option) == "table" and option or {}

					for opt, tbl in next, Dropdown.OptionInsts do
						if not table.find(option, opt) then
							tbl.text.TextColor3 = Color3.fromRGB(145,145,145)
						end
					end

					for i, opt in next, option do
						if table.find(Dropdown.Options, opt) and #chosen < Dropdown.Max then
							table.insert(chosen, opt)
							Dropdown.OptionInsts[opt].text.TextColor3 = Color3.fromRGB(255,255,255)
						end
					end

					local textchosen = {}
					local cutobject = false

					for _, opt in next, chosen do
						table.insert(textchosen, opt)
					end

					Value.Text = #chosen == 0 and "" or table.concat(textchosen, ",") .. (cutobject and ", ..." or "")

					Library.Flags[Dropdown.Flag] = chosen
					Dropdown.Callback(chosen)
				end
			end
			--
			function Dropdown:Set(option)
				if Dropdown.Max then
					set(option)
				else
					for opt, tbl in next, Dropdown.OptionInsts do
						if opt ~= option then
							tbl.text.TextColor3 = Color3.fromRGB(145,145,145)
						end
					end
					if table.find(Dropdown.Options, option) then
						chosen = option
						Value.Text = option
						Dropdown.OptionInsts[option].text.TextColor3 = Color3.fromRGB(255,255,255)
						Library.Flags[Dropdown.Flag] = chosen
						Dropdown.Callback(chosen)
					else
						chosen = nil
						Value.Text = ""
						Library.Flags[Dropdown.Flag] = chosen
						Dropdown.Callback(chosen)
					end
				end
			end
			--
			function Dropdown:Refresh(tbl)
				for _, opt in next, Dropdown.OptionInsts do
					coroutine.wrap(function()
						opt.button:Destroy()
					end)()
				end
				table.clear(Dropdown.OptionInsts)

				createoptions(tbl)

				if Dropdown.Max then
					table.clear(chosen)
				else
					chosen = nil
				end

				Library.Flags[Dropdown.Flag] = chosen
				Dropdown.Callback(chosen)
			end

			-- // Returning
			if Dropdown.Max then
				Flags[Dropdown.Flag] = set
			else
				Flags[Dropdown.Flag] = Dropdown
			end
			Dropdown:Set(Dropdown.State)
			function Dropdown:SetVisible(Bool) 
				NewDrop.Visible = Bool 
			end 
			return Dropdown
		end
		--
		function Sections:Keybind(Properties)
			local Properties = Properties or {}
			local Keybind = {
				Section = self,
				Name = Properties.name or Properties.Name or "Keybind",
				State = (
					Properties.state
						or Properties.State
						or Properties.def
						or Properties.Def
						or Properties.default
						or Properties.Default
						or nil
				),
				Mode = (Properties.mode or Properties.Mode or "Toggle"),
				UseKey = (Properties.UseKey or false),
				Ignore = (Properties.ignore or Properties.Ignore or false),
				Callback = (
					Properties.callback
						or Properties.Callback
						or Properties.callBack
						or Properties.CallBack
						or function() end
				),
				Flag = (
					Properties.flag
						or Properties.Flag
						or Properties.pointer
						or Properties.Pointer
						or Library.NextFlag()
				),
				Binding = nil,
			}
			local Key
			local State = false
			--
			local NewKey = Instance.new('Frame', Keybind.Section.Elements.SectionContent)
			local Outline = Instance.new('TextButton', NewKey)
			local Inline = Instance.new('Frame', Outline)
			local Value = Instance.new('TextLabel', Inline)
			local Title = Instance.new('TextLabel', NewKey)
			local ModeOutline = Instance.new('Frame', NewKey)
			local ModeInline = Instance.new('Frame', ModeOutline)
			local UIListLayout = Instance.new('UIListLayout', ModeInline)
			local Hold = Instance.new('TextButton', ModeInline)
			local Toggle = Instance.new('TextButton', ModeInline)
			local Always = Instance.new('TextButton', ModeInline)
			local ListValue = Library.KeyList:NewKey(tostring(Keybind.State):gsub("Enum.KeyCode.", ""), Keybind.Name, Keybind.Mode)
			--
			NewKey.Name = "NewKey"
			NewKey.Size = UDim2.new(1,0,0,12)
			NewKey.BackgroundColor3 = Color3.new(1,1,1)
			NewKey.BackgroundTransparency = 1
			NewKey.BorderSizePixel = 0
			NewKey.BorderColor3 = Color3.new(0,0,0)
			--
			Outline.Name = "Outline"
			Outline.Position = UDim2.new(1,0,0.5,0)
			Outline.Size = UDim2.new(0,40,0,12)
			Outline.BackgroundColor3 = Color3.new(0.1765,0.1765,0.1765)
			Outline.BorderColor3 = Color3.new(0.0392,0.0392,0.0392)
			Outline.AnchorPoint = NewVector2(1,0.5)
			Outline.Text = ""
			Outline.AutoButtonColor = false
			--
			Inline.Name = "Inline"
			Inline.Position = UDim2.new(0,1,0,1)
			Inline.Size = UDim2.new(1,-2,1,-2)
			Inline.BackgroundColor3 = Color3.new(0.1294,0.1294,0.1294)
			Inline.BorderSizePixel = 0
			Inline.BorderColor3 = Color3.new(0,0,0)
			--
			Value.Name = "Value"
			Value.Size = UDim2.new(1,0,1,0)
			Value.BackgroundColor3 = Color3.new(1,1,1)
			Value.BackgroundTransparency = 1
			Value.BorderSizePixel = 0
			Value.BorderColor3 = Color3.new(0,0,0)
			Value.Text = "MB2"
			Value.TextColor3 = Color3.new(0.5686,0.5686,0.5686)
			Value.FontFace = Font.new("rbxassetid://12187371840")
			Value.TextSize = Library.FontSize
			Value.TextStrokeTransparency = 0
			--
			Title.Name = "Title"
			Title.Position = UDim2.new(0,15,0,0)
			Title.Size = UDim2.new(1,0,0,10)
			Title.BackgroundColor3 = Color3.new(1,1,1)
			Title.BackgroundTransparency = 1
			Title.BorderSizePixel = 0
			Title.BorderColor3 = Color3.new(0,0,0)
			Title.TextColor3 = Color3.new(0.5686,0.5686,0.5686)
			Title.FontFace = Font.new("rbxassetid://12187371840")
			Title.TextSize = Library.FontSize
			Title.TextXAlignment = Enum.TextXAlignment.Left
			Title.Text = Keybind.Name
			Title.TextStrokeTransparency = 0
			--
			ModeOutline.Name = "ModeOutline"
			ModeOutline.Position = UDim2.new(1,65,0.5,0)
			ModeOutline.Size = UDim2.new(0,60,0,12)
			ModeOutline.BackgroundColor3 = Color3.new(0.1765,0.1765,0.1765)
			ModeOutline.BorderColor3 = Color3.new(0.0392,0.0392,0.0392)
			ModeOutline.AnchorPoint = NewVector2(1,0.5)
			ModeOutline.AutomaticSize = Enum.AutomaticSize.Y
			ModeOutline.Visible = false
			--
			ModeInline.Name = "ModeInline"
			ModeInline.Position = UDim2.new(0,1,0,1)
			ModeInline.Size = UDim2.new(1,-2,1,-2)
			ModeInline.BackgroundColor3 = Color3.new(0.1294,0.1294,0.1294)
			ModeInline.BorderSizePixel = 0
			ModeInline.BorderColor3 = Color3.new(0,0,0)
			--
			UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
			--
			Hold.Name = "Hold"
			Hold.Size = UDim2.new(1,0,0,15)
			Hold.BackgroundColor3 = Color3.new(1,1,1)
			Hold.BackgroundTransparency = 1
			Hold.BorderSizePixel = 0
			Hold.BorderColor3 = Color3.new(0,0,0)
			Hold.Text = "Hold"
			Hold.TextColor3 = Keybind.Mode == "Hold" and Color3.new(1,1,1) or Color3.new(0.5686,0.5686,0.5686)
			Hold.AutoButtonColor = false
			Hold.FontFace = Font.new("rbxassetid://12187371840")
			Hold.TextSize = Library.FontSize
			Hold.TextStrokeTransparency = 0
			--
			Toggle.Name = "Toggle"
			Toggle.Size = UDim2.new(1,0,0,15)
			Toggle.BackgroundColor3 = Color3.new(1,1,1)
			Toggle.BackgroundTransparency = 1
			Toggle.BorderSizePixel = 0
			Toggle.BorderColor3 = Color3.new(0,0,0)
			Toggle.Text = "Toggle"
			Toggle.TextColor3 = Keybind.Mode == "Toggle" and Color3.new(1,1,1) or Color3.new(0.5686,0.5686,0.5686)
			Toggle.AutoButtonColor = false
			Toggle.FontFace = Font.new("rbxassetid://12187371840")
			Toggle.TextSize = Library.FontSize
			Toggle.TextStrokeTransparency = 0
			--
			Always.Name = "Always"
			Always.Size = UDim2.new(1,0,0,15)
			Always.BackgroundColor3 = Color3.new(1,1,1)
			Always.BackgroundTransparency = 1
			Always.BorderSizePixel = 0
			Always.BorderColor3 = Color3.new(0,0,0)
			Always.Text = "Always"
			Always.TextColor3 = Keybind.Mode == "Always" and Color3.new(1,1,1) or Color3.new(0.5686,0.5686,0.5686)
			Always.AutoButtonColor = false
			Always.FontFace = Font.new("rbxassetid://12187371840")
			Always.TextSize = Library.FontSize
			Always.TextStrokeTransparency = 0
			
			-- // Functions
			local function set(newkey)
				if string.find(tostring(newkey), "Enum") then
					if c then
						c:Disconnect()
						if Keybind.Flag then
							Library.Flags[Keybind.Flag] = false
						end
						Keybind.Callback(false)
					end
					if tostring(newkey):find("Enum.KeyCode.") then
						newkey = Enum.KeyCode[tostring(newkey):gsub("Enum.KeyCode.", "")]
					elseif tostring(newkey):find("Enum.UserInputType.") then
						newkey = Enum.UserInputType[tostring(newkey):gsub("Enum.UserInputType.", "")]
					end
					if newkey == Enum.KeyCode.Backspace then
						Key = nil
						if Keybind.UseKey then
							if Keybind.Flag then
								Library.Flags[Keybind.Flag] = Key
							end
							Keybind.Callback(Key)
						end
						local text = "None"

						Value.Text = text
						ListValue:Update(text, Keybind.Name, Keybind.Mode)
					elseif newkey ~= nil then
						Key = newkey
						if Keybind.UseKey then
							if Keybind.Flag then
								Library.Flags[Keybind.Flag] = Key
							end
							Keybind.Callback(Key)
						end
						local text = (Library.Keys[newkey] or tostring(newkey):gsub("Enum.KeyCode.", ""))

						Value.Text = text
						ListValue:Update(text, Keybind.Name, Keybind.Mode)
					end

					Library.Flags[Keybind.Flag .. "_KEY"] = newkey
				elseif table.find({ "Always", "Toggle", "Hold" }, newkey) then
					if not Keybind.UseKey then
						Library.Flags[Keybind.Flag .. "_KEY STATE"] = newkey
						Keybind.Mode = newkey
						ListValue:Update((Library.Keys[Key] or tostring(Key):gsub("Enum.KeyCode.", "")), Toggle.Name, Keybind.Mode)
						if Keybind.Mode == "Always" then
							State = true
							if Keybind.Flag then
								Library.Flags[Keybind.Flag] = State
							end
							Keybind.Callback(true)
							ListValue:SetVisible(true)
						end
					end
				else
					State = newkey
					if Keybind.Flag then
						Library.Flags[Keybind.Flag] = newkey
					end
					Keybind.Callback(newkey)
				end
			end
			--
			set(Keybind.State)
			set(Keybind.Mode)
			Outline.MouseButton1Click:Connect(function()
				if not Keybind.Binding then

					Value.Text = "..."

					Keybind.Binding = Library:Connection(
						game:GetService("UserInputService").InputBegan,
						function(input, gpe)
							set(
								input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode
									or input.UserInputType
							)
							Library:Disconnect(Keybind.Binding)
							task.wait()
							Keybind.Binding = nil
						end
					)
				end
			end)
			--
			Library:Connection(game:GetService("UserInputService").InputBegan, function(inp, Chatting)
				if not Chatting then 
					if (inp.KeyCode == Key or inp.UserInputType == Key) and not Keybind.Binding and not Keybind.UseKey then
						if Keybind.Mode == "Hold" then
							if Keybind.Flag then
								Library.Flags[Keybind.Flag] = true
							end
							c = Library:Connection(game:GetService("RunService").RenderStepped, function()
								if Keybind.Callback then
									Keybind.Callback(true)
								end
							end)
							ListValue:SetVisible(true)
						elseif Keybind.Mode == "Toggle" then
							State = not State
							if Keybind.Flag then
								Library.Flags[Keybind.Flag] = State
							end
							Keybind.Callback(State)
							ListValue:SetVisible(State)
						end
					end 
				end 
			end)
			--
			Library:Connection(game:GetService("UserInputService").InputEnded, function(inp, Chatting)
				if not Chatting then 
					if Keybind.Mode == "Hold" and not Keybind.UseKey then
						if Key ~= "" or Key ~= nil then
							if inp.KeyCode == Key or inp.UserInputType == Key then
								if c then
									c:Disconnect()
									if Keybind.Flag then
										Library.Flags[Keybind.Flag] = false
									end
									if Keybind.Callback then
										Keybind.Callback(false)
									end
									ListValue:SetVisible(false)
								end
							end
						end
					end
				end 
			end)
			Library:Connection(Outline.MouseEnter, function()
				Outline.BorderColor3 = Library.Accent
			end)
			--
			Library:Connection(Outline.MouseLeave, function()
				Outline.BorderColor3 = Color3.new(0.0392,0.0392,0.0392)
			end)
			--
			Library:Connection(Outline.MouseButton2Down, function()
				ModeOutline.Visible = not ModeOutline.Visible
			end)
			--
			Library:Connection(NewKey.MouseEnter, function()
				table.insert(Library.ThemeObjects, Title)
				Title.TextColor3 = Library.Accent
			end)
			--
			Library:Connection(NewKey.MouseLeave, function()
				table.remove(Library.ThemeObjects, table.find(Library.ThemeObjects, Title))
				Title.TextColor3 = Color3.new(0.5686,0.5686,0.5686)
			end)
			--
			Library:Connection(Hold.MouseButton1Down, function()
				set("Hold")
				Hold.TextColor3 = Color3.new(1,1,1)
				Toggle.TextColor3 = Color3.fromRGB(145,145,145)
				Always.TextColor3 = Color3.fromRGB(145,145,145)
			end)
			--
			Library:Connection(Toggle.MouseButton1Down, function()
				set("Toggle")
				Hold.TextColor3 = Color3.fromRGB(145,145,145)
				Toggle.TextColor3 = Color3.new(1,1,1)
				Always.TextColor3 = Color3.fromRGB(145,145,145)
			end)
			--
			Library:Connection(Always.MouseButton1Down, function()
				set("Always")
				Hold.TextColor3 = Color3.fromRGB(145,145,145)
				Toggle.TextColor3 = Color3.fromRGB(145,145,145)
				Always.TextColor3 = Color3.new(1,1,1)
			end)
			--
			Library:Connection(game:GetService("UserInputService").InputBegan, function(Input, Chatting)
				if ModeOutline.Visible and Input.UserInputType == Enum.UserInputType.MouseButton1 then
					if not Library:IsMouseOverFrame(ModeOutline) then
						ModeOutline.Visible = false
					end
				end
			end)
			--
			Library.Flags[Keybind.Flag .. "_KEY"] = Keybind.State
			Library.Flags[Keybind.Flag .. "_KEY STATE"] = Keybind.Mode
			Flags[Keybind.Flag] = set
			Flags[Keybind.Flag .. "_KEY"] = set
			Flags[Keybind.Flag .. "_KEY STATE"] = set
			--
			function Keybind:Set(key)
				set(key)
			end

			-- // Returning
			return Keybind
		end
		--
		function Sections:Colorpicker(Properties)
			local Properties = Properties or {}
			local Colorpicker = {
				Window = self.Window,
				Page = self.Page,
				Section = self,
				Name = (Properties.Name or "Colorpicker"),
				State = (
					Properties.state
						or Properties.State
						or Properties.def
						or Properties.Def
						or Properties.default
						or Properties.Default
						or Color3.fromRGB(255, 0, 0)
				),
				Alpha = (
					Properties.alpha
						or Properties.Alpha
						or Properties.transparency
						or Properties.Transparency
						or 1
				),
				Callback = (
					Properties.callback
						or Properties.Callback
						or Properties.callBack
						or Properties.CallBack
						or function() end
				),
				Flag = (
					Properties.flag
						or Properties.Flag
						or Properties.pointer
						or Properties.Pointer
						or Library.NextFlag()
				),
				Colorpickers = 0,
			}
			--
			local NewToggle = Instance.new('Frame', Colorpicker.Section.Elements.SectionContent)
			local TextLabel = Instance.new('TextLabel', NewToggle)
			--
			NewToggle.Name = "NewToggle"
			NewToggle.Size = UDim2.new(1,0,0,10)
			NewToggle.BackgroundColor3 = Color3.new(1,1,1)
			NewToggle.BackgroundTransparency = 1
			NewToggle.BorderSizePixel = 0
			NewToggle.BorderColor3 = Color3.new(0,0,0)
			--
			TextLabel.Position = UDim2.new(0,15,0,0)
			TextLabel.Size = UDim2.new(0,100,1,0)
			TextLabel.BackgroundColor3 = Color3.new(1,1,1)
			TextLabel.BackgroundTransparency = 1
			TextLabel.BorderSizePixel = 0
			TextLabel.BorderColor3 = Color3.new(0,0,0)
			TextLabel.Text = Colorpicker.Name
			TextLabel.TextColor3 = Color3.fromRGB(145, 145, 145)
			TextLabel.FontFace = Font.new("rbxassetid://12187371840")
			TextLabel.TextSize = Library.FontSize
			TextLabel.TextXAlignment = Enum.TextXAlignment.Left
			TextLabel.TextStrokeTransparency = 0
			
			Library:Connection(NewToggle.MouseEnter, function()
				table.insert(Library.ThemeObjects, TextLabel)
				TextLabel.TextColor3 = Library.Accent
			end)
			--
			Library:Connection(NewToggle.MouseLeave, function()
				table.remove(Library.ThemeObjects, table.find(Library.ThemeObjects, TextLabel))
				TextLabel.TextColor3 = Color3.new(0.5686,0.5686,0.5686)
			end)

			-- // Functions
			Colorpicker.Colorpickers = Colorpicker.Colorpickers + 1
			local colorpickertypes = Library:NewPicker(
				Colorpicker.Name,
				Colorpicker.State,
				Colorpicker.Alpha,
				NewToggle,
				Colorpicker.Colorpickers - 1,
				Colorpicker.Flag,
				Colorpicker.Callback
			)

			function Colorpicker:Set(color)
				colorpickertypes:set(color, false, true)
			end

			-- // Returning
			return Colorpicker
		end
		--
		function Sections:Textbox(Properties)
			local Properties = Properties or {}
			local Textbox = {
				Window = self.Window,
				Page = self.Page,
				Section = self,
				Name = (Properties.Name or Properties.name or "textbox"),
				Placeholder = (
					Properties.placeholder
						or Properties.Placeholder
						or Properties.holder
						or Properties.Holder
						or ""
				),
				State = (
					Properties.state
						or Properties.State
						or Properties.def
						or Properties.Def
						or Properties.default
						or Properties.Default
						or ""
				),
				Callback = (
					Properties.callback
						or Properties.Callback
						or Properties.callBack
						or Properties.CallBack
						or function() end
				),
				Flag = (
					Properties.flag
						or Properties.Flag
						or Properties.pointer
						or Properties.Pointer
						or Library.NextFlag()
				),
			}
			--
			local NewDrop = Instance.new('Frame', Textbox.Section.Elements.SectionContent)
			local Outline = Instance.new('TextButton', NewDrop)
			local Inline = Instance.new('Frame', Outline)
			local Value = Instance.new('TextBox', Inline)
			local Title = Instance.new('TextLabel', NewDrop)
			--
			NewDrop.Name = "NewDrop"
			NewDrop.Size = UDim2.new(1,0,0,30)
			NewDrop.BackgroundColor3 = Color3.new(1,1,1)
			NewDrop.BackgroundTransparency = 1
			NewDrop.BorderSizePixel = 0
			NewDrop.BorderColor3 = Color3.new(0,0,0)
			--
			Outline.Name = "Outline"
			Outline.Position = UDim2.new(0,15,1,0)
			Outline.Size = UDim2.new(1,-30,0,16)
			Outline.BackgroundColor3 = Color3.new(0.1765,0.1765,0.1765)
			Outline.BorderColor3 = Color3.new(0.0392,0.0392,0.0392)
			Outline.AnchorPoint = NewVector2(0,1)
			Outline.Text = ""
			Outline.AutoButtonColor = false
			--
			Inline.Name = "Inline"
			Inline.Position = UDim2.new(0,1,0,1)
			Inline.Size = UDim2.new(1,-2,1,-2)
			Inline.BackgroundColor3 = Color3.new(0.1294,0.1294,0.1294)
			Inline.BorderSizePixel = 0
			Inline.BorderColor3 = Color3.new(0,0,0)
			--
			Value.Name = "Value"
			Value.Position = UDim2.new(0,2,0,0)
			Value.Size = UDim2.new(1,0,1,0)
			Value.BackgroundColor3 = Color3.new(1,1,1)
			Value.BackgroundTransparency = 1
			Value.BorderSizePixel = 0
			Value.BorderColor3 = Color3.new(0,0,0)
			Value.TextColor3 = Color3.fromRGB(145,145,145)
			Value.FontFace = Font.new("rbxassetid://12187371840")
			Value.TextSize = Library.FontSize
			Value.TextXAlignment = Enum.TextXAlignment.Left
			Value.TextStrokeTransparency = 0
			Value.TextWrapped = true
			Value.Text = Textbox.State
			Value.ClearTextOnFocus = false
			--
			Title.Name = "Title"
			Title.Position = UDim2.new(0,15,0,0)
			Title.Size = UDim2.new(1,0,0,10)
			Title.BackgroundColor3 = Color3.new(1,1,1)
			Title.BackgroundTransparency = 1
			Title.BorderSizePixel = 0
			Title.BorderColor3 = Color3.new(0,0,0)
			Title.TextColor3 = Color3.new(0.5686,0.5686,0.5686)
			Title.FontFace = Font.new("rbxassetid://12187371840")
			Title.TextSize = Library.FontSize
			Title.TextXAlignment = Enum.TextXAlignment.Left
			Title.TextStrokeTransparency = 0
			Title.Text = Textbox.Name
			
			-- // Connections
			Library:Connection(NewDrop.MouseEnter, function()
				Outline.BorderColor3 = Library.Accent
				table.insert(Library.ThemeObjects, Title)
				Title.TextColor3 = Library.Accent
			end)
			--
			Library:Connection(NewDrop.MouseLeave, function()
				Outline.BorderColor3 = Color3.new(0.0392,0.0392,0.0392)
				table.remove(Library.ThemeObjects, table.find(Library.ThemeObjects, Title))
				Title.TextColor3 = Color3.new(0.5686,0.5686,0.5686)
			end)
			Value.FocusLost:Connect(function()
				Textbox.Callback(Value.Text)
				Library.Flags[Textbox.Flag] = Value.Text
			end)
			--
			local function set(str)
				Value.Text = str
				Library.Flags[Textbox.Flag] = str
				Textbox.Callback(str)
			end

			-- // Return
			Flags[Textbox.Flag] = set
			return Textbox
		end
		--
		function Sections:Button(Properties)
			local Properties = Properties or {}
			local Button = {
				Window = self.Window,
				Page = self.Page,
				Section = self,
				Name = Properties.Name or "button",
				Callback = (
					Properties.callback
						or Properties.Callback
						or Properties.callBack
						or Properties.CallBack
						or function() end
				),
			}
			--
			local NewButton = Instance.new('TextButton', Button.Section.Elements.SectionContent)
			local Outline = Instance.new('Frame', NewButton)
			local Inline = Instance.new('Frame', Outline)
			local Value = Instance.new('TextLabel', Inline)
			--
			NewButton.Name = "NewButton"
			NewButton.Size = UDim2.new(1,0,0,14)
			NewButton.BackgroundColor3 = Color3.new(1,1,1)
			NewButton.BackgroundTransparency = 1
			NewButton.BorderSizePixel = 0
			NewButton.BorderColor3 = Color3.new(0,0,0)
			NewButton.Text = ""
			NewButton.TextColor3 = Color3.new(0,0,0)
			NewButton.AutoButtonColor = false
			NewButton.FontFace = Font.new("rbxassetid://12187371840")
			NewButton.TextSize = 14
			--
			Outline.Name = "Outline"
			Outline.Position = UDim2.new(0,15,1,0)
			Outline.Size = UDim2.new(1,-30,0,14)
			Outline.BackgroundColor3 = Color3.new(0.1765,0.1765,0.1765)
			Outline.BorderColor3 = Color3.new(0.0392,0.0392,0.0392)
			Outline.AnchorPoint = NewVector2(0,1)
			--
			Inline.Name = "Inline"
			Inline.Position = UDim2.new(0,1,0,1)
			Inline.Size = UDim2.new(1,-2,1,-2)
			Inline.BackgroundColor3 = Color3.new(0.1294,0.1294,0.1294)
			Inline.BorderSizePixel = 0
			Inline.BorderColor3 = Color3.new(0,0,0)
			--
			Value.Name = "Value"
			Value.Size = UDim2.new(1,0,1,0)
			Value.BackgroundColor3 = Color3.new(1,1,1)
			Value.BackgroundTransparency = 1
			Value.BorderSizePixel = 0
			Value.BorderColor3 = Color3.new(0,0,0)
			Value.TextColor3 = Color3.new(0.5686,0.5686,0.5686)
			Value.FontFace = Font.new("rbxassetid://12187371840")
			Value.TextSize = Library.FontSize
			Value.Text = Button.Name
			Value.TextStrokeTransparency = 0
			
			Library:Connection(NewButton.MouseEnter, function()
				Outline.BorderColor3 = Library.Accent
			end)
			--
			Library:Connection(NewButton.MouseLeave, function()
				Outline.BorderColor3 = Color3.new(0.0392,0.0392,0.0392)
			end)
			--
			Library:Connection(NewButton.MouseButton1Down, function()
				Button.Callback()
				Value.TextColor3 = Library.Accent
			end)
			--
			Library:Connection(NewButton.MouseButton1Up, function()
				Value.TextColor3 = Color3.new(0.5686,0.5686,0.5686)
			end)
		end
		--
		function Sections:Label(Properties) -- fuck finobe
			local Properties = Properties or {}
			local Label = {
				Window = self.Window,
				Page = self.Page,
				Section = self,
				Name = Properties.Name or "label",
				Centered = Properties.Centered or false,
			}
			local NewButton = Instance.new('TextLabel', Label.Section.Elements.SectionContent) -- ya im lazy
			--
			NewButton.Name = "NewButton"
			NewButton.Size = UDim2.new(1,0,0,12)
			NewButton.BackgroundColor3 = Color3.new(1,1,1)
			NewButton.BackgroundTransparency = 1
			NewButton.BorderSizePixel = 0
			NewButton.BorderColor3 = Color3.new(0,0,0)
			NewButton.Text = Label.Name
			NewButton.TextColor3 = Color3.fromRGB(255,255,255)
			NewButton.FontFace = Font.new("rbxassetid://12187371840")
			NewButton.TextSize = Library.FontSize
			NewButton.TextXAlignment = Label.Centered and Enum.TextXAlignment.Center or Enum.TextXAlignment.Left
			NewButton.TextStrokeTransparency = 0
			NewButton.TextStrokeColor3 = Color3.new(0,0,0)
		end
	end
	-- // Base Functions
	do 
		-- // Utility Functions
		do 
			function utility:ValidateClient(Player)
				return Player and Player.Character and Player.Character:FindFirstChild("Humanoid") and true or false 
			end 
			-- 
			function utility:getPlayerInformation(Player)
				local Object = Player.Character
				local Humanoid = (Object and Object:FindFirstChildOfClass("Humanoid"))
				local RootPart = (Humanoid and Humanoid.RootPart)
				--
				return Object, Humanoid, RootPart
			end
			-- 
			function utility:safeUnit(unit)
				if unit.Magnitude > 1e-8 then
					return unit
				end
				-- 
				return Vector3.zero
			end
			--
			function utility:CreateBeam(Origin, End, Color1, FaceCamera, Width, TextureSpeed, Brightness)
				local BeamPart = Instance.new("Part", Workspace)
				BeamPart.Name = "BeamPart"
				BeamPart.Transparency = 1
				--
				local Part = Instance.new("Part", BeamPart)
				Part.Size = NewVector3(1, 1, 1)
				Part.Transparency = 1
				Part.CanCollide = false
				Part.CFrame = typeof(Origin) == "CFrame" and Origin or NewCFrame(Origin)
				Part.Anchored = true
				local Attachment = Instance.new("Attachment", Part)
				local Part2 = Instance.new("Part", BeamPart)
				Part2.Size = NewVector3(1, 1, 1)
				Part2.Transparency = 1
				Part2.CanCollide = false
				Part2.CFrame = typeof(End) == "CFrame" and End or NewCFrame(End)
				Part2.Anchored = true
				Part2.Color = Color3.fromRGB(255, 255, 255)
				local Attachment2 = Instance.new("Attachment", Part2)
				local Beam = Instance.new("Beam", Part)
				Beam.FaceCamera = FaceCamera
				Beam.Color = ColorSequence.new{
					ColorSequenceKeypoint.new(0.00, Color1),
					ColorSequenceKeypoint.new(1, Color1),
				}
				Beam.Attachment0 = Attachment
				Beam.Attachment1 = Attachment2
				Beam.Transparency = NumberSequence.new{
					NumberSequenceKeypoint.new(0, 0),
					NumberSequenceKeypoint.new(1, 0),
				}
				Beam.LightEmission = Brightness
				Beam.LightInfluence = 1
				Beam.Width0 = Width
				Beam.Width1 = Width
				Beam.Texture = "rbxassetid://7151778302"
				Beam.LightEmission = 1
				Beam.LightInfluence = 1
				Beam.TextureMode = Enum.TextureMode.Wrap 
				Beam.TextureLength = 3 
				Beam.TextureSpeed = TextureSpeed
				delay(flags["Tracers Life Time"], function()
					task.spawn(function()
						for i = 0, 100 do 
							task.wait(0.01)
							Beam.Transparency = NumberSequence.new{
								NumberSequenceKeypoint.new(0, i/100),
								NumberSequenceKeypoint.new(1, i/100),
							}
						end 
						-- 
						Part:Destroy()
						Part2:Destroy()
						BeamPart:Destroy()	
					end)	
				end)
			end  
			-- 
			function utility:generateAngles(numLines)
				local angles = {}
				local angleIncrement = 2 * math.pi / numLines
				
				for i = 1, numLines do
					local angle = (i - 1) * angleIncrement
					table.insert(angles, angle)
				end
				
				return angles
			end
			-- 
			function utility:Shift(Number)
				return math.acos(math.cos(Number * math.pi)) / math.pi
			end
			-- 
			function utility:checkMessage(tbl)
				local msg = tbl[math.random(1, #tbl)]
				
				if msg == oldMsg then
					return utility:checkMessage(tbl)
				else
					oldMsg = msg
					return msg
				end
			end
			-- 
			function utility:calculateAimViewerEndPoint()
				if utility.target and utility.target.Character and flags["Aim Viewer Bypass"] then 
					local part = (flags["Jump Prediction"] and utility.target.Character.Humanoid.FloorMaterial == Enum.Material.Air and "RightFoot") or (flags["Nearest Part"] and partClosest) or flags["Single Hit Part"]
					local yOffset = utility.target.Character.Humanoid.FloorMaterial == Enum.Material.Air and flags["Manual Offset Value"] or 0 
					--
					if (checks == true) then 
						if flags["Resolver"] then  
							local endpoint = utility.target.Character[tostring(part)].Position + offset + NewVector3(0, yOffset, 0)
							Remote:FireServer("UpdateMousePosI", endpoint) 
						else 
							local endpoint = utility.target.Character[tostring(part)].Position + (utility.target.Character.HumanoidRootPart.Velocity * prediction) + NewVector3(0, yOffset, 0)
							Remote:FireServer("UpdateMousePosI", endpoint) 
						end   
					end   
				end 
			end     
			-- 
			function utility:getHeld() 
				if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildWhichIsA("Tool") and LocalPlayer.Character then 
					return LocalPlayer.Character:FindFirstChildWhichIsA("Tool") or nil; 
				end
			end 
			-- 
			function utility:TranslateString(inputString, targetLanguage)
				local translatedString = ""
				for i = 1, #inputString do
					local char = inputString:sub(i, i)
					local translation = Languages[char] and Languages[char][targetLanguage]
					translatedString = translatedString .. (translation or char)
				end
				return translatedString
			end
			--
			function utility:GetComponents(Player)
				if utility:ValidateClient(Player) then 
					return Player.Character, Player.Character:FindFirstChild("HumanoidRootPart"), Player.Character:FindFirstChild("Humanoid")
				end 
			end 
			--
			function utility:getClosestPlayerToCursor(Radius)
				local shortestDistance = Radius or math.huge

				local closestPlayer
				for i, v in pairs(Players:GetPlayers()) do
					if v ~= LocalPlayer and utility:ValidateClient(v) and v.Character:FindFirstChild("HumanoidRootPart") then
						local pos, OnScreen = Camera:WorldToViewportPoint(v.Character.HumanoidRootPart.Position)
						local magnitude = (NewVector2(pos.X, pos.Y) - NewVector2(Mouse.X, Mouse.Y)).magnitude
						if magnitude < shortestDistance and OnScreen then
							closestPlayer = v
							shortestDistance = magnitude
						end
					end
				end 
				return closestPlayer
			end
			--
			function utility:RecalculateVelocity(Player)
				if utility:ValidateClient(Player) then
					local Character, RootPart, Humanoid = utility:GetComponents(Player)

					local currentPosition = RootPart.Position
					local currentTime = tick() 
					
					task.wait()
		
					local newPosition = RootPart.Position
					local newTime = tick()
					
					local distanceTraveled = (newPosition - currentPosition) 
		
					local timeInterval = newTime - currentTime
					local velocity = distanceTraveled / timeInterval
					currentPosition = newPosition
					currentTime = newTime
					return velocity
				end
			end
			--
			function utility:drawObject(type, prop)
				local obj = Drawing.new(type)
				--
				if prop then
					for i,v in next, prop do
						obj[i] = v;
					end
				end
				return obj  
			end        
			-- 
			function utility:characterClone(Player, Color, Material, Transparency, Parent)
				for i,v in pairs(Player.Character:GetChildren()) do 
					if table.find(utility.bodyParts, v.Name) and v.Name ~= "HumanoidRootPart" then 
						if v.Name == "UpperTorso" or v.Name == "LowerTorso" then 
							local ClonedPart = Instance.new("Part")
							ClonedPart.Anchored = true 
							ClonedPart.CanCollide = false 
							ClonedPart.Position = v.Position
							ClonedPart.Parent = Parent
							ClonedPart.Material = Enum.Material[Material]
							ClonedPart.Transparency = Transparency 
							ClonedPart.Color = Color
							ClonedPart.Size = v.Size + Vector3.new(0.01,0.01,0.01)
							ClonedPart.Name = v.Name
							ClonedPart.Rotation = v.Rotation
							ClonedPart.Shape = "Block"
						end 
					end 
				end
			end 
			-- 
			function utility:Remove(Player)
				if connections[Player] then 
					connections[Player]:Disconnect();
				end 
				-- 
				if highlights[Player] then 
					highlights[Player].Parent = nil;
				end 
			end 
			--
			function utility:AngleToEdge(angle, inset) -- credits to whoever made this Im just porting over my old arrows üò≠
				local pos
				local ox = Cos(angle)
				local oy = Sin(angle)
				local slope = oy / ox
				-- 
				local h_edge = viewportSize.x - inset
				local v_edge = viewportSize.y - inset
				if oy < 0 then
					v_edge = inset
				end
				if ox < 0 then
					h_edge = inset
				end
				local y = (slope * h_edge) + (viewportSize.y / 2) - slope * (viewportSize.x / 2)
				if y > 0 and y < viewportSize.y - inset then
					pos = NewVector2(h_edge, y)
				else
					pos = NewVector2(
						(v_edge - viewportSize.y / 2 + slope * (viewportSize.x / 2)) / slope,
						v_edge
					)
				end
				return pos
			end
			--
			function utility:Map(N, OldMin, OldMax, Min, Max) -- I love my 1 line funcs I use once ‚ô•üòª
				return (N - OldMin) / (OldMax - OldMin) * (Max - Min) + Min
			end
			--
			function utility:getRotate(Vec, Rads) -- I didnt make this math credits to whoever can code cool maths!
				local vec = Vec.Unit
				local sin = math.sin(Rads)
				local cos = math.cos(Rads)
				local x = (cos * vec.x) - (sin * vec.y)
				local y = (sin * vec.x) + (cos * vec.y)
				--
				return NewVector2(x, y).Unit * Vec.Magnitude
			end
			--
			function utility:BoxCalculation(TorsoSize)
				local UpCalculation = NewCFrame(TorsoSize)
				local VTop = TorsoSize + (UpCalculation.UpVector * 1.8) + Camera.CFrame.UpVector;
				local VBottom = TorsoSize - (UpCalculation.UpVector * 2.5) - Camera.CFrame.UpVector;
			
				local Top, TopIsRendered = Camera:WorldToViewportPoint(VTop);
				local Bottom, BottomIsRendered = Camera:WorldToViewportPoint(VBottom);
			
				local Width = math.max(math.floor(math.abs(Top.x - Bottom.x)), 3);
				local Height = math.max(math.floor(math.max(math.abs(Bottom.y - Top.y), Width / 2)), 3);
				local BoxSize = NewVector2(math.floor(math.max(Height / 1.5, Width)), Height);
				local BoxPosition = NewVector2(math.floor(Top.x * 0.5 + Bottom.x * 0.5 - BoxSize.x * 0.5), math.floor(math.min(Top.y, Bottom.y)));
			
				return BoxSize, BoxPosition;
			end
			--
			local LastRayIgnoreUpdate, RayIgnoreList = 0, {}
			-- 
			function utility:checkRay(Instance, Distance, Position, Unit)
				local Pass = true;
				local Model = Instance.Character;

				if Distance > 999 then return false; end

				if not Model then return false end

				local _Ray = Ray.new(Position, Unit * Distance)
				if tick() - LastRayIgnoreUpdate > 3 then
					LastRayIgnoreUpdate = tick()

					table.clear(RayIgnoreList)

					table.insert(RayIgnoreList, LocalPlayer.Character)
					if utility:getHeld() then 
						table.insert(RayIgnoreList, utility:getHeld().Handle)
					end 
					table.insert(RayIgnoreList, Camera)
					
					if Mouse.TargetFilter then table.insert(RayIgnoreList, Mouse.TargetFilter) end

					if #IgnoreList > 64 then
						while #IgnoreList > 64 do
							table.remove(IgnoreList, 1)
						end
					end

					for i, v in pairs(IgnoreList) do table.insert(RayIgnoreList, v) end
				end

				local Hit = workspace:FindPartOnRayWithIgnoreList(_Ray, RayIgnoreList)
				
				if Hit and not Hit:IsDescendantOf(Model) then
					Pass = false;
					if Hit.Transparency >= .3 or not Hit.CanCollide and Hit.ClassName ~= Terrain then
						table.insert(IgnoreList, Hit)
					end
				end

				return Pass;
			end
			--
			function utility:GetOrigin()
				local Tool = utility:getHeld()
				-- 
				return (Tool ~= "None" and Tool.Handle.Position) or Camera.CFrame.Position
			end
			--
			function utility:Lerp(Value, MinColor, MaxColor)
				if Value <= 0 then return MaxColor end
				if Value >= 100 then return MinColor end
				--
				return Color3.new(
					MaxColor.R + (MinColor.R - MaxColor.R) * Value,
					MaxColor.G + (MinColor.G - MaxColor.G) * Value,
					MaxColor.B + (MinColor.B - MaxColor.B) * Value
				)
			end
		end 
		
		-- // Framework Functions 
		do 
			function framework:selectTarget() 
				local deathLoop; 
				local deathLoopRestore; 
				local espTarget = false; 
				-- 	
				if flags["Target Auto Select"] then return end 
				if flags["Silent Enabled"] then 
					if flags["Silent_Bind"] then 
						utility.target = utility:getClosestPlayerToCursor(math.huge); 
						--
						if (flags["Target Esp"] and flags["PlayerESP_Enabled"] == false) then 
							Visuals:Create({Player = utility.target})
							espTarget = true 
						end 
						-- 
						if (flags["Back Track Enabled"] and flags["Back Track Method"] == "Follow") then 
							utility:characterClone(utility.target, flags["Back Track Settings"].Color, flags["Back Track Material"], flags["Back Track Settings"].Transparency, utility.folders["Part Chams"])
						end 
						-- 
						if flags["Notify"] then 
							Library:Notification("Locked onto: " .. utility.target.Name .. "", 3, Library.Accent, flags["Notification Position"])
						end 
						-- 
						if (flags["Back Track Enabled"] and flags["Back Track Method"] == "Follow") then 
							utility:characterClone(utility.target, flags["Back Track Settings"].Color, flags["Back Track Material"], flags["Back Track Settings"].Transparency, utility.folders["Part Chams"])
						end 
						--
						if flags["Spectate"] then 
							Camera.CameraSubject = utility.target.Character.Humanoid
						end 
					else 
						-- What the fuck why does this break? I dont know dont ask me >:(
						LocalPlayer.Character.Humanoid.AutoRotate = true;
						Camera.CameraSubject = LocalPlayer.Character.Humanoid;
						utility.folders["Part Chams"]:ClearAllChildren();
						-- 
						if (Visuals.Bases[utility.target] and flags["PlayerESP_Enabled"] == false) then 
							Visuals.Bases[utility.target]:Remove()
						end 
						-- 
						if utility.target then 
							utility:Remove(utility.target);
						end 
						--
						utility.drawings["Tracer"].Visible = false;
						utility.target = nil;
					end   
				end 
			end  
			-- 
			function framework:aimAssist() 
				local Enabled = flags["Aim Assist"] and flags["Aim Assist Bind"]
				if not Enabled then return end 
				-- 
				local endPosition;
				local fovCheck;  
				local Resolver, Prediction = flags["Resolver"], flags["Aim Assist Manual Prediction Value"] or 0.1413
				local Target = utility.target or aimAssistTarget
				local Part = (flags["Aim Assist Jump Prediction"] and Target.Character.Humanoid.FloorMaterial == Enum.Material.Air and "RightFoot") or flags["Aim Assist Single Hit Part"]
				local characterOffset = Resolver and framework:calculateResolverOffset(Target) * Prediction or Target.Character.HumanoidRootPart.Velocity * Prediction
				local yOffset = Target.Character.Humanoid.FloorMaterial == Enum.Material.Air and flags["Aim Assist Manual Offset Value"] or 0 
				local Checks = framework:getChecks(Target, table.find(flags["Aim Assist Checks"], "Friend Check"), table.find(flags["Aim Assist Checks"], "Wall Check"), table.find(flags["Aim Assist Checks"], "Knocked Check"), table.find(flags["Aim Assist Checks"], "Grabbed Check"));	
				-- 
				local characterPosition = Target.Character[Part].Position + characterOffset + NewVector3(0, yOffset, 0)
				-- 
				local Position = Camera:WorldToViewportPoint(Target.Character.PrimaryPart.Position)
				local Magnitude = (NewVector2(Position.X, Position.Y) - NewVector2(Mouse.X, Mouse.Y)).magnitude
				-- 
				if utility.drawings["Aim Assist FOV"].Visible then 
					fovCheck = Magnitude < utility.drawings["Aim Assist FOV"].Radius 
				else 
					fovCheck = true 
				end 
				-- 
				if Checks and fovCheck then 
					fovCheck = Magnitude
					-- 
					if flags["Aim Assist Method"] == "Use Mouse" then 
						endPosition, OnScreen = Camera:WorldToScreenPoint(characterPosition)
						-- 
						if OnScreen then 
							mousemoverel(NewVector2(endPosition.X - Mouse.X, endPosition.Y - Mouse.Y).X / (flags["Horizontal Smoothness"] + 1), NewVector2(endPosition.X - Mouse.X, endPosition.Y - Mouse.Y).Y / (flags["Vertical Smoothness"] + 1))
						end 
					else 
						Camera.CFrame = Camera.CFrame:Lerp(NewCFrame(Camera.CFrame.p, characterPosition), (100 - flags["Smoothness"]) / 100)
					end 
				end 
			end 
			-- 
			function framework:desyncInit() -- thanks wendigo for this or whoever made it 
				local Root = LocalPlayer.Character.HumanoidRootPart
				local rootVel = Root.Velocity;
				local rootAng = Random(-180, 180)
				local rootOffset do
					local X = Random(-128^2, 128^2);
					local Y = Random(0, 128^2);
					local Z = Random(-128^2, 128^2);
			
					rootOffset = NewVector3(X, -Y, Z);
				end;
				
				LocalPlayer.Character.HumanoidRootPart.CFrame *= Angle(0, Rad(rootAng), 0);
				LocalPlayer.Character.HumanoidRootPart.Velocity = rootOffset; 
			
				RunService.RenderStepped:Wait();
				
				LocalPlayer.Character.HumanoidRootPart.CFrame *= Angle(0, Rad(-rootAng), 0);
				LocalPlayer.Character.HumanoidRootPart.Velocity = rootVel;
			end
			--
			function framework:autoReload()
				local Tool = utility:getHeld()
				if flags["Auto Reload"] then 
					if Tool.Ammo.Value == 0 then 
						Remote:FireServer("Reload", Tool)
					end 
				end 
			end 
			-- 
			function framework:worldVisuals() 
				if flags["Master Switch"] then 
					if flags["Clock Time Enabled"] and Lighting.ClockTime ~= flags["Clock Time"] then 
						Lighting.ClockTime = flags["Clock Time"]
					end 
					-- 
					if flags["Color Shift Bottom"] and Lighting.ColorShift_Bottom ~= flags["Color Shift Bottom Color"] then 
						Lighting.ColorShift_Bottom = flags["Color Shift Bottom Color"].Color
					end 

					if flags["Ambient"] and Lighting.Ambient ~= flags["Ambience Color"] then 
						Lighting.Ambient = flags["Ambience Color"].Color
					end 
					-- 
					if flags["Outdoor Ambience"] and Lighting.OutdoorAmbient ~= flags["Outdoor Ambience color"] then 
						Lighting.OutdoorAmbient = flags["Outdoor Ambience color"].Color
					end 
					-- 
					if flags["Brightness Enabled"] and Lighting.Brightness ~= flags["Brightness"] then 
						Lighting.Brightness = flags["Brightness"]
					end 
					-- 
					if flags["Color Shift Top"] and Lighting.ColorShift_Top ~= flags["Color Shift Top Color"]  then 
						Lighting.ColorShift_Top = flags["Color Shift Top Color"].Color
					end 
					-- 
					if flags["Fog"] and Lighting.FogColor ~= flags["Fog Color"] then 
						Lighting.FogColor = flags["Fog Color"].Color
					end 
				end 
			end 
			--
			function framework:cframeSpeed()
				if flags["Speed Enabled"] and flags["Speed Key"] then 
					local Character = LocalPlayer.Character 
					local Move_Direction = Character.Humanoid.MoveDirection
					-- 
					Character.HumanoidRootPart.CFrame = Character.HumanoidRootPart.CFrame + (Move_Direction * (flags["Speed"] / 25))
				end 
			end 
			-- 
			function framework:chatSpam(Type, Repeat, Emojis, Symbols)
				local message = ""
				-- tp, rp, emojis, symbols
				for i = 1, Repeat and math.random(2, 5) or 1 do
					for i = 1, math.random(1, 5) do
						local index = math.random(0, 1) == 0 and "symbols" or "emojis"
						
						if index == "symbols" and Symbols then
							message ..= tostring(utx[index][math.random(1, #utx[index])])
						elseif index == "emojis" and Emojis then
							message ..= tostring(utx[index][math.random(1, #utx[index])])
						end
					end
					
					message ..= utility:checkMessage(Messages[Type])
								
					for i = 1, math.random(1, 5) do
						local index = math.random(0, 1) == 0 and "symbols" or "emojis"
						
						if index == "symbols" and Symbols then
							message ..= tostring(utx[index][math.random(1, #utx[index])])
						elseif index == "emojis" and Emojis then
							message ..= tostring(utx[index][math.random(1, #utx[index])])
						end
					end
					
					message ..= " "
				end
				
				return message
			end 
			-- 
			function framework:fly(delta) 
				if flags["Fly Enabled"] and flags["Fly Key"] then 
					LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.zero; 
					local x = 0 
					local y = 0 
					local z = 0 
					-- 
					if not Typing then 
						if InputService:IsKeyDown(Enum.KeyCode.W) then
							z -= 1
						end
						-- 
						if InputService:IsKeyDown(Enum.KeyCode.S) then
							z += 1
						end
						-- 
						if InputService:IsKeyDown(Enum.KeyCode.D) then
							x += 1
						end
						-- 
						if InputService:IsKeyDown(Enum.KeyCode.A) then
							x -= 1
						end
						-- 
						if InputService:IsKeyDown(Enum.KeyCode.Space) then
							y += 1
						end
						-- 
						if InputService:IsKeyDown(Enum.KeyCode.LeftShift) then
							y -= 1
						end
					end 
					-- 
					local direction = utility:safeUnit(Camera.CFrame:VectorToWorldSpace(NewVector3(x, 0, z)).Unit)
					LocalPlayer.Character.HumanoidRootPart.CFrame += (direction + NewVector3(0, y, 0)) * (flags["Fly Speed"] / 10) * (delta * 60)
				end 
			end 
			--
			function framework:selectPrediction()
				local Prediction; 
				
				local Predictions = {
					0.113,
					0.115,
					0.117,
					0.11923283912031938191231281632312637123821763333312731833,
					0.121316378910319876472890149871624,
					0.124521314351673817351423414,
					0.131314253678192031927365421456789331,
					0.1355991245213413214231231123121,
					0.138312341526738912,
					0.146432786576847627781237813281381382038198391293,
					0.1512783311111111111111111111111111111111111,
					0.15132132132132132555555555555555,
				}

				if flags["Auto Prediction"] then 
					for i = 1, #Predictions do 
						if game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue() <= i * 10 then 
							Prediction = Predictions[i]
						end 
					end                 
				end 

				return Prediction or tonumber(flags["Manual Prediction Value"]) or 0.1413
			end 
			--
			function framework:calculateResolverOffset(player) 
				local Offset; 
				local Prediction = framework:selectPrediction() 
				-- 
				if flags["Resolver"] then 
					if flags["Resolver Method"] == "Recalculate Velocity" then 
						Offset = utility:RecalculateVelocity(player) * Prediction
					elseif flags["Resolver Method"] == "Suppress Velocity" then 
						Offset = Vector3.new(player.Character.HumanoidRootPart.Velocity.X, 0, player.Character.HumanoidRootPart.Velocity.Z) * Prediction
					elseif flags["Resolver Method"] == "Move Direction" then 
						Offset = player.Character.Humanoid.MoveDirection * 19.64285714289 * Prediction
					end 
				end 
				--  
				return Offset 
			end 
			-- 
			function framework:calculateNearestPart(Player, List)
				local shortestDistance = math.huge
				local closestPart
				if Player and Player.Character and Player.Character:FindFirstChild("Humanoid") and Player.Character:FindFirstChild("Head") and Player.Character.Humanoid.Health ~= 0 and Player.Character:FindFirstChild("HumanoidRootPart") then
					for i, v in pairs(Player.Character:GetChildren()) do
						if v:IsA("BasePart") then 
							local pos = Camera:WorldToViewportPoint(v.Position)
							local magnitude = (NewVector2(pos.X, pos.Y) - NewVector2(Mouse.X, Mouse.Y+36)).magnitude
								if magnitude < shortestDistance and table.find(List, v.Name) then
									closestPart = v
									shortestDistance = magnitude
								end
							end
						end 
					return closestPart
				end
			end 
			--
			local autoSelectTick = 0; 
			function framework:autoSelect()
				if tick() - autoSelectTick > flags["Auto Select Delay"]/1000 then 
					autoSelectTick = tick()
					local closestPlayer
					local shortestDistance = math.huge -- Start with a very large distance
					for _, player in next, Players:GetPlayers() do
						if player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player ~= game.Players.LocalPlayer and framework:getChecks(player, table.find(flags["Silent Checks"], "Friend Check"), table.find(flags["Silent Checks"], "Wall Check"), table.find(flags["Silent Checks"], "Knocked Check"), table.find(flags["Silent Checks"], "Grabbed Check")) then
							local distance = (LocalPlayer.Character.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).magnitude
							if distance < shortestDistance then
								utility.target = player
								shortestDistance = distance
							end
						end
					end
				end 
			end
			-- 
			function framework:getChecks(Player, Friend, Wall, Knocked, Grabbed, ToolHeld)
				local Checks = true 
				--  
				if Friend and LocalPlayer:IsFriendsWith(Player.UserId) then Checks = false end 
				if Wall then Checks = utility:checkRay(Player, (Camera.CFrame.Position - Player.Character.Head.Position).Magnitude, Camera.CFrame.Position, (Player.Character.Head.Position - Camera.CFrame.Position).unit) end 
				if Knocked and Player.Character.BodyEffects["K.O"].Value == true then Checks = false end 
				if Grabbed and Player.Character:FindFirstChild("GRABBING_CONSTRAINT") then Checks = false end 
				if ToolHeld and not (LocalPlayer.Character and LocalPlayer.Character:FindFirstChildWhichIsA("Tool")) then Checks = false end 
				--
				return Checks
			end 
		end 

		-- // Esp Functions
		do 
			-- functions for drawing the mf esp :money_face: 
			function Visuals:Draw(Type, Properties)
				local Drawing = Drawing.new(Type)
				--
				for Property, Value in pairs(Properties) do
					Drawing[Property] = Value
				end
				--
				table.insert(Visuals.Drawings, Drawing)
				-- 
				return Drawing
			end
			-- 
			function Visuals:Create(Properties)
				if Properties then
					if Properties.Player then
						local Self = setmetatable({
							Player = Properties.Player,
							Info = {
								Tick = tick(),
								gunTick = tick()
							},
							Renders = {
								Weapon = Visuals:Draw("Text", {Text = "Weapon", Visible = false, Size = 13, Center = true, Color = NewHex("#ffffff"), Outline = true, OutlineColor = NewHex("#000000"), Font = Drawing.Fonts.Plex}),
								--Distance = Visuals:Draw("Text", {Text = "Distance", Visible = false, Size = 13, Center = true, Color = NewHex("#ffffff"), Outline = true, OutlineColor = NewHex("#000000"), Font = Drawing.Fonts.Plex}),
								HealthOutline = Visuals:Draw("Square", {Thickness = 1, Visible = false, Filled = true, Color = NewHex("#000000")}),
								Health = Visuals:Draw("Square", {Thickness = 1, Visible = false, Filled = true, Color = NewHex("#09ff00")}),
								HealthText = Visuals:Draw("Text", {Text = "100", Visible = false, Size = 13, Center = true, Color = NewHex("#09ff00"), Outline = true, OutlineColor = NewHex("#000000"), Font = 2}),
								Box = Visuals:Draw("Square", {Thickness = 1, Visible = false, Filled = false, Color = NewHex("#000000")}),
								BoxFill = Visuals:Draw("Square", {Thickness = 1, Visible = false, Filled = true, Color = NewHex("#000000")}),
								BoxOutline = Visuals:Draw("Square", {Thickness = 2, Visible = false, Filled = false, Color = NewHex("#000000")}),
								BoxInline = Visuals:Draw("Square", {Thickness = 1, Visible = false, Filled = false, Color = NewHex("#C30B00")}),
								Name = Visuals:Draw("Text", {Text = "Name", Visible = false, Size = 13, Center = true, Color = NewHex("#ffffff"), Outline = true, OutlineColor = NewHex("#000000"), Font = Drawing.Fonts.Plex}),
								Flag = Visuals:Draw("Text", {Text = "Flag", Visible = false, Size = 13, Center = false, Color = NewHex("#ffffff"), Outline = true, OutlineColor = NewHex("#000000"), Font = Drawing.Fonts.Plex}),
								Tool = Visuals:Draw("Text", {Text = "Tool", Visible = false, Size = 13, Center = false, Color = NewHex("#ffffff"), Outline = true, OutlineColor = NewHex("#000000"), Font = Drawing.Fonts.Plex}),
								ArmorBarOutline = Visuals:Draw("Square", {Thickness = 1, Visible = false, Filled = true, Color = NewHex("#000000")}),
								ArmorBar = Visuals:Draw("Square", {Thickness = 1, Visible = false, Filled = true, Color = NewHex("#09ff00")}),
								Arrow = Visuals:Draw("Triangle", {Visible = false, Color = NewHex("#ffffff")}),
								ArrowOutline = Visuals:Draw("Triangle", {Visible = false, Color = NewHex("#ffffff")}),
								ArmorBarText = Visuals:Draw("Text", {Text = "100", Visible = false, Size = 13, Center = true, Color = NewHex("#09ff00"), Outline = true, OutlineColor = NewHex("#000000"), Font = 2}),
								GunIcon = Visuals:Draw("Image", {Data = "", Transparency = 1, Visible = false, Size = NewVector2(129,55)}),
								Corners = {}, 
							},
							Highlight = Instance.new("Highlight", game.CoreGui), 
						}, {__index = Visuals.Base})
						--
						do -- // Corner Boxes
							for Index = 9, 16 do
								Self.Renders.Corners[Index] = Visuals:Draw("Line", {Thickness = 3, Color = NewHex("#000000")})
							end
							--
							for Index = 1, 8 do
								Self.Renders.Corners[Index] = Visuals:Draw("Line", {Thickness = 0, Color = NewHex("#1A66FF")})
							end
						end
						-- 
						Self.Highlight.Parent = game.CoreGui
						--
						Visuals.Bases[Properties.Player] = Self
						--
						return Self
					end
				end
			end
			-- 
			function Visuals.Base:Opacity(State)
				local Self = self
				--
				if Self then
					local Renders = rawget(Self, "Renders")
					--
					for Index, Drawing in pairs(Renders) do
						if Index ~= "Corners" then
							Drawing.Visible = State -- what
						end
					end
					--
					for Index = 1, 16 do
						Self.Renders.Corners[Index].Visible = State
					end
					--
					if not State then
						Self.Info.RootPosition = nil
						Self.Info.Health = nil
						Self.Info.MaxHealth = nil
					end
				end
			end
			--
			function Visuals.Base:Remove()
				local Self = self
				--
				if Self then
					setmetatable(Self, {})
					--
					Visuals.Bases[Self.Player] = nil
					--
					Self.Object = nil
					--
					for Index, Drawing in pairs(Self.Renders) do
						if Index ~= "Corners" then
							Drawing:Remove()
						end
					end
					--
					for Index = 1, 16 do
						Self.Renders.Corners[Index]:Remove()
					end
					--
					Self.Highlight.Parent = nil; 
					Self.Highlight = nil; 
					-- 
					Self.Renders = nil
					Self = nil
				end
			end
			-- 
			function Visuals.Base:Update()
				local Self = self
				local Add = 0; 
				--
				if Self then
					local Renders = rawget(Self, "Renders")
					local Player = rawget(Self, "Player")
					local Info = rawget(Self, "Info")
					local Highlights = rawget(Self, "Highlight")
					local Parent = Player.Parent
					--
					if (Player and Parent and Parent ~= nil) or (Info.RootPosition and Info.Health and Info.MaxHealth) then
						if Player then
							local Object, Humanoid, RootPart = utility:getPlayerInformation(Player)
							local TransparencyMultplier = 1
							--
							if Object and Object.Parent and (Humanoid and RootPart) then
								local Health, MaxHealth = Humanoid.Health, Humanoid.MaxHealth
								--
								if Health > 0 then
									Info.Pass = true
									Info.RootPosition = RootPart.Position
									Info.Health = Health
									Info.MaxHealth = MaxHealth
									Info.ArmorValue = Object:FindFirstChild("BodyEffects") and Object["BodyEffects"]:FindFirstChild("Armor") and Object["BodyEffects"]:FindFirstChild("Armor").Value
									Info.ToolHeld =  (Object:FindFirstChildOfClass("Tool") and Object:FindFirstChildOfClass("Tool").Name) or "None"
								else
									Info.Pass = false
								end
							else
								Info.Pass = false
							end
							--
							if Info.Pass then
								Info.Tick = tick()
							else
								local FadeTime = (250 / (2 * 100))
								local Value = Info.Tick - tick()
								--
								if Value <= FadeTime then
									TransparencyMultplier = Clamp((Value + FadeTime) * 1 / FadeTime, 0, 1)
								else
									Info.RootPosition = nil
									Info.Health = nil
									Info.MaxHealth = nil
								end
							end
							--
							if Info.RootPosition and Info.Health and Info.MaxHealth and (Object and Humanoid and RootPart) then
								local DistanceToPlayer = (Camera.CFrame.Position - Info.RootPosition).Magnitude
								local Position, OnScreen = Camera:WorldToViewportPoint(Info.RootPosition)
								--
								local Size, BoxSize, BoxPosition, BoxCenter, TL, BL, TR, BR
								--
								if OnScreen then
									local MaxDistance = tonumber(flags["ESP Distance"])
									--
									if DistanceToPlayer <= MaxDistance then
										BoxSize, BoxPosition = utility:BoxCalculation(Info.RootPosition)
										--
										if (flags["PlayerESP_Box"] == true and flags["PlayerESP_Box_Type"] == "Corner") then -- // Corner Boxes
											BoxCenter = Math:RoundVector(NewVector2(BoxPosition.X + BoxSize.X / 2, BoxPosition.Y + BoxSize.Y / 2));
											TL = Math:RoundVector(NewVector2(BoxCenter.X - BoxSize.X / 2, BoxCenter.Y - BoxSize.Y / 2)); 
											BL = Math:RoundVector(NewVector2(BoxCenter.X - BoxSize.X / 2, BoxCenter.Y + BoxSize.Y / 2));
											TR = Math:RoundVector(NewVector2(BoxCenter.X + BoxSize.X / 2, BoxCenter.Y - BoxSize.Y / 2));
											BR = Math:RoundVector(NewVector2(BoxCenter.X + BoxSize.X / 2, BoxCenter.Y + BoxSize.Y / 2));
										end
									end
								end
								--
								if (BoxSize and BoxPosition) then
									local GeneralOpacity = ((1 - 0.2) * TransparencyMultplier)
									--
									for Index, Drawing in pairs(Renders) do
										if Index ~= "Corners" then
											if Drawing.Visible then
												Drawing.Visible = false
											end
										end
									end
									-- 
									Highlights.Enabled = false 
									--
									for Index = 1, 16 do
										if Renders.Corners[Index].Visible then
											Renders.Corners[Index].Visible = false
										end
									end
									--
									if Player ~= LocalPlayer then 
										do -- // Name
											if flags["PlayerESP_Name"] then
												local Name = Renders.Name
												--
												Name.Text = Player.Name
												Name.Position = NewVector2(BoxSize.X / 2 + BoxPosition.X, BoxPosition.Y - 16)
												Name.Visible = true
												Name.Transparency = GeneralOpacity
												Name.Color = flags["PlayerESP_Name_Color"].Color
											end
										end
										-- 
										do -- // Highlights
											if flags["PlayerESP_Highlights"] then 
												Highlights.Enabled = true 
												Highlights.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
												Highlights.FillColor = flags["PlayerESP_HighlightFillSettings"].Color
												Highlights.OutlineColor = flags["PlayerESP_HighlightOutlineSettings"].Color
												Highlights.Adornee = Object
												Highlights.OutlineTransparency = flags["PlayerESP_HighlightOutlineSettings"].Transparency
												Highlights.FillTransparency = flags["PlayerESP_HighlightOutlineSettings"].Transparency
											end 
										end 
										--
										do -- // Corner Boxes
											if flags["PlayerESP_Box"] then
												if flags["PlayerESP_Box_Type"] == "Corner" then
													local BoxCorners, BoxColor1, BoxColor2 = Renders.Corners, flags["PlayerESP_Box_Color1"].Color, flags["PlayerESP_Box_Color2"].Color
													-- // Inlines
													do
														BoxCorners[1].Visible = true
														BoxCorners[1].From = TL
														BoxCorners[1].To = BoxCorners[1].From + NewVector2(0, BoxSize.X / 3)  
														BoxCorners[1].Color = BoxColor1
														--
														BoxCorners[2].Visible = true
														BoxCorners[2].From = TL + NewVector2(1, 0)
														BoxCorners[2].To = BoxCorners[2].From + NewVector2(BoxSize.X / 3, 0)
														BoxCorners[2].Color = BoxColor1
														--
														BoxCorners[3].Visible = true
														BoxCorners[3].From = TR
														BoxCorners[3].To = BoxCorners[3].From + NewVector2(-BoxSize.X / 3, 0)
														BoxCorners[3].Color = BoxColor1
														--
														BoxCorners[4].Visible = true
														BoxCorners[4].From = TR
														BoxCorners[4].To = BoxCorners[4].From + NewVector2(0, BoxSize.X / 3)
														BoxCorners[4].Color = BoxColor1
														--
														BoxCorners[5].Visible = true
														BoxCorners[5].From = BR + NewVector2(0, 1)
														BoxCorners[5].To = BoxCorners[5].From + NewVector2(0, -BoxSize.X / 3)
														BoxCorners[5].Color = BoxColor1
														--
														BoxCorners[6].Visible = true
														BoxCorners[6].From = BR
														BoxCorners[6].To = BoxCorners[6].From + NewVector2(-BoxSize.X / 3, 0)
														BoxCorners[6].Color = BoxColor1
														--
														BoxCorners[7].Visible = true
														BoxCorners[7].From = BL + NewVector2(0, 1)
														BoxCorners[7].To = BoxCorners[7].From + NewVector2(0, -BoxSize.X / 3)
														BoxCorners[7].Color = BoxColor1
														--
														BoxCorners[8].Visible = true
														BoxCorners[8].From = BL
														BoxCorners[8].To = BoxCorners[8].From + NewVector2(BoxSize.X / 3, 0)
														BoxCorners[8].Color = BoxColor1
													end
													-- // Outlines
													do
														BoxCorners[9].Visible = true
														BoxCorners[9].From = BoxCorners[1].From + NewVector2(0, -1)
														BoxCorners[9].To = BoxCorners[1].To + NewVector2(0, 1)
														BoxCorners[9].Color = BoxColor2
														--
														BoxCorners[10].Visible = true
														BoxCorners[10].From = BoxCorners[2].From
														BoxCorners[10].To = BoxCorners[2].To + NewVector2(1, 0)
														BoxCorners[10].Color = BoxColor2
														--
														BoxCorners[11].Visible = true
														BoxCorners[11].From = BoxCorners[3].From + NewVector2(2, 0)
														BoxCorners[11].To = BoxCorners[3].To + NewVector2(-1, 0)
														BoxCorners[11].Color = BoxColor2
														--
														BoxCorners[12].Visible = true
														BoxCorners[12].From = BoxCorners[4].From
														BoxCorners[12].To = BoxCorners[4].To + NewVector2(0, 1)
														BoxCorners[12].Color = BoxColor2
														--
														BoxCorners[13].Visible = true
														BoxCorners[13].From = BoxCorners[5].From
														BoxCorners[13].To = BoxCorners[5].To + NewVector2(0, -1)
														BoxCorners[13].Color = BoxColor2
														--
														BoxCorners[14].Visible = true
														BoxCorners[14].From = BoxCorners[6].From + NewVector2(2, 0)
														BoxCorners[14].To = BoxCorners[6].To + NewVector2(-1, 0)
														BoxCorners[14].Color = BoxColor2
														--
														BoxCorners[15].Visible = true
														BoxCorners[15].From = BoxCorners[7].From
														BoxCorners[15].To = BoxCorners[7].To + NewVector2(0, -1)
														BoxCorners[15].Color = BoxColor2
														--
														BoxCorners[16].Visible = true
														BoxCorners[16].From = BoxCorners[8].From + NewVector2(-1, 0)
														BoxCorners[16].To = BoxCorners[8].To + NewVector2(1, 0)
														BoxCorners[16].Color = BoxColor2
													end
													--
													for Index = 1, 16 do
														BoxCorners[Index].Transparency = GeneralOpacity
													end
												else
													local Box = Renders.BoxInline
													local BoxOutline = Renders.BoxOutline
													--
													Box.Size = BoxSize
													Box.Position = BoxPosition
													Box.Transparency = GeneralOpacity
													Box.Color = flags["PlayerESP_Box_Color1"].Color
													Box.Visible = true
													--
													BoxOutline.Size = BoxSize
													BoxOutline.Position = BoxPosition
													BoxOutline.Transparency = GeneralOpacity
													BoxOutline.Color = flags["PlayerESP_Box_Color2"].Color
													BoxOutline.Visible = true
												end
											end
											--
											if flags["PlayerESP_BoxFill"] then
												local BoxFill = Renders.BoxFill
												--
												BoxFill.Size = BoxSize
												BoxFill.Position = BoxPosition
												BoxFill.Transparency = TransparencyMultplier - flags["PlayerESP_BoxFill_Color"].Transparency
												BoxFill.Color = flags["PlayerESP_BoxFill_Color"].Color
												BoxFill.Visible = true
											end
										end
										--
										do -- // HeatlhBar
											if flags["PlayerESP_HealthBar"] then
												local ArmorColor = flags["PlayerESP_ArmorBarColor"].Color
												local HealthSize = (Floor(BoxSize.Y * (Info.Health / Info.MaxHealth)))
												local Color = utility:Lerp(Info.Health / Info.MaxHealth, flags["PlayerESP_HealthBar_Color_Higher"].Color, flags["PlayerESP_HealthBar_Color_Low"].Color)
												local Height = ((BoxPosition.Y + BoxSize.Y) - HealthSize)
												--
												-- // Bars
												local HealthBarInline, HealthBarOutline, HealthBarValue = Renders.Health, Renders.HealthOutline, Renders.HealthText
												local HealthBarTransparency = GeneralOpacity
												--
												HealthBarInline.Color = Color
												HealthBarInline.Size = NewVector2(2, HealthSize)
												HealthBarInline.Position = NewVector2(BoxPosition.X - 5, Height)
												HealthBarInline.Visible = true
												HealthBarInline.Transparency = HealthBarTransparency
												--
												HealthBarOutline.Size = NewVector2(4, BoxSize.Y + 2)
												HealthBarOutline.Position = NewVector2(BoxPosition.X - 6, BoxPosition.Y - 1)
												HealthBarOutline.Visible = true
												HealthBarOutline.Transparency = HealthBarTransparency
												--
												do -- // Value
													if flags["PlayerESP_HealthNumber"] then
														local Text = Floor(Info.Health), BoxSize.Y
														local ArmorText = Renders.ArmorBarText
														local HealthNumberPosition = NewVector2((BoxPosition.X + 1), BoxPosition.Y + BoxSize.Y)
														local Offset = flags["PlayerESP_ArmorBar"] and 23 or 18 
														--
														HealthBarValue.Text = Text
														HealthBarValue.Color = Color
														HealthBarValue.Position = NewVector2(HealthNumberPosition.X - Offset, HealthNumberPosition.Y - (Info.Health / Info.MaxHealth) * BoxSize.Y)
														HealthBarValue.Visible = true
														HealthBarValue.Transparency = HealthBarTransparency
														-- 
														if flags["PlayerESP_ArmorBar"] then 
															ArmorText.Text = tostring(Info.ArmorValue)
															ArmorText.Color = ArmorColor
															ArmorText.Position = NewVector2(HealthNumberPosition.X - Offset, HealthNumberPosition.Y - (Info.ArmorValue / 200) * BoxSize.Y)
															ArmorText.Visible = true
															ArmorText.Transparency = HealthBarTransparency
														end 
													end
												end
												-- 
												do 
													if flags["PlayerESP_ArmorBar"] then 
														local ArmorBar, ArmorBarOutline = Renders.ArmorBar, Renders.ArmorBarOutline
														-- 
														local ArmorSize = (Floor(BoxSize.Y * (Info.ArmorValue / 200)))
														local ArmorHeight = ((BoxPosition.Y + BoxSize.Y) - ArmorSize)
														-- 
														ArmorBar.Color = ArmorColor
														ArmorBar.Size = NewVector2(2, ArmorSize)
														ArmorBar.Position = NewVector2(BoxPosition.X - 10, ArmorHeight)
														ArmorBar.Visible = true
														ArmorBar.Transparency = HealthBarTransparency
														--
														ArmorBarOutline.Size = NewVector2(4, BoxSize.Y + 2)
														ArmorBarOutline.Position = NewVector2(BoxPosition.X - 11, BoxPosition.Y - 1)
														ArmorBarOutline.Visible = true
														ArmorBarOutline.Transparency = HealthBarTransparency
													end 
												end 
											end
										end
										-- 
										do -- // Gun Icons 
											if flags["PlayerESP_GunIcons"] and Info.ToolHeld ~= "None" and images[Info.ToolHeld] ~= nil then 
												local Gun = Renders.GunIcon
												-- 
												if tick() - Info.gunTick > 0.2 then 
													Info.gunTick = tick()
													Gun.Data = images[Info.ToolHeld] 
												end 
												Gun.Visible = true 
												Gun.Size = NewVector2(51.9, 22.3)
												Gun.Position = BoxPosition + NewVector2(BoxSize.X / 2, (BoxSize.Y + 2)) - NewVector2(Gun.Size.X/2, 0)
												Add += 22.3
											else 
												Add = 0 
											end 
										end 
										--
										do -- // Weapon
											if flags["PlayerESP_Weapon"] then
												local Weapon = Renders.Weapon
												--
												Weapon.Text = Info.ToolHeld
												Weapon.Position = BoxPosition + NewVector2(BoxSize.X / 2, (BoxSize.Y + 2) + Add)
												Weapon.Color = flags["PlayerESP_Weapon_Color"].Color
												Weapon.Transparency = GeneralOpacity
												Weapon.Visible = true
											end
										end
										--
										do -- // Flag
											if flags["PlayerESP_Flags"] then
												local Flag = Renders.Flag
												local FlagStr = ""
												--
												if Find(flags["PlayerESP_Flag_Options"], "Distance") then
													FlagStr ..= ("%sm\n"):format(Round(DistanceToPlayer))
												end
												-- 
												if Find(flags["PlayerESP_Flag_Options"], "Knocked") and Player.Character.BodyEffects then
													FlagStr ..= ("%s\n"):format(tostring(Object.BodyEffects["K.O"].Value and "KNOCKED" or ""))
												end
												--
												Flag.Text = FlagStr
												Flag.Position = NewVector2(BoxSize.X + BoxPosition.X + 3, BoxPosition.Y - 2)
												Flag.Visible = true
												Flag.Color = flags["PlayerESP_FlagsColor"].Color
												Flag.Transparency = GeneralOpacity
											end
										end		
									else 
										do -- // Name
											if flags["Self_PlayerESP_Name"] then
												local Name = Renders.Name
												--
												Name.Text = Player.Name
												Name.Position = NewVector2(BoxSize.X / 2 + BoxPosition.X, BoxPosition.Y - 16)
												Name.Visible = true
												Name.Transparency = GeneralOpacity
												Name.Color = flags["Self_PlayerESP_Name_Color"].Color
											end
										end
										--    
										do -- // Highlights
											if flags["Self_PlayerESP_Highlights"] then 
												Highlights.Enabled = true 
												Highlights.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
												Highlights.FillColor = flags["Self_PlayerESP_HighlightFillSettings"].Color
												Highlights.OutlineColor = flags["Self_PlayerESP_HighlightOutlineSettings"].Color
												Highlights.Adornee = Object
												Highlights.OutlineTransparency = flags["Self_PlayerESP_HighlightOutlineSettings"].Transparency
												Highlights.FillTransparency = flags["Self_PlayerESP_HighlightOutlineSettings"].Transparency
											end 
										end 
										--
										do -- // Corner Boxes
											if flags["Self_PlayerESP_Box"] then
												local Box = Renders.BoxInline
												local BoxOutline = Renders.BoxOutline
												--
												Box.Size = BoxSize
												Box.Position = BoxPosition
												Box.Transparency = GeneralOpacity
												Box.Color = flags["Self_PlayerESP_Box_Color1"].Color
												Box.Visible = true
												--
												BoxOutline.Size = BoxSize
												BoxOutline.Position = BoxPosition
												BoxOutline.Transparency = GeneralOpacity
												BoxOutline.Color = flags["Self_PlayerESP_Box_Color2"].Color
												BoxOutline.Visible = true
											end
											--
											if flags["Self_PlayerESP_Box"] then
												local BoxFill = Renders.BoxFill
												--
												BoxFill.Size = BoxSize
												BoxFill.Position = BoxPosition
												BoxFill.Transparency = TransparencyMultplier - flags["Self_PlayerESP_BoxFill_Color"].Transparency
												BoxFill.Color = flags["Self_PlayerESP_BoxFill_Color"].Color
												BoxFill.Visible = true
											end
										end
										--
										do -- // HeatlhBar
											if flags["Self_PlayerESP_HealthBar"] then
												local ArmorColor = flags["Self_PlayerESP_ArmorBarColor"].Color
												local HealthSize = (Floor(BoxSize.Y * (Info.Health / Info.MaxHealth)))
												local Color = utility:Lerp(Info.Health / Info.MaxHealth, flags["Self_PlayerESP_HealthBar_Color_Higher"].Color, flags["Self_PlayerESP_HealthBar_Color_Low"].Color)
												local Height = ((BoxPosition.Y + BoxSize.Y) - HealthSize)
												--
												-- // Bars
												local HealthBarInline, HealthBarOutline, HealthBarValue = Renders.Health, Renders.HealthOutline, Renders.HealthText
												local HealthBarTransparency = GeneralOpacity
												--
												HealthBarInline.Color = Color
												HealthBarInline.Size = NewVector2(2, HealthSize)
												HealthBarInline.Position = NewVector2(BoxPosition.X - 5, Height)
												HealthBarInline.Visible = true
												HealthBarInline.Transparency = HealthBarTransparency
												--
												HealthBarOutline.Size = NewVector2(4, BoxSize.Y + 2)
												HealthBarOutline.Position = NewVector2(BoxPosition.X - 6, BoxPosition.Y - 1)
												HealthBarOutline.Visible = true
												HealthBarOutline.Transparency = HealthBarTransparency
												--
												do -- // Value
													if flags["Self_PlayerESP_HealthNumber"] then
														local Text = Floor(Info.Health), BoxSize.Y
														local ArmorText = Renders.ArmorBarText
														local HealthNumberPosition = NewVector2((BoxPosition.X + 1), BoxPosition.Y + BoxSize.Y)
														local Offset = flags["Self_PlayerESP_ArmorBar"] and 23 or 18 
														--
														HealthBarValue.Text = Text
														HealthBarValue.Color = Color
														HealthBarValue.Position = NewVector2(HealthNumberPosition.X - Offset, HealthNumberPosition.Y - (Info.Health / Info.MaxHealth) * BoxSize.Y)
														HealthBarValue.Visible = true
														HealthBarValue.Transparency = HealthBarTransparency
														-- 
														if flags["Self_PlayerESP_ArmorBar"] then 
															ArmorText.Text = tostring(Info.ArmorValue)
															ArmorText.Color = ArmorColor
															ArmorText.Position = NewVector2(HealthNumberPosition.X - Offset, HealthNumberPosition.Y - (Info.ArmorValue / 200) * BoxSize.Y)
															ArmorText.Visible = true
															ArmorText.Transparency = HealthBarTransparency
														end 
													end
												end
												-- 
												do 
													if flags["Self_PlayerESP_ArmorBar"] then 
														local ArmorBar, ArmorBarOutline = Renders.ArmorBar, Renders.ArmorBarOutline
														-- 
														local ArmorSize = (Floor(BoxSize.Y * (Info.ArmorValue / 200)))
														local ArmorHeight = ((BoxPosition.Y + BoxSize.Y) - ArmorSize)
														-- 
														ArmorBar.Color = ArmorColor
														ArmorBar.Size = NewVector2(2, ArmorSize)
														ArmorBar.Position = NewVector2(BoxPosition.X - 10, ArmorHeight)
														ArmorBar.Visible = true
														ArmorBar.Transparency = HealthBarTransparency
														--
														ArmorBarOutline.Size = NewVector2(4, BoxSize.Y + 2)
														ArmorBarOutline.Position = NewVector2(BoxPosition.X - 11, BoxPosition.Y - 1)
														ArmorBarOutline.Visible = true
														ArmorBarOutline.Transparency = HealthBarTransparency
													end 
												end 
											end
										end
										-- 
										do -- // Gun Icons 
											if flags["Self_PlayerESP_GunIcons"] and Info.ToolHeld ~= "None" and images[Info.ToolHeld] ~= nil then 
												local Gun = Renders.GunIcon
												-- 
												if tick() - Info.gunTick > 0.75 then 
													Info.gunTick = tick()
													Gun.Data = images[Info.ToolHeld] 
												end 
												Gun.Visible = true 
												Gun.Size = NewVector2(51.9, 22.3)
												Gun.Position = BoxPosition + NewVector2(BoxSize.X / 2, (BoxSize.Y + 2)) - NewVector2(Gun.Size.X/2, 0)
												Add += 22.3
											else 
												Add = 0 
											end 
										end 
										--
										do -- // Weapon
											if flags["Self_PlayerESP_Weapon"] then
												local Weapon = Renders.Weapon
												--
												Weapon.Text = Info.ToolHeld
												Weapon.Position = BoxPosition + NewVector2(BoxSize.X / 2, (BoxSize.Y + 2) + Add)
												Weapon.Color = flags["Self_PlayerESP_Weapon_Color"].Color
												Weapon.Transparency = GeneralOpacity
												Weapon.Visible = true
											end
										end
										--
										do -- // Flag
											if flags["Self_PlayerESP_Flags"] then
												local Flag = Renders.Flag
												local FlagStr = ""
												--
												if Find(flags["Self_PlayerESP_Flag_Options"], "Distance") then
													FlagStr ..= ("%sm\n"):format(Round(DistanceToPlayer))
												end
												-- 
												if Find(flags["Self_PlayerESP_Flag_Options"], "Knocked") and Player.Character.BodyEffects then
													FlagStr ..= ("%s\n"):format(tostring(Object.BodyEffects["K.O"].Value and "KNOCKED" or ""))
												end
												--
												Flag.Text = FlagStr
												Flag.Position = NewVector2(BoxSize.X + BoxPosition.X + 3, BoxPosition.Y - 2)
												Flag.Visible = true
												Flag.Color = flags["Self_PlayerESP_FlagsColor"].Color
												Flag.Transparency = GeneralOpacity
											end
										end		
									end 
									return
								end
							end
						end
						--
						return Self:Opacity(false)
					end
					--
					return Self:Remove()
				end
			end
			-- 
			function Visuals:Unload()
				for Index, Base in pairs(Visuals.Bases) do
					Base:Remove()
				end
			end
		end 

		-- // Creations + Setting Stuff 
		do 
			utility.drawings["Tracer"] = utility:drawObject("Line", {})
			utility.drawings["Aim Assist FOV"] = utility:drawObject("Circle", {Visible = false, Radius = 8, Color = Color3.fromRGB(0,0,0), Filled = false})
			utility.drawings["Sub"] = utility:drawObject("Text", {Outline = true, Text = "lunar", Color = Color3.new(1, 1, 1), Size = 13})
			utility.drawings["Domain"] = utility:drawObject("Text", {Outline = true, Text = ".vip", Color = Color3.fromRGB(132, 108, 188), Size = 13})
			--
			for i,v in pairs(bodyClone:GetDescendants()) do 
				if v:IsA("BasePart") and v.Name ~= "HumanoidRootPart" then 
					v.CanCollide = false 
					v.Transparency = 0
				end 
			end 
			
			-- drawing lines for crosshair
			do 
				for Index = 1, 4 do
					local line = utility:drawObject("Line",{
						Visible = false,
						Color = Color3.fromRGB(255,255,255),
						Thickness = 1,
						ZIndex = 2,
						Transparency = 1
					})
					--
					crosshair_Lines[Index] = line
					-- 
					local line_1 = utility:drawObject("Line",{
						Visible = false,
						Color = Color3.fromRGB(0, 0, 0),
						Thickness = 2.5,
						ZIndex = 1,
						Transparency = 1
					})
					--
					crosshair_Outlines[Index] = line_1
				end
			end 
			
			-- // Chat spam framework
			do 
				Messages = {
					["Scottish"] = {
						"You Grandma Still Wears Shin Pads To Work ü§£ü§£",
						"Melon Head",
						"Your Ma Is A Bin Man ü§£ü§£",
						"Taped You Like I Did To Your Ma",
						"Fore Headed Mong",
						"Such A Fruit",
						"YoUr A BoOt",
						"keep Trying You Jobby",
					},
					["Lunar"] = {
						"Owned By Lunar",
						"Lunar Lunar Lunar RAHHHHH",
						"Slammed by Lunar",
						"YOU GOT SLAMMED BY LUNAR",
						"SEEMS LIKE YOU NEED LUNAR GG/LUNARVIP",
						"GG/LUNARVIP GG/LUNARVIP GG/LUNARVIP",
						"GG/LUNARVIP <-- THIS WILL LET YOU COPE WITH YOUR ISSUES",
						"WHAT YOU CANT BEAT LUNAR?",
						"PRO TIP: BUY LUNAR",
					},
				}
				utx = {
					["symbols"] = {
						"~",
						"!",
						"@",
						"#",
						"$",
						"%",
						"^",
						"&",
						"*",
						"(",
						")",
						"_",
						"+",
						"{",
						"}",
						"|",
						":",
						'"',
						"<",
						">",
						"?",
						".",
						",",
						"/",
						"'",
					},
					["emojis"] = {
						"üòé",
						"ü§£",
						"üëÄ",
						"üôÑ",
						"üî•",
						"üòÖ",
						"üòÇ",
						"üòπ",
						"üòõ",
						"ü§©",
						"üåà",
						"üòé",
						"ü§†",
						"üòî",
						"ü§°",
						"üí§",
						"üö∂",
						"üôÄ",
						"üòÇ",
						"üìà",
						"ü§è",
						"üåà",
						"üòé",
						"ü§†",
						"üòî",
					},
				}
			end 
		end 

		-- // Hit Reg 
		do 
			function HitReg:HitMarker(Gap, Color, Time) 
				local Lines = {} 
				local Hitmarker = true 
				-- 
				for i = 1, 4 do 
					Lines[i] = utility:drawObject("Line", {Color = Color, Visible = true, Transparency = 1, Thickness = 1})
				end 
				-- 
				local function setMarkerPos()
					Lines[1].From = NewVector2(Mouse.X + Gap, (Mouse.Y + Offset) + Gap)
					Lines[1].To = NewVector2(Mouse.X + (Gap * 2.5), (Mouse.Y + Offset) + (Gap * 2.5))
					--
					Lines[2].From = NewVector2(Mouse.X + Gap, (Mouse.Y + Offset) - Gap)
					Lines[2].To = NewVector2(Mouse.X + (Gap * 2.5), (Mouse.Y + Offset) - (Gap * 2.5))
					--
					Lines[3].From = NewVector2(Mouse.X - Gap, (Mouse.Y + Offset) + Gap)
					Lines[3].To = NewVector2(Mouse.X - (Gap * 2.5), (Mouse.Y + Offset) + (Gap * 2.5))
					--
					Lines[4].From = NewVector2(Mouse.X - Gap, (Mouse.Y + Offset) - Gap)
					Lines[4].To = NewVector2(Mouse.X - (Gap * 2.5), (Mouse.Y + Offset) - (Gap * 2.5))
				end 
				-- 
				delay(Time, function()
					for i = Time, 0, -0.1 do
						task.wait()
						for _, Value in next, Lines do
							Value.Transparency = i
						end
						setMarkerPos()
					end
					-- 
					for _, Value in next, Lines do
						Value:Remove()
					end
					-- 
					Hitmarker = false 
				end)
			end 
			-- 
			function HitReg:HitMarker3D(Gap, Color, Time, Hit) 
				local Lines = {} 
				local Hitmarker = true 
				-- 
				for i = 1, 4 do 
					Lines[i] = utility:drawObject("Line", {Color = Color, Visible = true, Transparency = 1, Thickness = 1})
				end     
				-- 
				task.spawn(function()
					while Hitmarker do 
						local Position3D, OnScreen = Camera:WorldToViewportPoint(Hit)
						-- 
						Lines[1].From = NewVector2(Position3D.X + Gap, Position3D.Y + Gap)
						Lines[1].To = NewVector2(Position3D.X + (Gap * 2.5), Position3D.Y + (Gap * 2.5))
						--
						Lines[2].From = NewVector2(Position3D.X + Gap, Position3D.Y - Gap)
						Lines[2].To = NewVector2(Position3D.X + (Gap * 2.5), Position3D.Y - (Gap * 2.5))
						--
						Lines[3].From = NewVector2(Position3D.X - Gap, Position3D.Y + Gap)
						Lines[3].To = NewVector2(Position3D.X - (Gap * 2.5), Position3D.Y + (Gap * 2.5))
						--
						Lines[4].From = NewVector2(Position3D.X - Gap, Position3D.Y - Gap)
						Lines[4].To = NewVector2(Position3D.X - (Gap * 2.5), Position3D.Y - (Gap * 2.5))
						-- 
						for _, Value in next, Lines do
							Value.Visible = OnScreen
						end
						-- 
						task.wait()
					end 
				end)
				-- 
				delay(Time, function()
					for i = Time, 0, -0.1 do
						task.wait()
						for _, Value in next, Lines do
							Value.Transparency = i
						end
					end
					-- 
					for _, Value in next, Lines do
						Value:Remove()
					end
					-- 
					Hitmarker = false 
				end)
			end 
			--
			function HitReg:HitEffect(Type, Character)
				local function convert(color)
					return color.r/5, color.g/5, color.b/5
				end 
				-- 
				local function Weld(x,y)
					local W = Instance.new("Weld")
					W.Part0 = x
					W.Part1 = y
					local CJ = NewCFrame(x.Position)
					local C0 = x.CFrame:inverse()*CJ
					local C1 = y.CFrame:inverse()*CJ
					W.C0 = C0
					W.C1 = C1
					W.Parent = x
				end
				-- 
				if Type == "Confetti" then 
					task.spawn(function()
						local Confetti_Amount = 20000
						local RootPart = Character.HumanoidRootPart
						local ConfettiClone = hitmodule:Clone()
						ConfettiClone.RainbowParticles.Rate = Confetti_Amount
						ConfettiClone.Parent = workspace
						ConfettiClone.CanCollide = false
						ConfettiClone.CFrame = RootPart.CFrame
						-- 
						for i = Confetti_Amount, 0 , -(Confetti_Amount/50) do 
							task.wait()
							ConfettiClone.RainbowParticles.Rate = i
						end 
						-- 
						delay(5, function()
							ConfettiClone:Destroy()
						end)
					end)
				elseif Type == "Nova" then 
					local Effect = Nova:Clone() 
					Effect.Parent = Character.HumanoidRootPart
					--	
					for i,v in pairs(Effect:GetChildren()) do 
						v.Rate = 0
						v.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.new(0, 0, 0)), ColorSequenceKeypoint.new(0.5, Color3.new(convert(flags["Hit Effect Settings"].Color))),ColorSequenceKeypoint.new(1, Color3.new(0, 0, 0)),})
						v:Emit()
					end 
					-- 	
					delay(2, function()
						Effect:Destroy()
					end)
				else 
					local Clone = SparklesEffect:Clone() 
					Clone.Parent = Character.HumanoidRootPart
					Clone.LockedToPart = false 
					Clone.Acceleration = Vector3.new(0,-100,0)
					-- 
					Clone:Emit(15)
					--
					delay(5, function() Clone:Destroy() end)
				end 
			end 
			-- 
			function HitReg:HitSound(Id, Volume, Pitch)
				local Sound = Instance.new("Sound", game:GetService("SoundService")); local PitchSound = Instance.new("PitchShiftSoundEffect", Sound)
				-- 
				Sound.SoundId = "rbxassetid://".. Id ..""
				--[[writefile("song.mp3", game:HttpGet("https://lunar.feet.media/osiris/cmwr7ecb.mp3"))
				Sound.SoundId = getcustomasset("song.mp3")]]
				Sound.Volume = Volume
				PitchSound.Octave = Pitch
				Sound.PlayOnRemove = true
				Sound:Destroy()
			end 
		end 

		for i,v in pairs(LocalPlayer.Character:GetChildren()) do 
			if v:IsA("BasePart") then 
				table.insert(utility.bodyParts, v.Name)
			end 
		end 

		-- // Tweens 
		do
			Tween.EasingStyles = {
				[Enum.EasingStyle.Linear] = {
					[Enum.EasingDirection.In] = function(Delta)
						return Delta
					end,
					[Enum.EasingDirection.Out] = function(Delta)
						return Delta
					end,
					[Enum.EasingDirection.InOut] = function(Delta)
						return Delta
					end
				},
				[Enum.EasingStyle.Cubic] = {
					[Enum.EasingDirection.In] = function(Delta)
						return Delta ^ 3
					end,
					[Enum.EasingDirection.Out] = function(Delta)
						return ((Delta - 1) ^ 3) + 1
					end,
					[Enum.EasingDirection.InOut] = function(Delta)
						if 0 <= Delta and Delta <= 0.5 then
							return (4 * Delta ^ 3)
						elseif 0.5 <= Delta and Delta <= 1 then
							return (4 * (Delta - 1) ^ 3) + 1
						end
					end
				},
				[Enum.EasingStyle.Quad] = {
					[Enum.EasingDirection.In] = function(Delta)
						return Delta ^ 2
					end,
					[Enum.EasingDirection.Out] = function(Delta)
						return (-(Delta - 1) ^ 2) + 1
					end,
					[Enum.EasingDirection.InOut] = function(Delta)
						if 0 <= Delta and Delta <= 0.5 then
							return (2 * Delta ^ 2)
						elseif 0.5 <= Delta and Delta <= 1 then
							return -(2 * (Delta - 1) ^ 2) + 1
						end
					end
				},
				[Enum.EasingStyle.Quart] = {
					[Enum.EasingDirection.In] = function(Delta)
						return Delta ^ 4
					end,
					[Enum.EasingDirection.Out] = function(Delta)
						return (-(Delta - 1) ^ 4) + 1
					end,
					[Enum.EasingDirection.InOut] = function(Delta)
						if 0 <= Delta and Delta <= 0.5 then
							return (8 * Delta ^ 4)
						elseif 0.5 <= Delta and Delta <= 1 then
							return -(8 * (Delta - 1) ^ 4) + 1
						end
					end
				},
				[Enum.EasingStyle.Quint] = {
					[Enum.EasingDirection.In] = function(Delta)
						return Delta ^ 5
					end,
					[Enum.EasingDirection.Out] = function(Delta)
						return ((Delta - 1) ^ 5) + 1
					end,
					[Enum.EasingDirection.InOut] = function(Delta)
						if 0 <= Delta and Delta <= 0.5 then
							return (16 * Delta ^ 5)
						elseif 0.5 <= Delta and Delta <= 1 then
							return (16 * (Delta - 1) ^ 5) + 1
						end
					end
				},
				[Enum.EasingStyle.Sine] = {
					[Enum.EasingDirection.In] = function(Delta)
						return Sin(((Pi / 2) * Delta) - (Pi / 2)) + 1
					end,
					[Enum.EasingDirection.Out] = function(Delta)
						return Sin((Pi / 2) * Delta)
					end,
					[Enum.EasingDirection.InOut] = function(Delta)
						return (0.5 * Sin((Pi * Delta) - (Pi / 2))) + 0.5
					end
				},
				[Enum.EasingStyle.Exponential] = {
					[Enum.EasingDirection.In] = function(Delta)
						return (2 ^ ((10 * Delta) - 10)) - 0.001
					end,
					[Enum.EasingDirection.Out] = function(Delta)
						return 1.001 * (-2 ^ -(10 * Delta)) + 1
					end,
					[Enum.EasingDirection.InOut] = function(Delta)
						if 0 <= Delta and Delta <= 0.5 then
							return 0.5 * (2 ^ ((20 * Delta) - 10)) - 0.0005
						elseif 0.5 <= Delta and Delta <= 1 then
							return 0.50025 * (-2 ^ (-(20 * Delta) + 10)) + 1
						end
					end
				},
				[Enum.EasingStyle.Back] = {
					[Enum.EasingDirection.In] = function(Delta)
						return (Delta * Delta) * (Delta * (1.70158 + 1) - 1.70158)
					end,
					[Enum.EasingDirection.Out] = function(Delta)
						return ((Delta - 1) ^ 2) * ((Delta - 1) * (1.70158 + 1) + 1.70158) + 1
					end,
					[Enum.EasingDirection.InOut] = function(Delta)
						if 0 <= Delta and Delta <= 0.5 then
							return (2 * (Delta * Delta)) * ((2 * Delta) * (2.5949095 + 1) - 2.5949095)
						elseif 0.5 <= Delta and Delta <= 1 then
							return (0.5 * ((2 * Delta) - 2) ^ 2) * (((2 * Delta) - 2) * (2.5949095 + 1) + 2.5949095) + 1
						end
					end
				},
				[Enum.EasingStyle.Bounce] = {
					[Enum.EasingDirection.In] = function(Delta)
						if 0 <= Delta and Delta <= (1 / 2.75) then
							return 7.5625 * (Delta * Delta)
						elseif (1 / 2.75) <= Delta and Delta <= (2 / 2.75) then
							return 7.5625 * (Delta - (1.5 / 2.75)) ^ 2 + 0.75
						elseif (2 / 2.75) <= Delta and Delta <= (2.5 / 2.75) then
							return 7.5625 * (Delta - (2.25 / 2.75)) ^ 2 + 0.9375
						elseif (2.5 / 2.75) <= Delta and Delta <= 1 then
							return 7.5625 * (Delta - (2.625 / 2.75)) ^ 2 + 0.984375
						end
					end,
					[Enum.EasingDirection.Out] = function(Delta)
						if 0 <= Delta and Delta <= (0.25 / 2.75) then
							return -7.5625 * (1 - Delta - (2.625 / 2.75)) ^ 2 + 0.015625
						elseif (0.25 / 2.75) <= Delta and Delta <= (0.75 / 2.75) then
							return -7.5625 * (1 - Delta - (2.25 / 2.75)) ^ 2 + 0.0625
						elseif (0.75 / 2.75) <= Delta and Delta <= (1.75 / 2.75) then
							return -7.5625 * (1 - Delta - (1.5 / 2.75)) ^ 2 + 0.25
						elseif (1.75 / 2.75) <= Delta and Delta <= 1 then
							return 1 - 7.5625 * (1 - Delta) ^ 2
						end
					end,
					[Enum.EasingDirection.InOut] = function(Delta)
						if 0 <= Delta and Delta <= (0.125 / 2.75) then
							return 0.5 * (-7.5625 * (1 - (2 * Delta) - (2.625 / 2.75)) ^ 2 + 0.015625)
						elseif (0.125 / 2.75) <= Delta and Delta <= (0.375 / 2.75) then
							return 0.5 * (-7.5625 * (1 - (2 * Delta) - (2.25 / 2.75)) ^ 2 + 0.0625)
						elseif (0.375 / 2.75) <= Delta and Delta <= (0.875 / 2.75) then
							return 0.5 * (-7.5625 * (1 - (2 * Delta) - (1.5 / 2.75)) ^ 2 + 0.25)
						elseif (0.875 / 2.75) <= Delta and Delta <= 0.5 then
							return 0.5 * (1 - 7.5625 * (1 - (2 * Delta)) ^ 2)
						elseif 0.5 <= Delta and Delta <= (1.875 / 2.75) then
							return 0.5 + 3.78125 * ((2 * Delta) - 1) ^ 2
						elseif (1.875 / 2.75) <= Delta and Delta <= (2.375 / 2.75) then
							return 3.78125 * ((2 * Delta) - (4.25 / 2.75)) ^ 2 + 0.875
						elseif (2.375 / 2.75) <= Delta and Delta <= (2.625 / 2.75) then
							return 3.78125 * ((2 * Delta) - (5 / 2.75)) ^ 2 + 0.96875
						elseif (2.625 / 2.75) <= Delta and Delta <= 1 then
							return 3.78125 * ((2 * Delta) - (5.375 / 2.75)) ^ 2 + 0.9921875
						end
					end
				},
				[Enum.EasingStyle.Elastic] = {
					[Enum.EasingDirection.In] = function(Delta)
						return (-2 ^ (10 * (Delta - 1))) * Sin(((2 * Pi) * (Delta - 1 - (0.3 / 4))) / 0.3)
					end,
					[Enum.EasingDirection.Out] = function(Delta)
						return (2 ^ (-10 * Delta)) * Sin(((2 * Pi) * (Delta - (0.3 / 4))) / 0.3) + 1
					end,
					[Enum.EasingDirection.InOut] = function(Delta)
						if 0 <= Delta and Delta <= 0.5 then
							return -0.5 * (2 ^ ((20 * Delta) - 10)) * Sin(((2 * Pi) * ((2 * Delta) - 1.1125)) / 0.45)
						elseif 0.5 <= Delta and Delta <= 1 then
							return 0.5 * (2 ^ ((-20 * Delta) + 10)) * Sin(((2 * Pi) * ((2 * Delta) - 1.1125)) / 0.45) + 1
						end
					end
				},
				[Enum.EasingStyle.Circular] = {
					[Enum.EasingDirection.In] = function(Delta)
						return -Sqrt(1 - Delta ^ 2) + 1
					end,
					[Enum.EasingDirection.Out] = function(Delta)
						return Sqrt(-(Delta - 1) ^ 2 + 1)
					end,
					[Enum.EasingDirection.InOut] = function(Delta)
						if 0 <= Delta and Delta <= 0.5 then
							return -Sqrt(-Delta ^ 2 + 0.25) + 0.5
						elseif 0.5 <= Delta and Delta <= 1 then
							return Sqrt(-(Delta - 1) ^ 2 + 0.25) + 0.5
						end
					end
				}
			}
		end
	end
end 
--
local crosshair_lineOffsets = utility:generateAngles(4); 
local Window = Library:Window({Size = UDim2.new(0,580,0,600)}) do 
	-- // Rage
	local aiming = Window:Page({Name = "Rage", Weapons = true}) do
		local Settings = aiming:Weapon({Icon = "rbxassetid://6031280882"})
		local Visuals = aiming:Weapon({Icon = "rbxassetid://7300480952"})
		-- 
		local mainTarget = Settings:Section({Name = "Main", Size = 330}) do 
			mainTarget:Toggle({Name = "Enabled", Flag = "Silent Enabled", Risk = true})
			mainTarget:Keybind({Name = "Key", Flag = "Silent_Bind", Mode = "Toggle", callback = function()
				framework:selectTarget(); 
				bodyClone:SetPrimaryPartCFrame(NewCFrame(9959,9999,9990))
			end})
		end 
		-- 
		local targetSettings = Settings:Section({Name = "Settings", Size = 330}) do 
			targetSettings:Toggle({Name = "Look At", Flag = "Look At"})
			targetSettings:Toggle({Name = "Auto Shoot", Flag = "Auto Shoot"})
			targetSettings:Toggle({Name = "Spectate", Flag = "Spectate"})
 			targetSettings:Toggle({Name = "Notify", Flag = "Notify"}) flags["Aim Viewer Bypass"] = true 
		end 
		-- 
		local targetMethods = Settings:Section({Name = "Methods", Size = 330}) do 
			targetMethods:Toggle({Name = "Resolver", Flag = "Resolver"})
			targetMethods:Dropdown({Name = "Resolver Method", Flag = "Resolver Method", Options = {"Recalculate Velocity", "Suppress Velocity", "Move Direction"}, Default = "Recalculate Velocity"})
		end 
		-- 
		local targetPrediction = Settings:Section({Name = "Prediction", Size = 330, Side = "Right"}) do 
			targetPrediction:Toggle({Name = "Auto Prediction", Flag = "Auto Prediction"})
			targetPrediction:Textbox({Name = "Prediction", Flag = "Manual Prediction Value", Placeholder = "Prediction"})
			targetPrediction:Dropdown({Name = "Hit-Part", Flag = "Single Hit Part", Options = utility.bodyParts, Default = "HumanoidRootPart"})
			targetPrediction:Toggle({Name = "Nearest Part", Flag = "Nearest Part"})
			targetPrediction:Dropdown({Name = "Closest Hit Part", Flag = "Closest Hit Part", Options = utility.bodyParts, Default = {"HumanoidRootPart"}, Max = 9e9})
			targetPrediction:Toggle({Name = "Jump Prediction", Flag = "Jump Prediction"})
			targetPrediction:Textbox({Name = "Jump Prediction", Flag = "Manual Offset Value", Placeholder = "Jump Offset"})
			targetPrediction:Dropdown({Name = "Air Hit-Part", Flag = "Air Hit Part", Options = utility.bodyParts, Default = "RightFoot"})
		end 
		-- 
		local targetChecks = Settings:Section({Name = "Checks", Size = 330, Side = "Right"}) do 
			targetChecks:Dropdown({Name = "Checks", Flag = "Silent Checks", Options = {"Knocked Check", "Wall Check", "Friend Check", "Grabbed Check"}, Max = 9e9})
		end 
		-- 
		local targetAutoSelect = Settings:Section({Name = "Auto Select", Size = 330, Side = "Right"}) do 
			targetAutoSelect:Toggle({Name = "Enabled", Flag = "Target Auto Select"})
			targetAutoSelect:Slider({Name = "Delay", Suffix = "ms", Flag = 'Auto Select Delay', Min = 0, Max = 1000, Default = 100, Decimals = 1})
		end 	
		-- 
		local targetStrafe = Settings:Section({Name = "Target Strafe", Size = 330, Side = "Left"}) do 
			targetStrafe:Toggle({Name = "Enabled", Flag = "Target Strafe Enabled", Risk = true})
			targetStrafe:Slider({Name = "Radius", Flag = 'Target Strafe Distance', Min = -15, Max = 15, Default = 10, Decimals = 1})
			targetStrafe:Slider({Name = "Speed", Flag = 'Target Strafe Speed', Min = -15, Max = 15, Default = 10, Decimals = 1})
			targetStrafe:Slider({Name = "Height", Flag = 'Target Strafe Height', Min = -15, Max = 15, Default = 0, Decimals = 1})
		end
		-- 
		local targetVisuals = Visuals:Section({Name = "Visuals", Size = 330, Side = "Left"}) do 
			local line1 = targetVisuals:Toggle({Name = "Line", Flag = "Line Enabled"})
			line1:Colorpicker({Default = Color3.fromRGB(255,0,0), Flag = "Line Settings"});
			targetVisuals:Slider({Name = "Thickness", Flag = 'Line Thickness', Min = 0, Max = 2, Default = 1, Decimals = 0.01, Callback = function(Int)
				utility.drawings["Tracer"].Thickness = Int
			end})
			local highlight = targetVisuals:Toggle({Name = "Highlight", Flag = "Highlight Enabled"})
			highlight:Colorpicker({Default = Color3.fromRGB(0,255,0), Alpha = 0.5, Flag = "Highlight Fill Color"});
			highlight:Colorpicker({Default = Color3.fromRGB(0,125,0), Flag = "Highlight Outline Color"});
			local backtrack = targetVisuals:Toggle({Name = "Backtrack", Flag = "Back Track Enabled"})
			backtrack:Colorpicker({Default = Color3.fromRGB(255, 0, 0), alpha = 0.65, Flag = "Back Track Settings"});
			targetVisuals:Dropdown({Name = "Method", Flag = "Back Track Method", Options = {"Clone", "Follow"}, Default = "Follow"})
			targetVisuals:Dropdown({Name = "Material", Flag = "Back Track Material", Options = {"Neon", "Plastic", "ForceField"}, Default = "Neon"})
			targetVisuals:Slider({Name = "Delay", Flag = 'Back Track Delay', Min = 0, Max = 1, Default = 1, Decimals = 0.05})
			targetVisuals:Toggle({Name = "Target Esp", Flag = "Target Esp"})
		end 
	end
	-- // Legit  
	local legit = Window:Page({Name = "Legit"}) do 
		local Vertical;
		local Horizontal;
		local Smoothness;
		-- 
		local aimAssist = legit:Section({Name = "Aim Assist", Size = 330}) do 
			aimAssist:Toggle({Name = "Enabled", Flag = "Aim Assist"}):Keybind({Name = "Aim Assist", Flag = "Aim Assist Bind", Mode = "Toggle", Callback = function()
				aimAssistTarget = utility.target or utility:getClosestPlayerToCursor(math.huge)
			end}) -- portal is a fuckin g
			local Vertical = aimAssist:Slider({Name = "Horizontal Smoothness", Flag = "Horizontal Smoothness", Min = 0, Max = 100, Default = 20, Decimals = 1})
			Vertical:SetVisible(false)
			local Horizontal = aimAssist:Slider({Name = "Vertical Smoothness", Flag = 'Vertical Smoothness', Min = 0, Max = 100, Default = 20, Decimals = 1})
			Horizontal:SetVisible(false)
			local Smoothness = aimAssist:Slider({Name = "Smoothness", Flag = 'Smoothness', Min = 0, Max = 100, Default = 50, Decimals = 1})
			aimAssist:Dropdown({Name = "Method", Flag = "Aim Assist Method", Options = {"Use Mouse", "Use Camera"}, Default = "Use Camera", Callback = function(Option)
				if Option == "Use Mouse" then 
					Vertical:SetVisible(true)
					Horizontal:SetVisible(true)
					Smoothness:SetVisible(false)
				else 
					Vertical:SetVisible(false)
					Horizontal:SetVisible(false)
					Smoothness:SetVisible(true)
				end 
			end})
		end 
		-- 
		local aimAssist_Settings = legit:Section({Name = "Settings", Size = 330}) do 
			aimAssist_Settings:Dropdown({Name = "Hit-Part", Flag = "Aim Assist Single Hit Part", Options = utility.bodyParts, Default = "HumanoidRootPart"})
			aimAssist_Settings:Toggle({Name = "Jump Prediction", Flag = "Aim Assist Jump Prediction"})
			aimAssist_Settings:Textbox({Name = "Prediction", Flag = "Aim Assist Manual Prediction Value", Placeholder = "Prediction"})
			aimAssist_Settings:Textbox({Name = "Jump Offset", Flag = "Aim Assist Manual Offset Value", Placeholder = "Jump Offset"})
		end 
		-- 
		local aimAssistFov = legit:Section({Name = "Field Of View", Size = 330}) do 
			aimAssistFov:Toggle({Name = "Enabled", Flag = "Aim Assist Field Of View", Callback = function(Bool)
				utility.drawings["Aim Assist FOV"].Visible = Bool 
			end}):Colorpicker({Default = Color3.fromRGB(255, 0, 0), alpha = 0.65, Flag = "Field Of View Color", Callback = function()
				utility.drawings["Aim Assist FOV"].Color = flags["Field Of View Color"].Color
				utility.drawings["Aim Assist FOV"].Transparency = 1 - flags["Field Of View Color"].Transparency
			end});
			aimAssistFov:Slider({Name = "Radius", Flag = 'Aim Assist Field Of View Radius', Min = 0.1, Max = 500, Default = 50, Decimals = 0.1, Callback = function(Int)
				utility.drawings["Aim Assist FOV"].Radius = Int
			end})
			aimAssistFov:Toggle({Name = "Enabled", Flag = "Aim Assist Field Of View Filled", Callback = function(Bool)
				utility.drawings["Aim Assist FOV"].Filled = Bool
			end})
			aimAssistFov:Slider({Name = "Thickness", Flag = 'Aim Assist Field Of View Thickness', Min = 0.1, Max = 3, Default = 1, Decimals = 0.01, Callback = function(Int)
				utility.drawings["Aim Assist FOV"].Thickness = Int
			end})
		end 
		-- 
		local aimAssistChecks = legit:Section({Name = "Checks", Size = 330}) do 
			aimAssistChecks:Dropdown({Name = "Checks", Flag = "Aim Assist Checks", Options = {"Knocked Check", "Wall Check", "Friend Check", "Grabbed Check"}, Max = 9e9})
		end 
	end 	
	-- 	// Esp 
	local esp = Window:Page({Name = "Visuals", Weapons = true}) do 
		local ESP = esp:Weapon({Icon = "rbxassetid://6034281935"})
		local World = esp:Weapon({Icon = "rbxassetid://16997762295"})
		-- 
		local playerEsp = ESP:Section({Name = "Player Esp", Size = 330, Side = "Left"}) do 
			playerEsp:Toggle({Name = "Enabled", Flag = "PlayerESP_Enabled", Callback = function(Bool)
				if Bool then 
					for i,v in next, Players:GetPlayers() do 
						if v ~= LocalPlayer and not Visuals.Bases[v] then 
							Visuals:Create({Player = v})
						end 
					end 
				else 
					Visuals:Unload()
				end 
			end})
			playerEsp:Slider({Name = "Distance", Flag = 'ESP Distance', Min = 0, Max = 5000, Default = 5000, Decimals = 5})
			local box = playerEsp:Toggle({Name = "Boxes", Flag = "PlayerESP_Box"})
			box:Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "PlayerESP_Box_Color1"});
			box:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "PlayerESP_Box_Color2"});
			playerEsp:Toggle({Name = "Box-Fill", Flag = "PlayerESP_BoxFill"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Transparency = 0.7, Flag = "PlayerESP_BoxFill_Color"});
			playerEsp:Dropdown({Name = "Box Type", Flag = "PlayerESP_Box_Type", Options = {"Bounding", "Corner"}, Default = "Bounding"})
			playerEsp:Toggle({Name = "Name", Flag = "PlayerESP_Name"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "PlayerESP_Name_Color"});
			playerEsp:Toggle({Name = "Weapons", Flag = "PlayerESP_Weapon"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "PlayerESP_Weapon_Color"});
			playerEsp:Toggle({Name = "Flags", Flag = "PlayerESP_Flags"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "PlayerESP_FlagsColor"});
			playerEsp:Dropdown({Name = "Flags", Flag = "PlayerESP_Flag_Options", Options = {"Distance", "Knocked"}, Max = 9e9})
			playerEsp:Toggle({Name = "Gun Icons", Flag = "PlayerESP_GunIcons"})
			local highlight = playerEsp:Toggle({Name = "Chams", Flag = "PlayerESP_Highlights"})
			highlight:Colorpicker({Default = Color3.fromHex("#7D0DC3"), Transparency = 0.7, Flag = "PlayerESP_HighlightFillSettings"});
			highlight:Colorpicker({Default = Color3.new(0,0,0), Flag = "PlayerESP_HighlightOutlineSettings"});
		end 
		-- 
		local Properties = ESP:Section({Name = "Properties", Size = 330, Side = "Left"})
			local health = Properties:Toggle({Name = "Health Bar", Flag = "PlayerESP_HealthBar"})
			health:Colorpicker({Default = Color3.fromRGB(0,255,0), Flag = "PlayerESP_HealthBar_Color_Higher"});
			health:Colorpicker({Default = Color3.fromRGB(255,0,0), Flag = "PlayerESP_HealthBar_Color_Low"});
			Properties:Toggle({Name = "Health Number", Flag = "PlayerESP_HealthNumber"})
			Properties:Toggle({Name = "Armor Bar", Flag = "PlayerESP_ArmorBar"}):Colorpicker({Default = Color3.fromRGB(0,0,255), Flag = "PlayerESP_ArmorBarColor"});
		-- 
		local selfEsp = ESP:Section({Name = "Self Esp", Size = 330, Side = "Right"}) do 
			selfEsp:Toggle({Name = "Enabled", Flag = "Self_PlayerESP_Enabled", Callback = function(Bool)
					if Bool then 
						Visuals:Create({Player = LocalPlayer})
					else 
						Visuals.Bases[LocalPlayer]:Remove()
					end 
				end})
			selfEsp:Slider({Name = "Distance", Flag = 'Self_ESP Distance', Min = 0, Max = 5000, Default = 5000, Decimals = 5})
			local box = selfEsp:Toggle({Name = "Boxes", Flag = "Self_PlayerESP_Box"})
			selfEsp:Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "Self_PlayerESP_Box_Color1"});
			selfEsp:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "Self_PlayerESP_Box_Color2"});
			selfEsp:Toggle({Name = "Box-Fill", Flag = "Self_PlayerESP_BoxFill"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Transparency = 0.7, Flag = "Self_PlayerESP_BoxFill_Color"});
			selfEsp:Toggle({Name = "Name", Flag = "Self_PlayerESP_Name"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "Self_PlayerESP_Name_Color"});
			selfEsp:Toggle({Name = "Weapons", Flag = "Self_PlayerESP_Weapon"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "Self_PlayerESP_Weapon_Color"});
			selfEsp:Toggle({Name = "Flags", Flag = "Self_PlayerESP_Flags"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "Self_PlayerESP_FlagsColor"});
			selfEsp:Dropdown({Name = "Flags", Flag = "Self_PlayerESP_Flag_Options", Options = {"Distance", "Knocked"}, Max = 9e9})
			selfEsp:Toggle({Name = "Gun Icons", Flag = "Self_PlayerESP_GunIcons"})
			local highlight = selfEsp:Toggle({Name = "Chams", Flag = "Self_PlayerESP_Highlights"})
			highlight:Colorpicker({Default = Color3.fromHex("#7D0DC3"), Transparency = 0.7, Flag = "Self_PlayerESP_HighlightFillSettings"});
			highlight:Colorpicker({Default = Color3.new(0,0,0), Flag = "Self_PlayerESP_HighlightOutlineSettings"});
		end 
		-- 
		local selfEspProperties = ESP:Section({Name = "Properties", Size = 330, Side = "Right"}) do 
			local health = selfEspProperties:Toggle({Name = "Health Bar", Flag = "Self_PlayerESP_HealthBar"})
			health:Colorpicker({Default = Color3.fromRGB(0,255,0), Flag = "Self_PlayerESP_HealthBar_Color_Higher"});
			health:Colorpicker({Default = Color3.fromRGB(255,0,0), Flag = "Self_PlayerESP_HealthBar_Color_Low"});
			selfEspProperties:Toggle({Name = "Health Number", Flag = "Self_PlayerESP_HealthNumber"})
			selfEspProperties:Toggle({Name = "Armor Bar", Flag = "Self_PlayerESP_ArmorBar"}):Colorpicker({Default = Color3.fromRGB(0,0,255), Flag = "Self_PlayerESP_ArmorBarColor"});
		end 
		--  seperate here
		local worldVisuals = World:Section({Name = "Lighting", Size = 330, Side = "Left"}) do 
			worldVisuals:Toggle({Name = "Master Switch", Flag = "Master Switch", Callback = function()
				for i,v in pairs(Lighting_Save) do 
					Lighting[i] = v 
				end 
			end})
			worldVisuals:Toggle({Name = "Clock Time", Flag = "Clock Time Enabled"})
			worldVisuals:Slider({Name = "Clock Time", Flag = 'Clock Time', Min = 0, Max = 24, Default = 12, Decimals = 0.1})
			worldVisuals:Toggle({Name = "Color Shift Bottom", Flag = "Color Shift Bottom"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "Color Shift Bottom Color"});
			worldVisuals:Toggle({Name = "Ambient", Flag = "Ambient"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "Ambience Color"});
			worldVisuals:Toggle({Name = "Outdoor Ambience", Flag = "Outdoor Ambience"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "Outdoor Ambience color"});
			worldVisuals:Toggle({Name = "Brightness", Flag = "Brightness Enabled"})
			worldVisuals:Slider({Name = "Brightness", Flag = 'Brightness', Min = 0, Max = 20, Default = 3, Decimals = 1})
			worldVisuals:Toggle({Name = "Color Shift Top", Flag = "Color Shift Top"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "Color Shift Top Color"});
			worldVisuals:Toggle({Name = "Fog", Flag = "Fog"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "Fog Color"});
		end 
		-- 
		local bulletTracers = World:Section({Name = "Bullet Modification", Size = 330, Side = "Left"}) do 
			bulletTracers:Toggle({Name = "Bullet Tracers", Flag = "Bullet Tracers"}):Colorpicker({Default = Color3.new(1,1,1), Flag = "Bullet Tracers Color"});
			bulletTracers:Slider({Name = "Lifetime", Flag = 'Tracers Life Time', Min = 0, Max = 10, Default = 2, Decimals = 0.1})
			bulletTracers:Toggle({Name = "Face Camera", Flag = "Face Camera", Default = true})
			bulletTracers:Slider({Name = "Brightness", Flag = 'Bullet Brightness', Min = 0, Max = 20, Default = 6, Decimals = 1})
			bulletTracers:Slider({Name = "Speed", Flag = 'Bullet Speed', Min = 0, Max = 20, Default = 3, Decimals = 0.01})
			bulletTracers:Slider({Name = "Size", Flag = 'Bullet Size', Min = 1, Max = 20, Default = 1, Decimals = 0.01})
			bulletTracers:Toggle({Name = "Bullet Impacts", Flag = "Bullet Impacts"}):Colorpicker({Default = Color3.new(1,1,1), Alpha = 0, Flag = "Bullet Impacts Color"});
			bulletTracers:Slider({Name = "Size", Flag = 'Impact Size', Min = 0.01, Max = 5, Default = 0.25, Decimals = 0.01})
		end 
		-- 
		local crosshairSection = World:Section({Name = "Crosshair", Size = 330, Side = "Right"}) do 
			crosshairSection:Toggle({Name = "Crosshair", Flag = "Crosshair", Callback = function()
				for i = 1, #crosshair_Lines do
					crosshair_Lines[i].Visible = false; 
				end 
				--
				for i = 1, #crosshair_Outlines do
					crosshair_Outlines[i].Visible = false; 
				end 
			end}):Colorpicker({Default = Color3.fromRGB(255,255,255), Flag = "Crosshair Color", Callback = function()
				for i = 1, #crosshair_Lines do 
					crosshair_Lines[i].Color = flags["Crosshair Color"].Color;
					crosshair_Lines[i].Transparency = flags["Crosshair Color"].Transparency;
				end 
			end});
			crosshairSection:Toggle({Name = "Always Rotating", Flag = "Crosshair Always Rotating"})
			crosshairSection:Slider({Name = "Speed", Flag = 'Crosshair Speed', Min = 0, Max = 24, Default = 12, Decimals = 0.1})
			crosshairSection:Slider({Name = "Gap Size", Flag = 'Crosshair Gap Size', Min = 0, Max = 30, Default = 12, Decimals = 1})
			crosshairSection:Slider({Name = "Length", Flag = 'Crosshair Length', Min = 0, Max = 30, Default = 12, Decimals = 1})
			crosshairSection:Slider({Name = "Thickness", Flag = 'Crosshair Thickness', Min = 0.1, Max = 5, Default = 1.5, Decimals = 0.1, Callback = function(Int)
				for i = 1, #crosshair_Lines do
					crosshair_Lines[i].Thickness = Int; 
					crosshair_Outlines[i].Thickness = Int; 
				end 
			end})
			crosshairSection:Slider({Name = "Sides", Flag = 'Crosshair Sides', Min = 1, Max = 10, Default = 4, Decimals = 1, callback = function(Int)
				crosshair_LineAmount = Int
				-- 
				crosshair_lineOffsets = utility:generateAngles(Int)
				--
				for i = 1, #crosshair_Lines do
					crosshair_Lines[i]:Remove(); 
					crosshair_Lines[i] = nil; 
				end 
				-- 
				for i = 1, #crosshair_Outlines do
					crosshair_Outlines[i]:Remove(); 
					crosshair_Outlines[i] = nil; 
				end 
				-- 
				do 
					for Index = 1, Int do
						local line = utility:drawObject("Line",{
							Visible = false,
							Color = flags["Crosshair Color"].Color,
							Thickness = flags["Crosshair Thickness"],
							ZIndex = 2,
							Transparency = 1
						})
						--
						crosshair_Lines[Index] = line
						--
						local line_1 = utility:drawObject("Line",{
							Visible = false,
							Color = Color3.fromRGB(0, 0, 0),
							Thickness = flags["Crosshair Thickness"] * 2.5,
							ZIndex = 1,
							Transparency = 1
						})
						-- 
						crosshair_Outlines[Index] = line_1
					end
				end 
			end})
			crosshairSection:Dropdown({Name = "Sizing Easing Style", Flag = "Crosshair Sizing Easing Style", Options = {"Off", "Linear", "Cubic", "Quad", "Quart", "Quint", "Sine", "Exponential", "Back", "Bounce", "Elastic", "Circular"}, Default = "Off"})
			crosshairSection:Dropdown({Name = "Speed Easing Style", Flag = "Crosshair Speed Easing Style", Options = {"Off", "Linear", "Cubic", "Quad", "Quart", "Quint", "Sine", "Exponential", "Back", "Bounce", "Elastic", "Circular"}, Default = "Off"})
			crosshairSection:Toggle({Name = "Show Text", Flag = "Script Name", Callback = function(Bool)
				local sub = utility.drawings["Sub"]
				local domain = utility.drawings["Domain"]
				-- 
				sub.Visible = Bool 
				domain.Visible = Bool 
			end})
			crosshairSection:Toggle({Name = "Pulse", Flag = "Pulse"})
			crosshairSection:Toggle({Name = "Attach to target", Flag = "Attach to target"})
		end 
		-- 
		local ingameCrosshair = World:Section({Name = "In-Game Crosshair", Size = 330, Side = "Right"}) do 
			ingameCrosshair:Toggle({Name = "Spinning", Flag = "In-Game Crosshair Spin", Callback = function()
				game:GetService("Players").LocalPlayer.PlayerGui.MainScreenGui.Aim.Rotation = 0 
			end})
			ingameCrosshair:Slider({Name = "Speed", Flag = 'In-Game Crosshair Spin Speed', Min = 0, Max = 30, Default = 1, Decimals = 1})
			ingameCrosshair:Toggle({Name = "Dont Show", Flag = "In-Game Crosshair Invisible"}) 
		end 
	end 
	-- // Visuals 
	local misc = Window:Page({Name = "Misc", Weapons = true}) do 
		local Movement = misc:Weapon({Icon = "rbxassetid://6034509993"})
		local Exploits = misc:Weapon({Icon = "rbxassetid://16997954488"})
		local movementSection = Movement:Section({Name = "General", Size = 330}) do 
			movementSection:Toggle({Name = "Speed", Flag = "Speed Enabled"}):Keybind({Name = "Speed", Flag = "Speed Key", Mode = "Toggle", Callback = function()
				if Chatting then return end 
			end})
			movementSection:Slider({Name = "Speed", Flag = 'Speed', Min = 0, Max = 100, Default = 20, Decimals = 1})
			movementSection:Toggle({Name = "Fly", Flag = "Fly Enabled"}):Keybind({Name = "Fly", Flag = "Fly Key", Mode = "Toggle", Callback = function()
				if Chatting then return end
				LocalPlayer.Character.HumanoidRootPart.Anchored = false; 
			end})	
			movementSection:Slider({Name = "Fly", Flag = 'Fly Speed', Min = 0, Max = 100, Default = 20, Decimals = 1})
		end 
		-- 
		local hitEffects = Movement:Section({Name = "Hit Effects", Size = 330, Side = "Right"}) do 
			hitEffects:Toggle({Name = "Hit Marker", Flag = "Hit Marker"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Flag = "Hit Marker Settings"});
			hitEffects:Toggle({Name = "3D Hit Marker", Flag = "3D Hit Marker"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Flag = "3D Hit Marker Settings"});
			hitEffects:Slider({Name = "Fading Time", Flag = 'Hit Markers Time', Min = 0.1, Max = 10.0, Default = 5.0, Decimals = 0.1})
			hitEffects:Toggle({Name = "Hit Sounds", Flag = "Hit Sounds"})
			hitEffects:Dropdown({Name = "Hit Sounds", Flag = "Hit Sounds Sound", Options = sfx_names, Default = "Neverlose"})
			hitEffects:Slider({Name = "Volume", Flag = 'Hit Sounds Volume', Min = 0.1, Max = 10.0, Default = 5.0, Decimals = 0.1})
			hitEffects:Slider({Name = "Pitch", Flag = 'Hit Sounds Pitch', Min = 0.1, Max = 10.0, Default = 1.0, Decimals = 0.1})
			hitEffects:Toggle({Name = "Hit Effects", Flag = "Hit Effects"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Flag = "Hit Effect Settings"});
			hitEffects:Dropdown({Name = "Hit Effects", Flag = "Hit Effects Option", Options = {"Confetti", "Nova", "Sparkle"}, Default = "Confetti"})
			hitEffects:Toggle({Name = "Hit Chams", Flag = "Hit Chams"}):Colorpicker({Default = Color3.fromRGB(255, 0, 0), Transparency = 0.8, Flag = "Hit Chams Settings"});
			hitEffects:Dropdown({Name = "Material", Flag = "Hit Chams Material", Options = {"ForceField", "Neon", "Plastic"}, Default = "Neon"})
			hitEffects:Slider({Name = "Fading Time", Flag = 'Hit Chams Fading Time', Min = 0.1, Max = 10.0, Default = 5.0, Decimals = 0.1})
			hitEffects:Toggle({Name = "Hit-Logs", Flag = "Hit Notify"})
		end 
		-- 
		local chatSpam = Movement:Section({Name = "Chat Spam", Size = 330, Side = "Left"}) do
			chatSpam:Toggle({Name = "Enabled", Flag = "Chat Spam"})
			chatSpam:Dropdown({Name = "Type", Flag = "Chat Spam Type", Options = {"Lunar", "Scottish"}, Default = "Lunar"})
			chatSpam:Slider({Name = "Delay", Flag = 'Chat Spam Delay', Suffix = "s", Min = 0.1, Max = 10.0, Default = 5.0, Decimals = 0.1})
			chatSpam:Toggle({Name = "Symbols", Flag = "Symbol"})
			chatSpam:Toggle({Name = "Repeat", Flag = "Repeat"})
		end 
		-- 
		local characterMods = Movement:Section({Name = "Character", Size = 330, Side = "Left"}) do 
			characterMods:Toggle({Name = "Remove Chairs", Flag = "Remove Chairs", Callback = function(Bool)
				for i,v in pairs(Workspace:GetDescendants()) do 
					if v:IsA("Seat") then 
						v.Disabled = Bool
					end 
				end 
			end})
			characterMods:Toggle({Name = "No Slow", Flag = "No Slow"})		
			characterMods:Toggle({Name = "Auto Reload", Flag = "Auto Reload"})	
			characterMods:Toggle({Name = "Auto Armor", Flag = "Auto Armor"})	
			characterMods:Toggle({Name = "Anti Void Kill", Flag = "Anti Void Kill", Callback = function(Bool)
				Workspace.FallenPartsDestroyHeight = Bool and -50000 or -500
			end})	
		end 
		-- 
		local cframeDesync = Exploits:Section({Name = "Desync", Size = 330, Side = "Left"}) do
			local customSliders, strafeSliders, randomSliders = {}, {}, {}
			cframeDesync:Toggle({Name = "Enabled", Flag = "Desync"}):Keybind({Name = "Desync Key", Flag = "Desync Key", Mode = "Toggle", Callback = function()
				if flags["Desync Key"] == false and C_Desync["OldPosition"] then 
					LocalPlayer.Character.HumanoidRootPart.CFrame = C_Desync["OldPosition"]
					C_Desync["OldPosition"] = nil 
				end 
			end}) 
			local Vis = cframeDesync:Toggle({Name = "Visualize", Flag = "Desync Visualize"}); Vis:Colorpicker({Default = Color3.fromRGB(0,0,0), Flag = "Desync Visualize Outline", Alpha = 0}); Vis:Colorpicker({Default = Color3.fromHex("#7D0DC3"), Flag = "Desync Visualize Fill", Alpha = 0.7});
			cframeDesync:Toggle({Name = "Attach onto target", Flag = "Attach Target"});
			cframeDesync:Dropdown({Name = "Type", Flag = "Desync Type", Options = {"Custom", "Random", "Target Strafe", "Roll"}, Default = "Target Strafe", Callback = function(Option)
				if #customSliders ~= 0 then 
					for _,v in pairs(customSliders) do v:SetVisible(Option == "Custom" and true or false) end; for _,v in pairs(strafeSliders) do v:SetVisible(Option == "Target Strafe" and true or false) end; for _,v in pairs(randomSliders) do v:SetVisible(Option == "Random" and true or false) end 		
				end 
			end})
			-- // Dropdown Sliders
			do 
				local _ = cframeDesync:Slider({Name = "Position X", Flag = 'Desync X', Min = -15, Max = 15, Default = 0, Decimals = 1, Suffix = "m"}) table.insert(customSliders, _)
				local _ = cframeDesync:Slider({Name = "Position Y", Flag = 'Desync Y', Min = -15, Max = 15, Default = 0, Decimals = 1, Suffix = "m"}) table.insert(customSliders, _)
				local _ = cframeDesync:Slider({Name = "Position Z", Flag = 'Desync Z', Min = -15, Max = 15, Default = 0, Decimals = 1, Suffix = "m"}) table.insert(customSliders, _)
				-- 		
				local _ = cframeDesync:Slider({Name = "Rotation X", Flag = 'Rotation X', Min = -180, Max = 180, Default = 0, Decimals = 1, Suffix = "¬∞"}) table.insert(customSliders, _)
				local _ = cframeDesync:Slider({Name = "Rotation Y", Flag = 'Rotation Y', Min = -180, Max = 180, Default = 0, Decimals = 1, Suffix = "¬∞"}) table.insert(customSliders, _)
				local _ = cframeDesync:Slider({Name = "Rotation Z", Flag = 'Rotation Z', Min = -180, Max = 180, Default = 0, Decimals = 1, Suffix = "¬∞"}) table.insert(customSliders, _)
				-- 
				local _ = cframeDesync:Slider({Name = "Radius", Flag = 'Desync Strafe Radius', Min = -15, Max = 15, Default = 10, Decimals = 1, Suffix = "m"}) table.insert(strafeSliders, _)
				local _ = cframeDesync:Slider({Name = "Speed", Flag = 'Desync Strafe Speed', Min = -15, Max = 15, Default = 10, Decimals = 1, Suffix = "m/s"}) table.insert(strafeSliders, _)
				local _ = cframeDesync:Slider({Name = "Height", Flag = 'Desync Strafe Height', Min = -15, Max = 15, Default = 0, Decimals = 1, Suffix = "m"}) table.insert(strafeSliders, _)
				-- 
				local _ = cframeDesync:Slider({Name = "Random Range", Flag = 'Desync Random Range', Min = 0, Max = 50, Default = 0, Decimals = 1, Suffix = "st"}) table.insert(randomSliders, _)
				-- 
				for _,v in pairs(customSliders) do v:SetVisible(false) end 		
				for _,v in pairs(strafeSliders) do v:SetVisible(true) end 	
				for _,v in pairs(randomSliders) do v:SetVisible(false) end 
			end 	
		end	
	end 

	

	-- // Settings
	local Config = Window:Page({Name = "Settings"}) do
		local Menu = Config:Section({Name = "Menu", Size = 120})
		local Cfgs = Config:Section({Name = "Configs", Size = 200, Side = "Right"})
		--
		local abc = false 
		Menu:Keybind({Name = "Menu key", Flag = "MenuKey", Default = Enum.KeyCode.End, Mode = "Toggle", Callback = function() abc = not abc Library:SetOpen(abc) end})
		Menu:Dropdown({Name = "Notification Position", Flag = "Notification Position", Options = {"Top Left", "Middle"}, Default = "Top Left"})
		Menu:Label({Centered = true, Name = "Credits: \nPortal : User Interface"})
		--
		local CFGList = Cfgs:Dropdown({Name = "Cfg List", Flag = "SettingConfigurationList", Options = {}})
		Cfgs:Textbox({Flag = "SettingsConfigurationName", Placeholder = "Config name"})
		--
		local CurrentList = {};
		if not isfolder("Lunar") then 
			makefolder("Lunar")
		end 
		if not isfolder("Lunar/Configs") then 
			makefolder("Lunar/Configs")
		end 
		local function UpdateConfigList()
			local List = {};
			for idx, file in ipairs(listfiles("Lunar/Configs")) do
				local FileName = file:gsub("Lunar/Configs\\", ""):gsub(".cfg", "")
				List[#List + 1] = FileName;
			end;

			local IsNew = #List ~= #CurrentList
			if not IsNew then
				for idx, file in ipairs(List) do
					if file ~= CurrentList[idx] then
						IsNew = true;
						break;
					end;
				end;
			end;

			if IsNew then
				CurrentList = List;
				CFGList:Refresh(CurrentList);
			end;
		end;
		--
		Cfgs:Button({Name = "Create", Callback = function()
			local ConfigName = flags.SettingsConfigurationName;
			if ConfigName == "" or isfile("Lunar/Configs/" .. ConfigName .. ".cfg") then
				return;
			end;
			writefile("Lunar/Configs/" .. ConfigName .. ".cfg", Library:GetConfig());
			UpdateConfigList();
		end})
		Cfgs:Button({Name = "Save", Callback = function()
			local SelectedConfig = flags.SettingConfigurationList;
			if SelectedConfig then
				writefile("Lunar/Configs/" .. SelectedConfig .. ".cfg", Library:GetConfig())
			end;
		end})
		Cfgs:Button({Name = "Load", Callback = function()
			local SelectedConfig = flags.SettingConfigurationList;
			if SelectedConfig then
				Library:LoadConfig(readfile("Lunar/Configs/" .. SelectedConfig .. ".cfg"))
			end
		end})
		Cfgs:Button({Name = "Delete", Callback = function()
			local SelectedConfig = flags.SettingConfigurationList;
			if SelectedConfig then
				delfile("Lunar/Configs/" .. SelectedConfig .. ".cfg")
			end
			UpdateConfigList();
		end})
		Cfgs:Button({Name = "Refresh", Callback = function()
			UpdateConfigList();
		end})
		Cfgs:Toggle({Name = "Keybind List", Flag = "Keybind List", Callback = function(Bool)
			PlaceHolderUI.Enabled = Bool
		end})
		UpdateConfigList();
	end
end 

-- // Framework
do 
	getgenv().offset = nil; 
	local Origin; 
	local Position, OnScreen, PreviousGun, PreviousAmmo, Sine, Radians = nil, nil, nil, nil, 0, 1; 
	local NetworkTick, Networking = 0, false; 
	local chatTick = 0; 
	-- // Loops
	do
		framework["connections"]["Main Loop"] = RunService.Heartbeat:Connect(LPH_NO_VIRTUALIZE(function(Fps)
			-- // Framework Calls
			do 
				framework:aimAssist() 
				framework:worldVisuals()
			end 
			--// Auto Armor
			do 
				if flags["Auto Armor"] then 
					if LocalPlayer.Character.BodyEffects.Armor.Value < 100 then 
						local Pos = LocalPlayer.Character.HumanoidRootPart.CFrame
						LocalPlayer.Character.HumanoidRootPart.CFrame = workspace.Ignored.Shop["[High-Medium Armor] - $2440"].Head.CFrame
						fireclickdetector(workspace.Ignored.Shop["[High-Medium Armor] - $2440"].ClickDetector)
						RunService.RenderStepped:Wait()
						LocalPlayer.Character.HumanoidRootPart.CFrame = Pos 
					end 
				end 
			end 
			-- // No Slow Down 
			do 
				if flags["No Slow"] then 
					if LocalPlayer.Character.BodyEffects.Reload.Value then
						LocalPlayer.Character.BodyEffects.Reload.Value = false
					end
					--
					local Slowdowns = LocalPlayer.Character.BodyEffects.Movement:FindFirstChild('NoJumping') or LocalPlayer.Character.BodyEffects.Movement:FindFirstChild('NoWalkSpeed') or LocalPlayer.Character.BodyEffects.Movement:FindFirstChild('ReduceWalk')
					if Slowdowns then
						Slowdowns:Destroy()
					end
				end 
			end 
			-- // Target Framework
			do 
				if utility.target and utility:ValidateClient(utility.target) and flags["Silent_Bind"] then
					Position, OnScreen = Camera:WorldToViewportPoint(utility.target.Character.HumanoidRootPart.Position);
					prediction = framework:selectPrediction()
					-- 
					if flags["Target Auto Select"] then 
						framework:autoSelect()
					end 
					--
					if flags["Resolver"] then 
						offset = framework:calculateResolverOffset(utility.target); 
					end      
					--
					if flags["Highlight Enabled"] then 
						targetHighlight.Enabled = true 
						targetHighlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
						targetHighlight.FillColor = flags["Highlight Fill Color"].Color
						targetHighlight.OutlineColor = flags["Highlight Outline Color"].Color
						targetHighlight.Adornee = utility.target.Character
						targetHighlight.OutlineTransparency = flags["Highlight Outline Color"].Transparency
						targetHighlight.FillTransparency = flags["Highlight Fill Color"].Transparency 
					else 
						targetHighlight.Enabled = false 
					end 
					-- 
					if flags["Nearest Part"] then 
						partClosest = framework:calculateNearestPart(utility.target, flags["Closest Hit Part"]).Name
					end 
					--
					checks = framework:getChecks(utility.target, table.find(flags["Silent Checks"], "Friend Check"), table.find(flags["Silent Checks"], "Wall Check"), table.find(flags["Silent Checks"], "Knocked Check"), table.find(flags["Silent Checks"], "Grabbed Check"));
					-- 
					if flags["Line Enabled"] then 
						utility.drawings["Tracer"].Visible = OnScreen and true or false  
						utility.drawings["Tracer"].From = NewVector2(Mouse.X, Mouse.Y + Offset)
						utility.drawings["Tracer"].To = NewVector2(Position.X, Position.Y)
						utility.drawings["Tracer"].Color = flags["Line Settings"].Color
						utility.drawings["Tracer"].Transparency = flags["Line Settings"].Transparency
					end
					--
					if flags["Target Strafe Enabled"] then 
						utility.angle = utility.angle + flags["Target Strafe Speed"]
						local strafe = utility.target.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(utility.angle), 0) * NewCFrame(0, flags["Target Strafe Height"], flags["Target Strafe Distance"])
						-- 
						LocalPlayer.Character.HumanoidRootPart.CFrame = strafe
					end 
					-- 
					if flags["Back Track Enabled"] and flags["Back Track Method"] == "Follow" then 
						for _, Part in pairs(utility.folders["Part Chams"]:GetChildren()) do 
							if Part:IsA("BasePart") and table.find(utility.bodyParts, Part.Name) then 
								Part.Position = utility.target.Character[Part.Name].Position + utility.target.Character.HumanoidRootPart.Velocity * 0.1413
								Part.Rotation = utility.target.Character[Part.Name].Rotation
							end     
						end 
					end 
					-- 
					if flags["Look At"] then 
						LocalPlayer.Character.Humanoid.AutoRotate = false;
						local OldCframe = LocalPlayer.Character.PrimaryPart;
						local NearestRoot = utility.target.Character.HumanoidRootPart
						local NearestPos = NewCFrame(LocalPlayer.Character.PrimaryPart.Position, Vector3.new(NearestRoot.Position.X, OldCframe.Position.Y, NearestRoot.Position.Z));
						LocalPlayer.Character:SetPrimaryPartCFrame(NearestPos);
					end 
					-- 
					if flags["Auto Shoot"] then 
						local Tool = utility:getHeld(); 
						if Tool then 
							Tool:Activate()
						end 
					end 
				else 
					-- 
					if (utility.drawings["Tracer"].Visible == true) then 
						utility.drawings["Tracer"].Visible = false 
					end 
					-- 
					targetHighlight.Enabled = false 
				end 
			end 
			-- // Anti Cheat Bypass
			do 
				if tick() - antiCheattick > 1 and LocalPlayer.Character then 
					antiCheattick = tick() 
					-- 
					for _, Script in pairs(LocalPlayer.Character:GetChildren()) do
						if Script:IsA("Script") and Script.Name ~= "Health" and Script.Name ~= "Sound" and Script:FindFirstChild("LocalScript") then
							Script:Destroy()
						end
					end
				end 	
			end 
			-- // Movement
			do 
				if LocalPlayer.Character and not (flags["Desync"] and flags["Desync Key"]) then 
					framework:cframeSpeed() 
					framework:fly(Fps)			
				end 
			end 
			-- // Physics and Network shits
			do 
				if flags["Fast Flags"] and getfflag("S2PhysicsSenderRate") ~= flags["Fast Flags Amount"] then 
					setfflag("S2PhysicsSenderRate", flags["Fast Flags Amount"])
				end 
				-- 
				if flags["Network Desync"] then 
					if tick() - NetworkTick > flags["Network Delay"] then 
						NetworkTick = tick() 
						Networking = not Networking
						sethiddenproperty(LocalPlayer.Character.HumanoidRootPart, "NetworkIsSleeping", Networking)
					end 
				end 
			end 
			-- // Chat Spam
			do 
				if flags["Chat Spam"] then 
					if tick() - chatTick > flags["Chat Spam Delay"] then 
						chatTick = tick()
						local Message = framework:chatSpam(flags["Chat Spam Type"], flags["Repeat"], flags["Emojis"], flags["Symbol"])
						ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(Message, "All")
					end 
				end 
			end 
		end))
		framework["connections"]["Desync"] = RunService.Heartbeat:Connect(LPH_NO_VIRTUALIZE(function(delta)
			-- // Desync
			do 
				if ((flags["Desync"] and flags["Desync Key"]) or (flags["Destroy Cheaters"] and flags["Destroy Cheaters Key"]) and LocalPlayer.Character) then 
					C_Desync["OldPosition"] = LocalPlayer.Character.HumanoidRootPart.CFrame
					local Origin = (flags["Attach Target"] and checks and utility.target and utility.target.Character and utility.target.Character.HumanoidRootPart) or LocalPlayer.Character.HumanoidRootPart
					local randomRange = flags["Desync Random Range"]
					Radians += flags["Desync Strafe Speed"]
					local calculatedPositions = {
						["Random"] = (NewCFrame(Origin.Position) + Vector3.new(Random(-randomRange, randomRange), Random(-randomRange, randomRange), Random(-randomRange, randomRange))) * CFrame.Angles(Rad(Random(-180, 180)), Rad(Random(-180, 180)), Rad(Random(-180, 180))),
						["Roll"] = Origin.CFrame * NewCFrame(0, -4 ,0) * CFrame.Angles(0, Rad(Random(1, 360)), Rad(-180)),
						["Target Strafe"] = Origin.CFrame * CFrame.Angles(0, Rad(Radians), 0) * NewCFrame(0, flags["Desync Strafe Height"], flags["Desync Strafe Radius"]),
						["Custom"] = Origin.CFrame * NewCFrame(flags["Desync X"], flags["Desync Y"], flags["Desync Z"]) * CFrame.Angles(Rad(flags["Rotation X"]), Rad(flags["Rotation Y"]), Rad(flags["Rotation Z"])), 
						["Destroy Cheaters"] = Origin.CFrame * NewCFrame(9e9, 9e9, 9e9)
					}
					--
					C_Desync["PredictedPosition"] = flags["Destroy Cheaters"] and flags["Destroy Cheaters Key"] and calculatedPositions["Destroy Cheaters"] or calculatedPositions[flags["Desync Type"]]
					-- 
					LocalPlayer.Character.HumanoidRootPart.CFrame = C_Desync["PredictedPosition"]
					-- 
					if flags["Desync Visualize"] then 
						bodyClone:SetPrimaryPartCFrame(LocalPlayer.Character.HumanoidRootPart.CFrame)	
						visualizeChams.FillColor = flags["Desync Visualize Fill"].Color;
						visualizeChams.FillTransparency = flags["Desync Visualize Fill"].Transparency; 
						visualizeChams.OutlineColor = flags["Desync Visualize Outline"].Color; 
						visualizeChams.OutlineTransparency = flags["Desync Visualize Outline"].Transparency; 			
					end  		
					-- 
					game:GetService("RunService").RenderStepped:Wait()
					-- 
					print((LocalPlayer.Character.HumanoidRootPart.Position).Magnitude)
					-- 	
					LocalPlayer.Character.HumanoidRootPart.CFrame = C_Desync["OldPosition"]
					--
					framework:cframeSpeed() 
					framework:fly(delta)	
				else 
					bodyClone:SetPrimaryPartCFrame(NewCFrame(9999,9999,9999))	
				end 
			end
		end)) 
		framework["connections"]["ESP Loop"] = RunService.RenderStepped:Connect(LPH_NO_VIRTUALIZE(function(Fps)
			for Index, Base in pairs(Visuals.Bases) do
				Base:Update()
			end 
			-- // Crosshair Visuals
			do 
				crosshair_SpinAngle = flags["Crosshair Always Rotating"] and crosshair_SpinAngle + math.rad((flags["Crosshair Speed"] * 10) * Fps) or 0;  
				-- // Crosshair 
				do 
					if flags["Crosshair"] then 
						local Radius = flags["Crosshair Length"] * 5
						local Gap = flags["Crosshair Gap Size"] 
						--
						if flags["Attach to target"] and utility.target ~= nil and utility.target.Character and OnScreen then 
							Origin = NewVector2(Position.X, Position.Y)
						else 
							Origin = NewVector2(Mouse.X, Mouse.Y + Offset)
						end 
						-- 
						CursorSize += 0.025
						-- 
						local SmoothAngle = flags["Crosshair Speed Easing Style"] ~= "Off" and Tween.EasingStyles[Enum.EasingStyle[flags["Crosshair Speed Easing Style"]]][Enum.EasingDirection.InOut](utility:Shift(crosshair_SpinAngle)) * (Pi * Pi/2) or crosshair_SpinAngle
						local Dynamic = Cos(CursorSize)
						local SmoothSize =  flags["Crosshair Sizing Easing Style"] ~= "Off" and ((Radius / 2) * (Tween.EasingStyles[Enum.EasingStyle[flags["Crosshair Sizing Easing Style"]]][Enum.EasingDirection.In](utility:Shift(Dynamic)))) or 0 
						local localRadius = Radius - SmoothSize
						--
						for i = 1, #crosshair_Lines do 
							local Positions = NewVector2(Cos(SmoothAngle + crosshair_lineOffsets[i]), (Sin(SmoothAngle + crosshair_lineOffsets[i])))
							-- 
							crosshair_Lines[i].From = Origin + NewVector2(Positions.X, Positions.Y) * Gap 
							crosshair_Lines[i].To = crosshair_Lines[i].From + NewVector2(Positions.X, Positions.Y) * localRadius
							-- 
							crosshair_Outlines[i].From = Origin + NewVector2(Positions.X, Positions.Y) * (Gap - 1)
							crosshair_Outlines[i].To = crosshair_Lines[i].From + NewVector2(Positions.X, Positions.Y) * (localRadius + 1)
							-- 
							crosshair_Lines[i].Visible = true 
							crosshair_Outlines[i].Visible = true 
						end 
					end 
				end 
				-- // Crosshair Text 
				do
					if flags["Script Name"] then 
						local sub = utility.drawings["Sub"]
						local domain = utility.drawings["Domain"]
						-- 
						local yOffset = flags["Crosshair"] and ((flags["Crosshair Length"] * 5) + flags["Crosshair Gap Size"]) or 30
						-- 
						local textOrigin; 
						if flags["Attach to target"] and utility.target ~= nil and utility.target.Character and OnScreen then 
							textOrigin = NewVector2(Position.X - 23, Position.Y + yOffset)
						else 
							textOrigin = NewVector2(Mouse.X - 23, Mouse.Y + Offset + yOffset)
						end 
						-- 
						sub.Visible = true 
						domain.Visible = true    
						-- 
						sub.Position = textOrigin
						domain.Position = sub.Position + NewVector2(sub.TextBounds.X, 0)
					end 
					-- 
					if flags["Pulse"] and flags["Script Name"] then 
						local sub = utility.drawings["Sub"]
						-- 
						Sine = flags["Pulse"] and math.abs(math.sin(tick() * 4)) or 1 
						sub.Transparency = Sine
					end 
				end
				-- // In-Game Crosshair Shit 
				do 
					if flags["In-Game Crosshair Spin"] and not flags["In-Game Crosshair Invisible"] then 
						LocalPlayer.PlayerGui.MainScreenGui.Aim.Rotation += flags["In-Game Crosshair Spin Speed"]
					end 
					-- 
					if flags["In-Game Crosshair Invisible"] and LocalPlayer.PlayerGui.MainScreenGui.Aim.Visible == true then 
						Players.LocalPlayer.PlayerGui.MainScreenGui.Aim.Visible = false 
					end 
				end 
			end 
			-- // Hit Detection 
			do 
				local Gun = LocalPlayer.Character:FindFirstChildWhichIsA("Tool")
				local Connection = framework["connections"]["Hit Detection"]
				
				if Gun ~= PreviousGun and Connection then
					PreviousGun = Gun
					PreviousAmmo = 999
					Connection:Disconnect()
					framework["connections"]["Hit Detection"] = nil
				end
			
				if not framework["connections"]["Hit Detection"] and Gun and Gun.Ammo.Value then
					framework["connections"]["Hit Detection"] = Gun.Ammo:GetPropertyChangedSignal("Value"):Connect(function()
						local CurrentAmmo = Gun.Ammo.Value
						if CurrentAmmo < PreviousAmmo then
							local ChildrenAdded = 0;
							local ChildAdded;
							local IgnoreList = {LocalPlayer.Character, Gun.Handle};
							ChildAdded = Workspace.Ignored.Siren.Radius.ChildAdded:Connect(function(Object)
								if Object.Name == "BULLET_RAYS" then
									ChildrenAdded += 1;
									if (table.find({"[Double-Barrel SG]", "[TacticalShotgun]", "[Shotgun]"}, Gun.Name) and ChildrenAdded <= 5) or (ChildrenAdded == 1) then
										local Pos = Object.CFrame.Position
										local LookVector = Object.CFrame.LookVector
										-- 
										local RayCastParams = RaycastParams.new()
										RayCastParams.FilterType = Enum.RaycastFilterType.Exclude
										RayCastParams.IgnoreWater = true
										RayCastParams.FilterDescendantsInstances = IgnoreList
										local Ray = Workspace:Raycast(Pos, LookVector * 1000, RayCastParams)
										if not Ray then return end 
										local HitPosition = Ray.Position
										local HitInstance = Ray.Instance
										-- 	
										delay(0.001, function()
											if flags["Bullet Tracers"] then 	
												Object:Destroy() 	
												utility:CreateBeam(Pos, HitPosition, flags["Bullet Tracers Color"].Color, flags["Face Camera"], flags["Bullet Size"], flags["Bullet Speed"], flags["Bullet Brightness"])
											end 
											-- 
											if flags["Bullet Impacts"] then 
												local Impact = Instance.new("Part")
												Impact.Anchored = true 
												Impact.CanCollide = false 
												Impact.Parent = game.Workspace
												Impact.Material = "Neon"
												Impact.Shape = Enum.PartType.Block 
												Impact.Transparency = flags["Bullet Impacts Color"].Transparency
												Impact.Color = flags["Bullet Impacts Color"].Color
												Impact.Size = NewVector3(flags["Impact Size"], flags["Impact Size"], flags["Impact Size"])
												Impact.CFrame = NewCFrame(HitPosition)
												delay(3, function()
													Impact:Destroy()
												end)
											end 
											-- 
											if HitInstance then
												local InstanceHit = HitInstance:FindFirstAncestorOfClass('Model')
												if not InstanceHit then return end 
												
												if InstanceHit:FindFirstChild("Humanoid") and InstanceHit:FindFirstChild("HumanoidRootPart") then 
													if flags["Hit Sounds"] then 
														HitReg:HitSound(sfx[flags["Hit Sounds Sound"]], flags["Hit Sounds Volume"], flags["Hit Sounds Pitch"])
													end 
													-- 
													if flags["Hit Chams"] then 
														local Model = Instance.new("Model", utility.folders["Hit Chams"]) 
														utility:characterClone(Players[InstanceHit.Name], flags["Hit Chams Settings"].Color, flags["Hit Chams Material"], flags["Hit Chams Settings"].Transparency, Model);
														delay(flags["Hit Chams Fading Time"], function()
															Model:Destroy()
														end)
													end
													-- 
													if flags["Hit Notify"] then 
														local Text = string.format("You Hit %s in the %s!", Players[InstanceHit.Name].Name, HitInstance.Name)
														Library:Notification(Text, 3, Library.Accent, flags["Notification Position"])
													end 
													-- 
													if flags["Hit Marker"] then 
														HitReg:HitMarker(4, flags["Hit Marker Settings"].Color, flags["Hit Markers Time"])
													end 
													-- 
													if flags["3D Hit Marker"] then 
														HitReg:HitMarker3D(4, flags["3D Hit Marker Settings"].Color, flags["Hit Markers Time"], HitPosition) 
													end 
													-- 
													if flags["Hit Effects"] then 
														HitReg:HitEffect(flags["Hit Effects Option"], Players[InstanceHit.Name].Character)
													end 
												end 
											end 
											ChildAdded:Disconnect()
										end)
									end
								else
									ChildAdded:Disconnect()
								end
							end)
						end
						PreviousAmmo = CurrentAmmo
					end)
				end
			end 
		end)) 
		framework["connections"]["Typing Check"] = InputService.InputBegan:Connect(function(_, Chatting)
			Typing = Chatting
		end)
		framework["connections"]["Text"] = InputService.InputChanged:Connect(function(_)
			if utility.drawings["Aim Assist FOV"].Visible then 
				utility.drawings["Aim Assist FOV"].Position = NewVector2(Mouse.X, Mouse.Y + Offset)
			end 
		end) 
		framework["connections"]["ESP Player Find Loop"] = Players.PlayerAdded:Connect(LPH_NO_VIRTUALIZE(function(Player)
			if flags["PlayerESP_Enabled"] then 
				Visuals:Create({Player = Player})
			end 
		end))
	end 
	-- // Target Back Track
	do 
		task.spawn(function()
			while true do 
				task.wait(flags["Back Track Delay"]/2)
				if utility.target and utility:ValidateClient(utility.target) then 
					if flags["Back Track Enabled"] and flags["Back Track Method"] == "Clone" then
						utility:characterClone(utility.target, flags["Back Track Settings"].Color, flags["Back Track Material"], flags["Back Track Settings"].Transparency, utility.folders["Part Chams"]);
						task.wait(flags["Back Track Delay"]/2)
						utility.folders["Part Chams"]:ClearAllChildren(); 
					end     
				end 
			end 
		end)
	end 
	-- // Gun Handling
	do  
		local function Aimbot() 
			utility:calculateAimViewerEndPoint()
		end 	
		-- 	
		local function Ammo()
			framework:autoReload()            
		end 	
		-- 
		framework["connections"]["Anti Aim Viewer"] = {} 
		framework["connections"]["auto reload >_< :3"] = {}
		for i, v in pairs(LocalPlayer.Backpack:GetChildren()) do
			if v:IsA("Tool") and v:FindFirstChild("Ammo") then
				if not framework["connections"]["Anti Aim Viewer"][v] then 
					framework["connections"]["Anti Aim Viewer"][v] = v.Activated:Connect(Aimbot)
				end 
				--
				if not framework["connections"]["auto reload >_< :3"][v] then 
					framework["connections"]["auto reload >_< :3"][v] = v.Ammo:GetPropertyChangedSignal("Value"):Connect(Ammo)
				end 
			end
		end
		for i, v in pairs(LocalPlayer.Character:GetChildren()) do
			if v:IsA("Tool") and v:FindFirstChild("Ammo") then
				if not framework["connections"]["Anti Aim Viewer"][v] then 
					framework["connections"]["Anti Aim Viewer"][v] = v.Activated:Connect(Aimbot)
				end 
				--
				if not framework["connections"]["auto reload >_< :3"][v] then 
					framework["connections"]["auto reload >_< :3"][v] = v.Ammo:GetPropertyChangedSignal("Value"):Connect(Ammo)
				end 
			end
		end
		LocalPlayer.Character.ChildAdded:connect(function(v)
			if v:IsA("Tool") and v:FindFirstChild("Ammo") then
				if not framework["connections"]["Anti Aim Viewer"][v] then 
					framework["connections"]["Anti Aim Viewer"][v] = v.Activated:Connect(Aimbot)
				end 
				--
				if not framework["connections"]["auto reload >_< :3"][v] then 
					framework["connections"]["auto reload >_< :3"][v] = v.Ammo:GetPropertyChangedSignal("Value"):Connect(Ammo)
				end 
			end
		end)
		LocalPlayer.CharacterAdded:connect(function(v)
			for i = 1, #framework["connections"]["Anti Aim Viewer"], 1 do
				framework["connections"]["Anti Aim Viewer"][i]:Disconnect()
				framework["connections"]["Anti Aim Viewer"][i] = nil
				framework["connections"]["auto reload >_< :3"][i]:Disconnect()
				framework["connections"]["auto reload >_< :3"][i] = nil
			end
			v.ChildAdded:connect(function(v)
				if v:IsA("Tool") and v:FindFirstChild("Ammo") then
					if not framework["connections"]["Anti Aim Viewer"][v] then 
						framework["connections"]["Anti Aim Viewer"][v] = v.Activated:Connect(Aimbot)
					end 
					--
					if not framework["connections"]["auto reload >_< :3"][v] then 
						framework["connections"]["auto reload >_< :3"][v] = v.Ammo:GetPropertyChangedSignal("Value"):Connect(Ammo)
					end 
				end
			end)
		end)
	end 	
end 

Library:Notification("Loaded lunar.vip in " .. Floor((tick() - loadingTime) * 1000)  .."ms", 3, Library.Accent, flags["Notification Position"])
Library:Notification("WARNING: MAKE SURE YOU ARE USING THE CORRECT ARGUMENT FOR THE TARGET AIM OR YOU WILL GET BANNED", 3, Library.Accent, 5, Color3.new(1, 0, 0), flags["Notification Position"])
delay(3, function()
	Library:Notification("Message from finobe\n Fixed several things including: Removing unsupported features, target aim, text on cursor, previous ragebot not working", 10, Library.Accent, flags["Notification Position"])
end)






































































--[[

NICE TRY POORON >_< :3333

]]
   end,
})

local Button = MainTab:CreateButton({
   Name = "üßäAzure-Rewtiteüßä",
   Callback = function()
   

-- # all credits go to linemaster, ignore horrid source



if (not LPH_OBFUSCATED) then
    LPH_NO_VIRTUALIZE = function(...) return (...) end;
    LPH_JIT_MAX = function(...) return (...) end;
    LPH_JIT_ULTRA = function(...) return (...) end;
end


function load()
    --// Services
    local Players = game:GetService("Players")
    local UserInputService = game:GetService("UserInputService")
    local Workspace = game:GetService("Workspace")
    local Lighting = game:GetService("Lighting")
    local RunService = game:GetService("RunService")
    local TweenService = game:GetService("TweenService")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")

    --// Variables
    local LocalPlayer = Players.LocalPlayer
    local Camera = Workspace:FindFirstChildWhichIsA("Camera")
    local Hitsounds = {}

    --// Script Table
    local Script = {
        Functions = {},
        Locals = {
            Target = nil,
            IsTargetting = false,
            Resolver = {
                OldTick = tick(),
                OldPos = Vector3.new(0, 0, 0),
                ResolvedVelocity = Vector3.new(0, 0, 0)
            },
            AutoSelectTick = tick(),
            AntiAimViewer = {
                MouseRemoteFound = false,
                MouseRemote = nil,
                MouseRemoteArgs = nil,
                MouseRemotePositionIndex = nil
            },
            HitEffect = nil,
            Gun = {
                PreviousGun = nil,
                PreviousAmmo = 999,
                Shotguns = {"[Double-Barrel SG]", "[TacticalShotgun]", "[Shotgun]"}
            },
            PlayerHealth = {},
            JumpOffset = 0,
            BulletPath = {
                [4312377180] = Workspace:FindFirstChild("MAP") and Workspace.MAP:FindFirstChild("Ignored") or nil,
                [1008451066] = Workspace:FindFirstChild("Ignored") and Workspace.Ignored:FindFirstChild("Siren") and Workspace.Ignored.Siren:FindFirstChild("Radius") or nil,
                [3985694250] = Workspace and Workspace:FindFirstChild("Ignored") or nil,
                [5106782457] = Workspace and Workspace:FindFirstChild("Ignored") or nil,
                [4937639028] = Workspace and Workspace:FindFirstChild("Ignored") or nil,
                [1958807588] = Workspace and Workspace:FindFirstChild("Ignored") or nil
            },
            World = {
                FogColor = Lighting.FogColor,
                FogStart = Lighting.FogStart,
                FogEnd = Lighting.FogEnd,
                Ambient = Lighting.Ambient,
                Brightness = Lighting.Brightness,
                ClockTime = Lighting.ClockTime,
                ExposureCompensation = Lighting.ExposureCompensation
            },
        
            NetworkPreviousTick = tick(),
            NetworkShouldSleep = false,
            FFlags = {
           },
            OriginalVelocity = {},
            RotationAngle = 0
        },
        Utility = {
            Drawings = {},
            EspCache = {}
        },
        Connections = {
            GunConnections = {}
        },
        AzureIgnoreFolder = Instance.new("Folder", game:GetService("Workspace"))
    }

    --// Settings Table
    local Settings = {
        Combat = {
            Enabled = false,
            AimPart = "HumanoidRootPart",
            Silent = false,
            Mouse = false,
            Alerts = false,
            LookAt = false,
            Spectate = false,
            AntiAimViewer = false,
            AutoSelect = {
                Enabled = false,
                Cooldown = {
                    Enabled = false,
                    Amount = 0.5
                }
            },
            Checks = {
                Enabled = false,
                Knocked = false,
                Crew = false,
                Wall = false,
                Grabbed = false,
                Vehicle = false
            },
            Smoothing = {
                Horizontal = 1,
                Vertical = 1
            },
            Prediction = {
                Horizontal = 0.134,
                Vertical = 0.134
            },
            Resolver = {
                Enabled = false,
                RefreshRate = 0
            },
            Fov = {
                Enabled = false,
                Visualize = {
                    Enabled = false,
                    Color = Color3.new(1, 1, 1)
                },
                Radius = 80
            },
            Visuals = {
                Enabled = false,
                Tracer = {
                    Enabled = false,
                    Color = Color3.new(1, 1, 1),
                    Thickness = 2
                },
                Dot = {
                    Enabled = false,
                    Color = Color3.new(1, 1, 1),
                    Filled = false,
                    Size = 6
                },
                Chams = {
                    Enabled = false,
                    Fill = {
                        Color = Color3.new(1, 1, 1),
                        Transparency = 0.5
                    },
                    Outline = {
                        Color = Color3.new(1, 1, 1),
                        Transparency = 0.5
                    }
                }
            },
            Air = {
                Enabled = false,
                AirAimPart = {
                    Enabled = false,
                    HitPart = "LowerTorso"
                },
                JumpOffset = {
                    Enabled = false,
                    Offset = 0.09
                }
            }
        },
        Visuals = {
            Esp = {
                Enabled = false,
                Boxes = {
                    Enabled = false,
                    Filled = {
                        Enabled = false,
                        Color = Color3.new(1, 1, 1),
                        Transparency = 0.3
                    },
                    Color = Color3.new(1, 1, 1)
                }
            },
            BulletTracers = {
                Enabled = false,
                Color = {
                    Gradient1 = Color3.new(1, 1, 1),
                    Gradient2 = Color3.new(0, 0, 0)
                },
                Duration = 1,
                Fade = {
                    Enabled = false,
                    Duration = 0.5
                }
            },
            BulletImpacts = {
                Enabled = false,
                Color = Color3.new(1, 1, 1),
                Duration = 1,
                Size = 1,
                Material = "SmoothPlastic",
                Fade = {
                    Enabled = false,
                    Duration = 0.5
                }
            },
            OnHit = {
                Enabled = false,
                Effect = {
                    Enabled = false,
                    Color = Color3.new(1, 1, 1)
                },
                Sound = {
                    Enabled = false,
                    Volume = 5,
                    Value = "Skeet"
                },
                Chams = {
                    Enabled = false,
                    Color = Color3.new(1, 1, 1),
                    Material = "ForceField",
                    Duration = 1
                }
            },
            World = {
                Enabled = false,
                Fog = {
                    Enabled = false,
                    Color = Color3.new(1, 1, 1),
                    End = 1000,
                    Start = 10000
                },
                Ambient = {
                    Enabled = false,
                    Color = Color3.new(1, 1, 1)
                },
                Brightness = {
                    Enabled = false,
                    Value = 0
                },
                ClockTime = {
                    Enabled = false,
                    Value = 24
                },
                WorldExposure = {
                    Enabled = false,
                    Value = -0.1
                }
            },
            Crosshair = {
                Enabled = false,
                Color = Color3.new(1, 1, 1),
                Size = 10,
                Gap = 2,
                Rotation = {
                    Enabled = false,
                    Speed = 1
                }
            }
        },
        AntiAim = {
            VelocitySpoofer = {
                Enabled = false,
                Visualize = {
                    Enabled = false,
                    Color = Color3.new(1, 1, 1),
                    Prediction = 0.134
                },
                Type = "Underground",
                Roll = 0,
                Pitch = 0,
                Yaw = 0
            },
            CSync = {
                Enabled = false,
                Type = "Custom",
                Visualize = {
                    Enabled = false,
                    Color = Color3.new(1, 1, 1)
                },
                RandomDistance = 16,
                Custom = {
                    X = 0,
                    Y = 0,
                    Z = 0
                },
                TargetStrafe = {
                    Speed = 1,
                    Distance = 1,
                    Height = 1
                }
            },
            Network = {
                Enabled = false,
                WalkingCheck = false,
                Amount = 0.1
            },
            VelocityDesync = {
                Enabled = false,
                Range = 1
            },
            FFlagDesync = {
                Enabled = false,
                SetNew = false,
                FFlags = {"S2PhysicsSenderRate"},
                SetNewAmount = 15,
                Amount = 2
            },
        },
        Misc = {
            Movement = {
                Speed = {
                    Enabled = false,
                    Amount = 1
                },
            },
            Exploits = {
                Enabled = false,
                NoRecoil = false,
                NoJumpCooldown = false,
                NoSlowDown = false
            }
        }
    }

    --// Functions
    do
        --// Utility Functions
        do
            Script.Functions.WorldToScreen = function(Position: Vector3)
                if not Position then return end

                local ViewportPointPosition, OnScreen = Camera:WorldToViewportPoint(Position)
                local ScreenPosition = Vector2.new(ViewportPointPosition.X, ViewportPointPosition.Y)
                return {
                    Position = ScreenPosition,
                    OnScreen = OnScreen
                }
            end

            Script.Functions.Connection = function(ConnectionType: any, Function: any)
                local Connection = ConnectionType:Connect(Function)
                return Connection
            end

            Script.Functions.MoveMouse = function(Position: Vector2, SmoothingX: number, SmoothingY: number)
                local MousePosition = UserInputService:GetMouseLocation()

                mousemoverel((Position.X - MousePosition.X) / SmoothingX, (Position.Y - MousePosition.Y) / SmoothingY)
            end

            Script.Functions.CreateDrawing = function(DrawingType: string, Properties: any)
                local DrawingObject = Drawing.new(DrawingType)

                for Property, Value in pairs(Properties) do
                    DrawingObject[Property] = Value
                end
                return DrawingObject
            end

            Script.Functions.WallCheck = function(Part: any)
                local RayCastParams = RaycastParams.new()
                RayCastParams.FilterType = Enum.RaycastFilterType.Exclude
                RayCastParams.IgnoreWater = true
                RayCastParams.FilterDescendantsInstances = Script.AzureIgnoreFolder:GetChildren()

                local CameraPosition = Camera.CFrame.Position
                local Direction = (Part.Position - CameraPosition).Unit
                local RayCastResult = workspace:Raycast(CameraPosition, Direction * 10000, RayCastParams)

                return RayCastResult.Instance and RayCastResult.Instance == Part
            end

            Script.Functions.Create = function(ObjectType: string, Properties: any)
                local Object = Instance.new(ObjectType)

                for Property, Value in pairs(Properties) do
                    Object[Property] = Value
                end
                return Object
            end

            Script.Functions.GetGun = function(Player: any)
                local Info = {
                    Tool = nil,
                    Ammo = nil,
                    IsGunEquipped = false
                }

                local Tool = Player.Character:FindFirstChildWhichIsA("Tool")

                if not Tool then return end

                if game.GameId == 1958807588 then
                    local ArmoryGun = Player.Information.Armory:FindFirstChild(Tool.Name)
                    if ArmoryGun then
                        Info.Tool = Tool
                        Info.Ammo = ArmoryGun.Ammo.Normal
                        Info.IsGunEquipped = true
                    else
                        for _, Object in pairs(Tool:GetChildren()) do
                            if Object.Name:lower():find("ammo") and not Object.Name:lower():find("max") then
                                Info.Tool = Tool
                                Info.IsGunEquipped = true
                                Info.Ammo = Object
                            end
                        end
                    end
                elseif game.GameId == 3634139746 then
                    for _, Object in pairs(Tool:getdescendants()) do
                        if Object.Name:lower():find("ammo") and not Object.Name:lower():find("max") and not Object.Name:lower():find("no") then
                            Info.Tool = Tool
                            Info.Ammo = Object
                            Info.IsGunEquipped = true
                        end
                    end
                else
                    for _, Object in pairs(Tool:GetChildren()) do
                        if Object.Name:lower():find("ammo") and not Object.Name:lower():find("max") then
                            Info.Tool = Tool
                            Info.IsGunEquipped = true
                            Info.Ammo = Object
                        end
                    end
                end


                return Info
            end

            Script.Functions.Beam = function(StartPos: Vector3, EndPos: Vector3)
                local ColorSequence = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Settings.Visuals.BulletTracers.Color.Gradient1),
                    ColorSequenceKeypoint.new(1, Settings.Visuals.BulletTracers.Color.Gradient2),
                })
                local Part = Instance.new("Part", Script.AzureIgnoreFolder)
                Part.Size = Vector3.new(0, 0, 0)
                Part.Massless = true
                Part.Transparency = 1
                Part.CanCollide = false
                Part.Position = StartPos
                Part.Anchored = true
                local Attachment = Instance.new("Attachment", Part)
                local Part2 = Instance.new("Part", Script.AzureIgnoreFolder)
                Part2.Size = Vector3.new(0, 0, 0)
                Part2.Transparency = 0
                Part2.CanCollide = false
                Part2.Position = EndPos
                Part2.Anchored = true
                Part2.Material = Enum.Material.ForceField
                Part2.Color = Color3.fromRGB(255, 0, 212)
                Part2.Massless = true
                local Attachment2 = Instance.new("Attachment", Part2)
                local Beam = Instance.new("Beam", Part)
                Beam.FaceCamera = true
                Beam.Color = ColorSequence
                Beam.Attachment0 = Attachment
                Beam.Attachment1 = Attachment2
                Beam.LightEmission = 6
                Beam.LightInfluence = 1
                Beam.Width0 = 1.5
                Beam.Width1 = 1.5
                Beam.Texture = "http://www.roblox.com/asset/?id=446111271"
                Beam.TextureSpeed = 2
                Beam.TextureLength = 1
                task.delay(Settings.Visuals.BulletTracers.Duration, function()
                    if Settings.Visuals.BulletTracers.Fade.Enabled then
                        local TweenValue = Instance.new("NumberValue")
                        TweenValue.Parent = Beam
                        local Tween = TweenService:Create(TweenValue, TweenInfo.new(Settings.Visuals.BulletTracers.Fade.Duration), {Value = 1})
                        Tween:Play()

                        local Connection
                        Connection = Script.Functions.Connection(TweenValue:GetPropertyChangedSignal("Value"), function()
                            Beam.Transparency = NumberSequence.new(TweenValue.Value, TweenValue.Value)
                        end)

                        Script.Functions.Connection(Tween.Completed, function()
                            Connection:Disconnect()
                            Part:Destroy()
                            Part2:Destroy()
                        end)
                    else
                        Part:Destroy()
                        Part2:Destroy()
                    end
                end)
            end

            Script.Functions.Impact = function(Pos: Vector3)
                local Part = Script.Functions.Create("Part", {
                    Parent = Script.AzureIgnoreFolder,
                    Color = Settings.Visuals.BulletImpacts.Color,
                    Size = Vector3.new(Settings.Visuals.BulletImpacts.Size, Settings.Visuals.BulletImpacts.Size, Settings.Visuals.BulletImpacts.Size),
                    Position = Pos,
                    Anchored = true,
                    Material = Enum.Material[Settings.Visuals.BulletImpacts.Material]
                })

                task.delay(Settings.Visuals.BulletImpacts.Duration, function()
                    if Settings.Visuals.BulletImpacts.Fade.Enabled then
                        local Tween = TweenService:Create(Part, TweenInfo.new(Settings.Visuals.BulletImpacts.Fade.Duration), {Transparency = 1})
                        Tween:Play()

                        Script.Functions.Connection(Tween.Completed, function()
                            Part:Destroy()
                        end)
                    else
                        Part:Destroy()
                    end
                end)
            end

            Script.Functions.GetClosestPlayerDamage = function(Position: Vector3, MaxRadius: number)
                local Radius = MaxRadius
                local ClosestPlayer

                for PlayerName, Health in pairs(Script.Locals.PlayerHealth) do
                    local Player = Players:FindFirstChild(PlayerName)
                    if Player and Player.Character then
                        local PlayerPosition = Player.Character.PrimaryPart.Position
                        local Distance = (Position - PlayerPosition).Magnitude
                        local CurrentHealth = Player.Character.Humanoid.Health
                        if (Distance < Radius) and (CurrentHealth < Health) then
                            Radius = Distance
                            ClosestPlayer = Player
                        end
                    end
                end
                return ClosestPlayer
            end


            Script.Functions.Effect = function(Part, Color)
                local Clone = Script.Locals.HitEffect:Clone()
                Clone.Parent = Part

                for _, Effect in pairs(Clone:GetChildren()) do
                    if Effect:IsA("ParticleEmitter") then
                        Effect.Color = ColorSequence.new({
                            ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
                            ColorSequenceKeypoint.new(0.495, Settings.Visuals.OnHit.Effect.Color),
                            ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0)),
                        })
                        Effect:Emit(1)
                    end
                end

                task.delay(2, function()
                    Clone:Destroy()
                end)
            end

            Script.Functions.PlaySound = function(SoundId, Volume)
                local Sound = Instance.new("Sound")
                Sound.Parent = Script.AzureIgnoreFolder
                Sound.Volume = Volume
                Sound.SoundId = SoundId

                Sound:Play()

                Script.Functions.Connection(Sound.Ended, function()
                    Sound:Destroy()
                end)
            end

            Script.Functions.Hitcham = function(Player, Color)
                for _, BodyPart in pairs(Player.Character:GetChildren()) do
                    if BodyPart.Name ~= "HumanoidRootPart" and BodyPart:IsA("BasePart") then
                        local Part = Instance.new("Part")
                        Part.Name = BodyPart.Name .. "_Clone"
                        Part.Parent = Script.AzureIgnoreFolder
                        Part.Material = Enum.Material[Settings.Visuals.OnHit.Chams.Material]
                        Part.Color = Settings.Visuals.OnHit.Chams.Color
                        Part.Transparency = 0
                        Part.Anchored = true
                        Part.Size = BodyPart.Size
                        Part.CFrame = BodyPart.CFrame

                        task.delay(Settings.Visuals.OnHit.Chams.Duration, function()
                            Part:Destroy()
                        end)
                    end
                end
            end

            Script.Functions.Rotate = function(Vector, Origin, Angle)
                local CosA = math.cos(Angle)
                local SinA = math.sin(Angle)
                local X = Vector.X - Origin.X
                local Y = Vector.Y - Origin.Y
                local NewX = X * CosA - Y * SinA
                local NewY = X * SinA + Y * CosA
                return Vector2.new(NewX + Origin.x, NewY + Origin.y)
            end
        end

        --// General Functions
        do
            Script.Functions.GetClosestPlayer = function()
                local Radius = Settings.Combat.Fov.Enabled and Settings.Combat.Fov.Radius or math.huge
                local ClosestPlayer
                local Mouse = UserInputService:GetMouseLocation()

                for _, Player in pairs(Players:GetPlayers()) do
                    if Player ~= LocalPlayer then
                        --// Variables
                        local ScreenPosition = Script.Functions.WorldToScreen(Player.Character.PrimaryPart.Position)
                        local Distance = (Mouse - ScreenPosition.Position).Magnitude

                        --// OnScreen Check
                        if not ScreenPosition.OnScreen then continue end

                        --// Checks
                        if (Settings.Combat.Checks.Enabled and (Settings.Combat.Checks.Vehicle and Player.Character:FindFirstChild("[CarHitBox]")) or (Settings.Combat.Checks.Knocked and Player.Character.BodyEffects["K.O"].Value == true) or (Settings.Combat.Checks.Grabbed and Player.Character:FindFirstChild("GRABBING_CONSTRAINT")) or (Settings.Combat.Checks.Crew and Player.DataFolder.Information.Crew.Value == LocalPlayer.DataFolder.Information.Crew.Value) or (Settings.Combat.Checks.Wall and Script.Functions.WallCheck(Player.Character.PrimaryPart))) then continue end

                        if (Distance < Radius) then
                            Radius = Distance
                            ClosestPlayer = Player
                        end
                    end
                end

                return ClosestPlayer
            end

            Script.Functions.GetPredictedPosition = function()
                local BodyPart = Script.Locals.Target.Character[Settings.Combat.AimPart]
                local Velocity = Settings.Combat.Resolver.Enabled and Script.Locals.Resolver.ResolvedVelocity or Script.Locals.Target.Character.HumanoidRootPart.Velocity
                local Position = BodyPart.Position + Velocity * Vector3.new(Settings.Combat.Prediction.Horizontal, Settings.Combat.Prediction.Vertical, Settings.Combat.Prediction.Horizontal)

                if Settings.Combat.Air.Enabled and Settings.Combat.Air.JumpOffset.Enabled then
                    Position = Position + Vector3.new(0, Script.Locals.JumpOffset, 0)
                end

                return Position
            end

            Script.Functions.Resolve = function()
                if Settings.Combat.Enabled and Settings.Combat.Resolver.Enabled and Script.Locals.IsTargetting and Script.Locals.Target then
                    --// Variables
                    local HumanoidRootPart = Script.Locals.Target.Character.HumanoidRootPart
                    local CurrentPosition = HumanoidRootPart.Position
                    local DeltaTime = tick() - Script.Locals.Resolver.OldTick
                    local NewVelocity = (CurrentPosition - Script.Locals.Resolver.OldPos) / DeltaTime

                    --// Set the velocity
                    Script.Locals.Resolver.ResolvedVelocity = NewVelocity

                    --// Update the old tick and old position
                    if tick() - Script.Locals.Resolver.OldTick >= 1 / Settings.Combat.Resolver.RefreshRate then
                        Script.Locals.Resolver.OldTick, Script.Locals.Resolver.OldPos = tick(), HumanoidRootPart.Position
                    end
                end
            end

            Script.Functions.MouseAim = function()
                if Settings.Combat.Enabled and Settings.Combat.Mouse and Script.Locals.IsTargetting and Script.Locals.Target then
                    local Position = Script.Functions.GetPredictedPosition()
                    local ScreenPosition = Script.Functions.WorldToScreen(Position)

                    if ScreenPosition.OnScreen then
                        Script.Functions.MoveMouse(ScreenPosition.Position, Settings.Combat.Smoothing.Horizontal, Settings.Combat.Smoothing.Vertical)
                    end
                end
            end

            Script.Functions.UpdateFieldOfView = function()
                Script.Utility.Drawings["FieldOfViewVisualizer"].Visible = Settings.Combat.Enabled and Settings.Combat.Fov.Enabled and Settings.Combat.Fov.Visualize.Enabled
                Script.Utility.Drawings["FieldOfViewVisualizer"].Color = Settings.Combat.Fov.Visualize.Color
                Script.Utility.Drawings["FieldOfViewVisualizer"].Radius = Settings.Combat.Fov.Radius
                Script.Utility.Drawings["FieldOfViewVisualizer"].Position = UserInputService:GetMouseLocation()
            end

            Script.Functions.UpdateTargetVisuals = function()
                --// ScreenPosition, Will be changed later
                local Position

                --// Variable to indicate if you"re targetting or not with a check if the target visuals are enabled
                local IsTargetting = Settings.Combat.Enabled and Settings.Combat.Visuals.Enabled and Script.Locals.IsTargetting and Script.Locals.Target or false

                --// Change the position
                if IsTargetting then
                    local PredictedPosition = Script.Functions.GetPredictedPosition()
                    Position = Script.Functions.WorldToScreen(PredictedPosition)
                end

                --// Variable to indicate if the drawing elements should show
                local TracerShow = IsTargetting and Settings.Combat.Visuals.Tracer.Enabled and Position.OnScreen or false
                local DotShow = IsTargetting and Settings.Combat.Visuals.Dot.Enabled and Position.OnScreen or false
                local ChamsShow = IsTargetting and Settings.Combat.Visuals.Chams.Enabled and Script.Locals.Target and Script.Locals.Target.Character or nil


                --// Set the drawing elements visibility
                Script.Utility.Drawings["TargetTracer"].Visible = TracerShow
                Script.Utility.Drawings["TargetDot"].Visible = DotShow
                Script.Utility.Drawings["TargetChams"].Parent = ChamsShow


                --// Update the drawing elements
                if TracerShow then
                    Script.Utility.Drawings["TargetTracer"].From = UserInputService:GetMouseLocation()
                    Script.Utility.Drawings["TargetTracer"].To = Position.Position
                    Script.Utility.Drawings["TargetTracer"].Color = Settings.Combat.Visuals.Tracer.Color
                    Script.Utility.Drawings["TargetTracer"].Thickness = Settings.Combat.Visuals.Tracer.Thickness
                end

                if DotShow then
                    Script.Utility.Drawings["TargetDot"].Position = Position.Position
                    Script.Utility.Drawings["TargetDot"].Radius = Settings.Combat.Visuals.Dot.Size
                    Script.Utility.Drawings["TargetDot"].Filled = Settings.Combat.Visuals.Dot.Filled
                    Script.Utility.Drawings["TargetDot"].Color = Settings.Combat.Visuals.Dot.Color
                end

                if ChamsShow then
                    Script.Utility.Drawings["TargetChams"].FillColor = Settings.Combat.Visuals.Chams.Fill.Color
                    Script.Utility.Drawings["TargetChams"].FillTransparency = Settings.Combat.Visuals.Chams.Fill.Transparency
                    Script.Utility.Drawings["TargetChams"].OutlineTransparency = Settings.Combat.Visuals.Chams.Outline.Transparency
                    Script.Utility.Drawings["TargetChams"].OutlineColor = Settings.Combat.Visuals.Chams.Outline.Color
                end
            end

            Script.Functions.AutoSelect = function()
                if (Settings.Combat.Enabled and Settings.Combat.AutoSelect.Enabled) and (tick() - Script.Locals.AutoSelectTick >= Settings.Combat.AutoSelect.Cooldown.Amount and Settings.Combat.AutoSelect.Cooldown.Enabled or true) then
                    local NewTarget = Script.Functions.GetClosestPlayer()
                    Script.Locals.Target = NewTarget or nil
                    Script.Locals.IsTargetting =  NewTarget and true or false
                    Script.Locals.AutoSelectTick = tick()
                end
            end

            Script.Functions.GunEvents = function()
                local CurrentGun = Script.Functions.GetGun(LocalPlayer)

                if CurrentGun and CurrentGun.IsGunEquipped and CurrentGun.Tool then
                    if CurrentGun.Tool ~= Script.Locals.Gun.PreviousGun then
                        Script.Locals.Gun.PreviousGun = CurrentGun.Tool
                        Script.Locals.Gun.PreviousAmmo = 999

                        --// Connections
                        for _, Connection in pairs(Script.Connections.GunConnections) do
                            Connection:Disconnect()
                        end
                        Script.Connections.GunConnections = {}
                    end

                    if not Script.Connections.GunConnections["GunActivated"] and Settings.Combat.Enabled and Settings.Combat.Silent and Script.Locals.AntiAimViewer.MouseRemoteFound then
                        Script.Connections.GunConnections["GunActivated"] = Script.Functions.Connection(CurrentGun.Tool.Activated, function()
                            if Script.Locals.IsTargetting and Script.Locals.Target then
                                if Settings.Combat.AntiAimViewer then
                                    local Arguments = Script.Locals.AntiAimViewer.MouseRemoteArgs

                                    Arguments[Script.Locals.AntiAimViewer.MouseRemotePositionIndex] = Script.Functions.GetPredictedPosition()
                                    Script.Locals.AntiAimViewer.MouseRemote:FireServer(unpack(Arguments))
                                end
                            end
                        end)
                    end


                    if not Script.Connections.GunConnections["GunAmmoChanged"] then
                        Script.Connections.GunConnections["GunAmmoChanged"] = Script.Functions.Connection(CurrentGun.Ammo:GetPropertyChangedSignal("Value") , function()
                            local NewAmmo = CurrentGun.Ammo.Value
                            if (NewAmmo < Script.Locals.Gun.PreviousAmmo or (game.GameId == 3985694250 and NewAmmo > Script.Locals.Gun.PreviousAmmo)) and Script.Locals.Gun.PreviousAmmo then

                                local ChildAdded
                                local ChildrenAdded = 0
                                ChildAdded = Script.Functions.Connection(Script.Locals.BulletPath[game.GameId].ChildAdded, function(Object)
                                    if Object.Name == "BULLET_RAYS" then
                                        ChildrenAdded += 1
                                        if (table.find(Script.Locals.Gun.Shotguns, CurrentGun.Tool.Name) and ChildrenAdded <= 5) or (ChildrenAdded == 1) then
                                            local GunBeam = Object:WaitForChild("GunBeam")
                                            local StartPos, EndPos = Object.Position, GunBeam.Attachment1.WorldPosition

                                            if Settings.Visuals.BulletTracers.Enabled then
                                                GunBeam:Destroy()
                                                Script.Functions.Beam(StartPos, EndPos)
                                            end

                                            if Settings.Visuals.BulletImpacts.Enabled then
                                                Script.Functions.Impact(EndPos)
                                            end

                                            if Settings.Visuals.OnHit.Enabled then
                                                local Player = Script.Functions.GetClosestPlayerDamage(EndPos, 20)
                                                if Player then
                                                    if Settings.Visuals.OnHit.Effect.Enabled then
                                                        Script.Functions.Effect(Player.Character.HumanoidRootPart)
                                                    end

                                                    if Settings.Visuals.OnHit.Sound.Enabled then
                                                        local Sound = string.format("hitsounds/%s", Settings.Visuals.OnHit.Sound.Value)
                                                        Script.Functions.PlaySound(getcustomasset(Sound), Settings.Visuals.OnHit.Sound.Volume)
                                                    end

                                                    if Settings.Visuals.OnHit.Chams.Enabled then
                                                        Script.Functions.Hitcham(Player, Settings.Visuals.OnHit.Chams.Color)
                                                    end
                                                end
                                            end
                                            ChildAdded:Disconnect()
                                        end
                                    else
                                        ChildAdded:Disconnect()
                                    end
                                end)
                            end
                            Script.Locals.Gun.PreviousAmmo = NewAmmo
                        end)
                    end
                end
            end

            Script.Functions.Air = function()
                if Settings.Combat.Enabled and Script.Locals.IsTargetting and Script.Locals.Target and Settings.Combat.Air.Enabled then
                    local Humanoid = Script.Locals.Target.Character.Humanoid

                    if Humanoid:GetState() == Enum.HumanoidStateType.Freefall then
                        Script.Locals.JumpOffset = Settings.Combat.Air.JumpOffset.Offset
                    else
                        Script.Locals.JumpOffset = 0
                    end
                end
            end

            Script.Functions.UpdateHealth = function()
                if Settings.Visuals.OnHit.Enabled then
                    for _, Player in pairs(Players:GetPlayers()) do
                        if Player.Character and Player.Character.Humanoid then
                            Script.Locals.PlayerHealth[Player.Name] = Player.Character.Humanoid.Health
                        end
                    end
                end
            end

            Script.Functions.UpdateAtmosphere = function()
                Lighting.FogColor = Settings.Visuals.World.Enabled and Settings.Visuals.World.Fog.Enabled and Settings.Visuals.World.Fog.Color or Script.Locals.World.FogColor
                Lighting.FogStart = Settings.Visuals.World.Enabled and Settings.Visuals.World.Fog.Enabled and Settings.Visuals.World.Fog.Start or Script.Locals.World.FogStart
                Lighting.FogEnd = Settings.Visuals.World.Enabled and Settings.Visuals.World.Fog.Enabled and Settings.Visuals.World.Fog.End or Script.Locals.World.FogEnd
                Lighting.Ambient = Settings.Visuals.World.Enabled and Settings.Visuals.World.Ambient.Enabled and Settings.Visuals.World.Ambient.Color or Script.Locals.World.Ambient
                Lighting.Brightness = Settings.Visuals.World.Enabled and Settings.Visuals.World.Brightness.Enabled and Settings.Visuals.World.Brightness.Value or Script.Locals.World.Brightness
                Lighting.ClockTime = Settings.Visuals.World.Enabled and Settings.Visuals.World.ClockTime.Enabled and Settings.Visuals.World.ClockTime.Value or Script.Locals.World.ClockTime
                Lighting.ExposureCompensation = Settings.Visuals.World.Enabled and Settings.Visuals.World.WorldExposure.Enabled and Settings.Visuals.World.WorldExposure.Value or Script.Locals.World.ExposureCompensation
            end

            Script.Functions.VelocitySpoof = function()
                local ShowVisualizerDot = Settings.AntiAim.VelocitySpoofer.Enabled and Settings.AntiAim.VelocitySpoofer.Visualize.Enabled

                Script.Utility.Drawings["VelocityDot"].Visible = ShowVisualizerDot


                if Settings.AntiAim.VelocitySpoofer.Enabled then
                    --// Variables
                    local Type = Settings.AntiAim.VelocitySpoofer.Type
                    local HumanoidRootPart = LocalPlayer.Character.HumanoidRootPart
                    local Velocity = HumanoidRootPart.Velocity

                    --// Main
                    if Type == "Underground" then
                        HumanoidRootPart.Velocity = HumanoidRootPart.Velocity + Vector3.new(0, -Settings.AntiAim.VelocitySpoofer.Yaw, 0)
                    elseif Type == "Sky" then
                        HumanoidRootPart.Velocity = HumanoidRootPart.Velocity + Vector3.new(0, Settings.AntiAim.VelocitySpoofer.Yaw, 0)
                    elseif Type == "Multiplier" then
                        HumanoidRootPart.Velocity = HumanoidRootPart.Velocity + Vector3.new(Settings.AntiAim.VelocitySpoofer.Yaw, Settings.AntiAim.VelocitySpoofer.Pitch, Settings.AntiAim.VelocitySpoofer.Roll)
                    elseif Type == "Custom" then
                        HumanoidRootPart.Velocity = Vector3.new(Settings.AntiAim.VelocitySpoofer.Yaw, Settings.AntiAim.VelocitySpoofer.Pitch, Settings.AntiAim.VelocitySpoofer.Roll)
                    elseif Type == "Prediction Breaker" then
                        HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
                    end

                    if ShowVisualizerDot then
                        local ScreenPosition = Script.Functions.WorldToScreen(LocalPlayer.Character.HumanoidRootPart.Position + LocalPlayer.Character.HumanoidRootPart.Velocity * Settings.AntiAim.VelocitySpoofer.Visualize.Prediction)

                        Script.Utility.Drawings["VelocityDot"].Position = ScreenPosition.Position
                        Script.Utility.Drawings["VelocityDot"].Color = Settings.AntiAim.VelocitySpoofer.Visualize.Color
                    end

                    RunService.RenderStepped:Wait()
                    HumanoidRootPart.Velocity = Velocity
                end
            end

            Script.Functions.CSync = function()
                Script.Utility.Drawings["CFrameVisualize"].Parent = Settings.AntiAim.CSync.Visualize.Enabled and Settings.AntiAim.CSync.Enabled and Script.AzureIgnoreFolder or nil

                if Settings.AntiAim.CSync.Enabled then
                    local Type = Settings.AntiAim.CSync.Type
                    local FakeCFrame = LocalPlayer.Character.HumanoidRootPart.CFrame
                    Script.Locals.SavedCFrame = LocalPlayer.Character.HumanoidRootPart.CFrame
                    if Type == "Custom" then
                        FakeCFrame = FakeCFrame * CFrame.new(Settings.AntiAim.CSync.Custom.X, Settings.AntiAim.CSync.Custom.Y, Settings.AntiAim.CSync.Custom.Z)
                    elseif Type == "Target Strafe" and Script.Locals.IsTargetting and Script.Locals.Target and Settings.Combat.Enabled then
                        local CurrentTime = tick()
                        FakeCFrame = CFrame.new(Script.Locals.Target.Character.HumanoidRootPart.Position) * CFrame.Angles(0, 2 * math.pi * CurrentTime * Settings.AntiAim.CSync.TargetStrafe.Speed % (2 * math.pi), 0) * CFrame.new(0, Settings.AntiAim.CSync.TargetStrafe.Height, Settings.AntiAim.CSync.TargetStrafe.Distance)
                    elseif Type == "Local Strafe" then
                        local CurrentTime = tick()
                        FakeCFrame = CFrame.new(LocalPlayer.Character.HumanoidRootPart.Position) * CFrame.Angles(0, 2 * math.pi * CurrentTime * Settings.AntiAim.CSync.TargetStrafe.Speed % (2 * math.pi), 0) * CFrame.new(0, Settings.AntiAim.CSync.TargetStrafe.Height, Settings.AntiAim.CSync.TargetStrafe.Distance)
                    elseif Type == "Random" then
                        FakeCFrame = CFrame.new(LocalPlayer.Character.HumanoidRootPart.Position + Vector3.new(math.random(-Settings.AntiAim.CSync.RandomDistance, Settings.AntiAim.CSync.RandomDistance), math.random(-Settings.AntiAim.CSync.RandomDistance, Settings.AntiAim.CSync.RandomDistance), math.random(-Settings.AntiAim.CSync.RandomDistance, Settings.AntiAim.CSync.RandomDistance))) * CFrame.Angles(math.rad(math.random(0, 360)), math.rad(math.random(0, 360)), math.rad(math.random(0, 360)))
                    elseif Type == "Random Target" and Script.Locals.IsTargetting and Script.Locals.Target and Settings.Combat.Enabled then
                        FakeCFrame = CFrame.new(Script.Locals.Target.Character.HumanoidRootPart.Position + Vector3.new(math.random(-Settings.AntiAim.CSync.RandomDistance, Settings.AntiAim.CSync.RandomDistance), math.random(-Settings.AntiAim.CSync.RandomDistance, Settings.AntiAim.CSync.RandomDistance), math.random(-Settings.AntiAim.CSync.RandomDistance, Settings.AntiAim.CSync.RandomDistance))) * CFrame.Angles(math.rad(math.random(0, 360)), math.rad(math.random(0, 360)), math.rad(math.random(0, 360)))
                    end

                    Script.Utility.Drawings["CFrameVisualize"]:SetPrimaryPartCFrame(FakeCFrame)

                    for _, Part in pairs(Script.Utility.Drawings["CFrameVisualize"]:GetChildren()) do
                        Part.Color = Settings.AntiAim.CSync.Visualize.Color
                    end

                    LocalPlayer.Character.HumanoidRootPart.CFrame = FakeCFrame
                    RunService.RenderStepped:Wait()
                    LocalPlayer.Character.HumanoidRootPart.CFrame = Script.Locals.SavedCFrame
                end
            end

            Script.Functions.Network = function()
                if Settings.AntiAim.Network.Enabled then
                    if (tick() - Script.Locals.NetworkPreviousTick) >= ((Settings.AntiAim.Network.Amount / math.pi) / 10000) or (Settings.AntiAim.Network.WalkingCheck and LocalPlayer.Character.Humanoid.MoveDirection.Magnitude > 0) then
                        Script.Locals.NetworkShouldSleep = not Script.Locals.NetworkShouldSleep
                        Script.Locals.NetworkPreviousTick = tick()
                        sethiddenproperty(LocalPlayer.Character.HumanoidRootPart, "NetworkIsSleeping", Script.Locals.NetworkShouldSleep)
                    end
                end
            end

            Script.Functions.Speed = function()
                if Settings.Misc.Movement.Speed.Enabled then
                    LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame + LocalPlayer.Character.Humanoid.MoveDirection * Settings.Misc.Movement.Speed.Amount
                end
            end

            Script.Functions.VelocityDesync = function()
                if Settings.AntiAim.VelocityDesync.Enabled then
                    local HumanoidRootPart = LocalPlayer.Character.HumanoidRootPart
                    local Velocity = HumanoidRootPart.Velocity
                    local Amount = Settings.AntiAim.VelocityDesync.Range * 1000
                    HumanoidRootPart.Velocity = Vector3.new(math.random(-Amount, Amount), math.random(-Amount, Amount), math.random(-Amount, Amount))
                    RunService.RenderStepped:Wait()
                    HumanoidRootPart.Velocity = Velocity
                end
            end

            Script.Functions.FFlagDesync = function()
                if Settings.AntiAim.FFlagDesync.Enabled then
                    for FFlag, _ in pairs(Settings.AntiAim.FFlagDesync.FFlags) do
                        local Value = Settings.AntiAim.FFlagDesync.Amount
                        setfflag(FFlag, tostring(Value))

                        RunService.RenderStepped:Wait()
                        if Settings.AntiAim.FFlagDesync.SetNew then
                            setfflag(FFlag, Settings.AntiAim.FFlagDesync.SetNewAmount)
                        end
                    end
                end
            end


            --// Invisible Desync

            Script.Functions.NoSlowdown = function()
                if Settings.Misc.Exploits.NoSlowDown then
                    for _, Slowdown in pairs(LocalPlayer.Character.BodyEffects.Movement:GetChildren()) do
                        Slowdown:Destroy()
                    end
                end
            end

            --// Horrid code
            Script.Functions.UpdateCrosshair = function()
                if Settings.Visuals.Crosshair.Enabled then
                    local MouseX, MouseY
                    local RotationAngle = Script.Locals.RotationAngle
                    local RealSize = Settings.Visuals.Crosshair.Size * 2

                    if not MouseX or not MouseY then
                        MouseX, MouseY = UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y
                    end

                    local Gap = Settings.Visuals.Crosshair.Gap
                    if Settings.Visuals.Crosshair.Rotation.Enabled then
                        Script.Locals.RotationAngle = Script.Locals.RotationAngle + Settings.Visuals.Crosshair.Rotation.Speed
                    else
                        Script.Locals.RotationAngle = 0
                    end

                    Script.Utility.Drawings["CrosshairLeft"].Visible = true
                    Script.Utility.Drawings["CrosshairLeft"].Color = Settings.Visuals.Crosshair.Color
                    Script.Utility.Drawings["CrosshairLeft"].Thickness = 1
                    Script.Utility.Drawings["CrosshairLeft"].Transparency = 1
                    Script.Utility.Drawings["CrosshairLeft"].From = Vector2.new(MouseX + Gap, MouseY)
                    Script.Utility.Drawings["CrosshairLeft"].To = Vector2.new(MouseX + RealSize, MouseY)
                    if Settings.Visuals.Crosshair.Rotation.Enabled then
                        Script.Utility.Drawings["CrosshairLeft"].From = Script.Functions.Rotate(Script.Utility.Drawings["CrosshairLeft"].From, Vector2.new(MouseX, MouseY), math.rad(RotationAngle))
                        Script.Utility.Drawings["CrosshairLeft"].To = Script.Functions.Rotate(Script.Utility.Drawings["CrosshairLeft"].To, Vector2.new(MouseX, MouseY), math.rad(RotationAngle))
                    end

                    Script.Utility.Drawings["CrosshairRight"].Visible = true
                    Script.Utility.Drawings["CrosshairRight"].Color = Settings.Visuals.Crosshair.Color
                    Script.Utility.Drawings["CrosshairRight"].Thickness = 1
                    Script.Utility.Drawings["CrosshairRight"].Transparency = 1
                    Script.Utility.Drawings["CrosshairRight"].From = Vector2.new(MouseX - Gap, MouseY)
                    Script.Utility.Drawings["CrosshairRight"].To = Vector2.new(MouseX - RealSize, MouseY)
                    if Settings.Visuals.Crosshair.Rotation.Enabled then
                        Script.Utility.Drawings["CrosshairRight"].From = Script.Functions.Rotate(Script.Utility.Drawings["CrosshairRight"].From, Vector2.new(MouseX, MouseY), math.rad(RotationAngle))
                        Script.Utility.Drawings["CrosshairRight"].To = Script.Functions.Rotate(Script.Utility.Drawings["CrosshairRight"].To, Vector2.new(MouseX, MouseY), math.rad(RotationAngle))
                    end

                    Script.Utility.Drawings["CrosshairTop"].Visible = true
                    Script.Utility.Drawings["CrosshairTop"].Color = Settings.Visuals.Crosshair.Color
                    Script.Utility.Drawings["CrosshairTop"].Thickness = 1
                    Script.Utility.Drawings["CrosshairTop"].Transparency = 1
                    Script.Utility.Drawings["CrosshairTop"].From = Vector2.new(MouseX, MouseY + Gap)
                    Script.Utility.Drawings["CrosshairTop"].To = Vector2.new(MouseX, MouseY + RealSize)
                    if Settings.Visuals.Crosshair.Rotation.Enabled then
                        Script.Utility.Drawings["CrosshairTop"].From = Script.Functions.Rotate(Script.Utility.Drawings["CrosshairTop"].From, Vector2.new(MouseX, MouseY), math.rad(RotationAngle))
                        Script.Utility.Drawings["CrosshairTop"].To = Script.Functions.Rotate(Script.Utility.Drawings["CrosshairTop"].To, Vector2.new(MouseX, MouseY), math.rad(RotationAngle))
                    end

                    Script.Utility.Drawings["CrosshairBottom"].Visible = true
                    Script.Utility.Drawings["CrosshairBottom"].Color = Settings.Visuals.Crosshair.Color
                    Script.Utility.Drawings["CrosshairBottom"].Thickness = 1
                    Script.Utility.Drawings["CrosshairBottom"].Transparency = 1
                    Script.Utility.Drawings["CrosshairBottom"].From = Vector2.new(MouseX, MouseY - Gap)
                    Script.Utility.Drawings["CrosshairBottom"].To = Vector2.new(MouseX, MouseY - RealSize)
                    if Settings.Visuals.Crosshair.Rotation.Enabled then
                        Script.Utility.Drawings["CrosshairBottom"].From = Script.Functions.Rotate(Script.Utility.Drawings["CrosshairBottom"].From, Vector2.new(MouseX, MouseY), math.rad(RotationAngle))
                        Script.Utility.Drawings["CrosshairBottom"].To = Script.Functions.Rotate(Script.Utility.Drawings["CrosshairBottom"].To, Vector2.new(MouseX, MouseY), math.rad(RotationAngle))
                    end
                else
                    Script.Utility.Drawings["CrosshairBottom"].Visible = false
                    Script.Utility.Drawings["CrosshairTop"].Visible = false
                    Script.Utility.Drawings["CrosshairRight"].Visible = false
                    Script.Utility.Drawings["CrosshairLeft"].Visible = false
                end
            end

            Script.Functions.UpdateLookAt = function()
                if Settings.Combat.Enabled and Settings.Combat.LookAt and Script.Locals.IsTargetting and Script.Locals.Target then
                    LocalPlayer.Character.Humanoid.AutoRotate = false
                    LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(LocalPlayer.Character.HumanoidRootPart.CFrame.Position, Vector3.new(Script.Locals.Target.Character.HumanoidRootPart.CFrame.X, LocalPlayer.Character.HumanoidRootPart.CFrame.Position.Y, Script.Locals.Target.Character.HumanoidRootPart.CFrame.Z))
                else
                    LocalPlayer.Character.Humanoid.AutoRotate = true
                end
            end

            Script.Functions.UpdateSpectate = function()
                if Settings.Combat.Enabled and Settings.Combat.Spectate and Script.Locals.IsTargetting and Script.Locals.Target then
                    Camera.CameraSubject = Script.Locals.Target.Character.Humanoid
                else
                    Camera.CameraSubject = LocalPlayer.Character.Humanoid
                end
            end
        end

        --// Esp Function
        do

        end
    end

    --// Drawing objects
    do
        Script.Utility.Drawings["FieldOfViewVisualizer"] = Script.Functions.CreateDrawing("Circle", {
            Visible = Settings.Combat.Fov.Visualize.Enabled,
            Color = Settings.Combat.Fov.Visualize.Color,
            Radius = Settings.Combat.Fov.Radius
        })

        Script.Utility.Drawings["TargetTracer"] = Script.Functions.CreateDrawing("Line",{
            Visible = false,
            Color = Settings.Combat.Visuals.Tracer.Color,
            Thickness = Settings.Combat.Visuals.Tracer.Thickness
        })

        Script.Utility.Drawings["TargetDot"] = Script.Functions.CreateDrawing("Circle", {
            Visible = false,
            Color = Settings.Combat.Visuals.Dot.Color,
            Radius = Settings.Combat.Visuals.Dot.Size
        })

        Script.Utility.Drawings["VelocityDot"] = Script.Functions.CreateDrawing("Circle", {
            Visible = false,
            Color = Settings.AntiAim.VelocitySpoofer.Visualize.Color,
            Radius = 6,
            Filled = true
        })

        Script.Utility.Drawings["TargetChams"] = Script.Functions.Create("Highlight", {
            Parent = nil,
            FillColor = Settings.Combat.Visuals.Chams.Fill.Color,
            FillTransparency = Settings.Combat.Visuals.Chams.Fill.Transparency,
            OutlineColor = Settings.Combat.Visuals.Chams.Fill.Color,
            OutlineTransparency = Settings.Combat.Visuals.Chams.Outline.Transparency
        })

        Script.Utility.Drawings["CrosshairTop"] = Script.Functions.CreateDrawing("Line", {
            Color = Color3.fromRGB(255, 255, 255),
            Thickness = 1,
            Visible = false,
            ZIndex = 10000
        })

        Script.Utility.Drawings["CrosshairBottom"] = Script.Functions.CreateDrawing("Line", {
            Color = Color3.fromRGB(255, 255, 255),
            Thickness = 1,
            Visible = false,
            ZIndex = 10000
        })

        Script.Utility.Drawings["CrosshairLeft"] = Script.Functions.CreateDrawing("Line", {
            Color = Color3.fromRGB(255, 255, 255),
            Thickness = 1,
            Visible = false,
            ZIndex = 10000
        })

        Script.Utility.Drawings["CrosshairRight"] = Script.Functions.CreateDrawing("Line", {
            Color = Color3.fromRGB(255, 255, 255),
            Thickness = 1,
            Visible = false,
            ZIndex = 10000
        })


        Script.Utility.Drawings["CFrameVisualize"] = game:GetObjects("rbxassetid://9474737816")[1]; Script.Utility.Drawings["CFrameVisualize"].Head.Face:Destroy(); for _, v in pairs(Script.Utility.Drawings["CFrameVisualize"]:GetChildren()) do v.Transparency = v.Name == "HumanoidRootPart" and 1 or 0.70; v.Material = "Neon"; v.Color = Settings.AntiAim.CSync.Visualize.Color; v.CanCollide = false; v.Anchored = false end
    end


    --// Hitsounds
    do
        --// Hitsounds
        Hitsounds = {
            ["ginos bubbles.wav"] = "https://raw.githubusercontent.com/linemaster2/hitsounds/main/hitsound(3).wav",
            ["bell.wav"] = "https://github.com/nyulachan/nyula/blob/main/Sounds/bell.wav?raw=true",
            ["bepis.wav"] = "https://github.com/nyulachan/nyula/blob/main/Sounds/bepis.wav?raw=true",
            ["bubble.wav"] = "https://github.com/nyulachan/nyula/blob/main/Sounds/bubble.wav?raw=true",
            ["cock.wav"] = "https://github.com/nyulachan/nyula/blob/main/Sounds/cock.wav?raw=true",
            ["cod.wav"] = "https://github.com/nyulachan/nyula/blob/main/Sounds/cod.wav?raw=true",
            ["fatality.wav"] = "https://github.com/nyulachan/nyula/blob/main/Sounds/fatality.wav?raw=true",
            ["phonk.wav"] = "https://github.com/nyulachan/nyula/blob/main/Sounds/phonk.wav?raw=true",
            ["sparkle.wav"] = "https://github.com/nyulachan/nyula/blob/main/Sounds/sparkle.wav?raw=true",
            ["rust headshot.wav"] = "https://raw.githubusercontent.com/linemaster2/hitsounds/main/eaolwpzhgsba.wav"
        }

        if not isfolder("hitsounds") then
            makefolder("hitsounds")
        end

        for Name, Url in pairs(Hitsounds) do
            local Path = "hitsounds" .. "/" .. Name
            if not isfile(Path) then
                writefile(Path, game:HttpGet(Url))
            end
        end
    end

    --// Hit Effects
    do
        --// Nova
        do
            local Part = Instance.new("Part")
            Part.Parent = ReplicatedStorage

            local Attachment = Instance.new("Attachment")
            Attachment.Name = "Attachment"
            Attachment.Parent = Part

            Script.Locals.HitEffect = Attachment

            local ParticleEmitter = Instance.new("ParticleEmitter")
            ParticleEmitter.Name = "ParticleEmitter"
            ParticleEmitter.Acceleration = Vector3.new(0, 0, 1)
            ParticleEmitter.Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
                ColorSequenceKeypoint.new(0.495, Color3.fromRGB(255, 0, 0)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0)),
            })
            ParticleEmitter.Lifetime = NumberRange.new(0.5, 0.5)
            ParticleEmitter.LightEmission = 1
            ParticleEmitter.LockedToPart = true
            ParticleEmitter.Rate = 1
            ParticleEmitter.Rotation = NumberRange.new(0, 360)
            ParticleEmitter.Size = NumberSequence.new({
                NumberSequenceKeypoint.new(0, 1),
                NumberSequenceKeypoint.new(1, 10),
                NumberSequenceKeypoint.new(1, 1),
            })
            ParticleEmitter.Speed = NumberRange.new(0, 0)
            ParticleEmitter.Texture = "rbxassetid://1084991215"
            ParticleEmitter.Transparency = NumberSequence.new({
                NumberSequenceKeypoint.new(0, 0),
                NumberSequenceKeypoint.new(0, 0.1),
                NumberSequenceKeypoint.new(0.534, 0.25),
                NumberSequenceKeypoint.new(1, 0.5),
                NumberSequenceKeypoint.new(1, 0),
            })
            ParticleEmitter.ZOffset = 1
            ParticleEmitter.Parent = Attachment
            local ParticleEmitter1 = Instance.new("ParticleEmitter")
            ParticleEmitter1.Name = "ParticleEmitter"
            ParticleEmitter1.Acceleration = Vector3.new(0, 1, -0.001)
            ParticleEmitter1.Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
                ColorSequenceKeypoint.new(0.495, Color3.fromRGB(255, 0, 0)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0)),
            })
            ParticleEmitter1.Lifetime = NumberRange.new(0.5, 0.5)
            ParticleEmitter1.LightEmission = 1
            ParticleEmitter1.LockedToPart = true
            ParticleEmitter1.Orientation = Enum.ParticleOrientation.VelocityPerpendicular
            ParticleEmitter1.Rate = 1
            ParticleEmitter1.Rotation = NumberRange.new(0, 360)
            ParticleEmitter1.Size = NumberSequence.new({
                NumberSequenceKeypoint.new(0, 1),
                NumberSequenceKeypoint.new(1, 10),
                NumberSequenceKeypoint.new(1, 1),
            })
            ParticleEmitter1.Speed = NumberRange.new(0, 0)
            ParticleEmitter1.Texture = "rbxassetid://1084991215"
            ParticleEmitter1.Transparency = NumberSequence.new({
                NumberSequenceKeypoint.new(0, 0),
                NumberSequenceKeypoint.new(0, 0.1),
                NumberSequenceKeypoint.new(0.534, 0.25),
                NumberSequenceKeypoint.new(1, 0.5),
                NumberSequenceKeypoint.new(1, 0),
            })
            ParticleEmitter1.ZOffset = 1
            ParticleEmitter1.Parent = Attachment
        end
    end

    --// Connections
    do
        --// Combat Connections
        do
            Script.Functions.Connection(RunService.Heartbeat, function()
                Script.Functions.MouseAim()

                Script.Functions.Resolve()

                Script.Functions.Air()

                Script.Functions.UpdateLookAt()
            end)

            Script.Functions.Connection(RunService.RenderStepped, function()
                Script.Functions.UpdateFieldOfView()

                Script.Functions.UpdateTargetVisuals()

                Script.Functions.AutoSelect()

                Script.Functions.UpdateSpectate()
            end)
        end

        --// Visual Connections
        do
            Script.Functions.Connection(RunService.RenderStepped, function()
                Script.Functions.GunEvents()

                Script.Functions.UpdateHealth()

                Script.Functions.UpdateAtmosphere()

                Script.Functions.UpdateCrosshair()
            end)
        end

        --// Anti Aim Connection
        do
            Script.Functions.Connection(RunService.Heartbeat, function()
                Script.Functions.VelocitySpoof()

                Script.Functions.CSync()

                Script.Functions.Network()

                Script.Functions.VelocityDesync()

                Script.Functions.FFlagDesync()
            end)
        end

        --// Movement Connections
        do
            Script.Functions.Connection(RunService.Heartbeat, function()
                Script.Functions.Speed()

                Script.Functions.NoSlowdown()
            end)
        end
    end

    --// Hooks
    do
        local __namecall
        local __newindex
        local __index

        __index = hookmetamethod(game, "__index", LPH_NO_VIRTUALIZE(function(Self, Index)
            if not checkcaller() and Settings.AntiAim.CSync.Enabled and Script.Locals.SavedCFrame and Index == "CFrame" and Self == LocalPlayer.Character.HumanoidRootPart then
                return Script.Locals.SavedCFrame
            end
            return __index(Self, Index)
        end))

        __namecall = hookmetamethod(game, "__namecall", LPH_NO_VIRTUALIZE(function(Self, ...)
            local Arguments = {...}
            local Method = tostring(getnamecallmethod())

            if not checkcaller() and Method == "FireServer" then
                for _, Argument in pairs(Arguments) do
                    if typeof(Argument) == "Vector3" then
                        Script.Locals.AntiAimViewer.MouseRemote = Self
                        Script.Locals.AntiAimViewer.MouseRemoteFound = true
                        Script.Locals.AntiAimViewer.MouseRemoteArgs = Arguments
                        Script.Locals.AntiAimViewer.MouseRemotePositionIndex = _

                        if Settings.Combat.Enabled and Settings.Combat.Silent and not Settings.Combat.AntiAimViewer and Script.Locals.IsTargetting and Script.Locals.Target then
                            Arguments[_] =  Script.Functions.GetPredictedPosition()
                        end

                        return __namecall(Self, unpack(Arguments))
                    end
                end
            end
            return __namecall(Self, ...)
        end))

        __newindex = hookmetamethod(game, "__newindex", LPH_NO_VIRTUALIZE(function(Self, Property, Value)
            local CallingScript = getcallingscript()


            --// Atmosphere caching
            if not checkcaller() and Self == Lighting and Script.Locals.World[Property] ~= Value then
                Script.Locals.World[Property] = Value
            end

            --// No Recoil
            if CallingScript.Name == "Framework" and Self == Camera and Property == "CFrame" and Settings.Misc.Exploits.Enabled and Settings.Misc.Exploits.NoRecoil then
                return
            end

            --// No Jump Cooldown
            if CallingScript.Name == "Framework" and Self == LocalPlayer.Character.Humanoid and Property == "JumpPower" and Settings.Misc.Exploits.Enabled and Settings.Misc.Exploits.NoJumpCooldown then
                return
            end

            return __newindex(Self, Property, Value)
        end))
    end

    do
        --// UI
        local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Ziheim51000/test/main/azurev4lib"))()
        local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/addons/SaveManager.lua"))()
        local ThemeManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/caIIed/Linoria-Rewrite/main/Theme%20Manager.lua"))()

        --// Main Window
        local Window = Library:CreateWindow({
            Title = "Ratz V99 NiggersK -- farzad, Credits : LineMaster",
            Center = true,
            AutoShow = true,
            TabPadding = 8,
            MenuFadeTime = 0.2
        })

        local Tabs = {
            Combat = Window:AddTab("Combat"),
            Visuals = Window:AddTab("Visuals"),
            AntiAim = Window:AddTab("Anti Aim"),
            Misc = Window:AddTab("Misc"),
            Settings = Window:AddTab("Settings")
        }

        local Sections = {
            Combat = {
                Main = Tabs.Combat:AddLeftGroupbox("Main"),
                Checks = Tabs.Combat:AddRightGroupbox("Checks"),
                AutoSelect = Tabs.Combat:AddRightGroupbox("Auto Select"),
                Visuals = Tabs.Combat:AddRightGroupbox("Visuals"),
                Smoothing = Tabs.Combat:AddLeftGroupbox("Smoothing"),
                Resolver = Tabs.Combat:AddLeftGroupbox("Resolver"),
                FieldOfView = Tabs.Combat:AddLeftGroupbox("Field Of View"),
                Air = Tabs.Combat:AddRightGroupbox("Air")
            },
            Visuals = {
                --// Esp = Tabs.Visuals:AddLeftGroupbox("Esp"),
                Atmosphere = Tabs.Visuals:AddLeftGroupbox("Atmosphere"),
                Crosshair = Tabs.Visuals:AddLeftGroupbox("Crosshair"),
                BulletTracers = Tabs.Visuals:AddRightGroupbox("Bullet Tracers"),
                BulletImpacts = Tabs.Visuals:AddRightGroupbox("Bullet Impacts"),
                OnHit = Tabs.Visuals:AddRightGroupbox("On Hit")
            },
            AntiAim = {
                CSync = Tabs.AntiAim:AddLeftGroupbox("C-Sync"),
                Network = Tabs.AntiAim:AddLeftGroupbox("Network"),
                VelocitySpoofer = Tabs.AntiAim:AddRightGroupbox("Velocity Spoofer"),
                VelocityDesync = Tabs.AntiAim:AddRightGroupbox("Velocity Desync"),
                FFlag = Tabs.AntiAim:AddRightGroupbox("FFlag Desync"),
            },
            Misc = {
                Speed = Tabs.Misc:AddLeftGroupbox("CFrame Speed"),
                Exploits = Tabs.Misc:AddRightGroupbox("Exploits")
            }
        }

        --// Combat Tab
        do
            --// Main
            do
                Sections.Combat.Main:AddToggle("CombatMainEnabled", {
                    Text = "Enabled",
                    Default = false,
                    Tooltip = nil
                }):AddKeyPicker("CombatMainToggle", {
                    Default = "Q",
                    SyncToggleState = false,
                    Mode = "Toggle",
                    Text = "Targetting",
                    NoUI = false,
                })

                Toggles.CombatMainEnabled:OnChanged(function()
                    Settings.Combat.Enabled = Toggles.CombatMainEnabled.Value
                end)

                Options.CombatMainToggle:OnClick(function()
                    if Settings.Combat.Enabled then
                        Script.Locals.IsTargetting = not Script.Locals.IsTargetting

                        local NewTarget = Script.Functions.GetClosestPlayer()
                        Script.Locals.Target = Script.Locals.IsTargetting and NewTarget.Character and NewTarget or nil

                        if Settings.Combat.Alerts then
                            Library:Notify(string.format("Targetting: %s", Script.Locals.Target.Character.Humanoid.DisplayName))
                        end
                    end
                end)

                Sections.Combat.Main:AddToggle("CombatSilentEnabled", {
                    Text = "Silent",
                    Default = false,
                    Tooltip = nil
                })

                Toggles.CombatSilentEnabled:OnChanged(function()
                    Settings.Combat.Silent = Toggles.CombatSilentEnabled.Value
                end)

                Sections.Combat.Main:AddToggle("CombatMouseEnabled", {
                    Text = "Mouse",
                    Default = false,
                    Tooltip = nil
                })

                Toggles.CombatMouseEnabled:OnChanged(function()
                    Settings.Combat.Mouse = Toggles.CombatMouseEnabled.Value
                end)

                Sections.Combat.Main:AddToggle("CombatAlertsEnabled", {
                    Text = "Alerts",
                    Default = false,
                    Tooltip = nil
                })

                Toggles.CombatAlertsEnabled:OnChanged(function()
                    Settings.Combat.Alerts = Toggles.CombatAlertsEnabled.Value
                end)

                Sections.Combat.Main:AddToggle("CombatLookAtEnabled", {
                    Text = "Look At",
                    Default = false,
                    Tooltip = nil
                })

                Toggles.CombatLookAtEnabled:OnChanged(function()
                    Settings.Combat.LookAt = Toggles.CombatLookAtEnabled.Value
                end)

                Sections.Combat.Main:AddToggle("CombatSpectatEnabled", {
                    Text = "Spectate",
                    Default = false,
                    Tooltip = nil
                })

                Toggles.CombatSpectatEnabled:OnChanged(function()
                    Settings.Combat.Spectate = Toggles.CombatSpectatEnabled.Value
                end)

                Sections.Combat.Main:AddToggle("CombatAntiAimViewerEnabled", {
                    Text = "Anti AimViewer",
                    Default = false,
                    Tooltip = nil
                })

                Toggles.CombatAntiAimViewerEnabled:OnChanged(function()
                    Settings.Combat.AntiAimViewer = Toggles.CombatAntiAimViewerEnabled.Value
                end)

                Sections.Combat.Main:AddDropdown("CombatHitPartDropdown", {
                    Values = {"Head","HumanoidRootPart","LeftHand","RightHand","LeftLowerArm","RightLowerArm","LeftUpperArm","RightUpperArm","LeftFoot","LeftLowerLeg","UpperTorso","LeftUpperLeg","RightFoot","RightLowerLeg","LowerTorso","RightUpperLeg"},
                    Default = 2,
                    Multi = false,

                    Text = "Aim Part",
                    Tooltip = nil
                })

                Options.CombatHitPartDropdown:OnChanged(function()
                    Settings.Combat.AimPart = Options.CombatHitPartDropdown.Value
                end)

                Sections.Combat.Main:AddInput("CombatVerticalPrediction", {
                    Default = nil,
                    Numeric = false,
                    Finished = false,

                    Text = "Vertical Prediction",
                    Tooltip = nil,

                    Placeholder = "Vertical Prediction Amount"
                })

                Options.CombatVerticalPrediction:OnChanged(function()
                    Settings.Combat.Prediction.Vertical = tonumber(Options.CombatVerticalPrediction.Value)
                end)

                Sections.Combat.Main:AddInput("CombatHorizontalPrediction", {
                    Default = nil,
                    Numeric = false,
                    Finished = false,

                    Text = "Horizontal Prediction",
                    Tooltip = nil,

                    Placeholder = "Horizontal Prediction Amount"
                })


                Options.CombatHorizontalPrediction:OnChanged(function()
                    Settings.Combat.Prediction.Horizontal = tonumber(Options.CombatHorizontalPrediction.Value)
                end)
            end

            --// Checks
            do
                Sections.Combat.Checks:AddToggle("CombatChecksEnabled", {
                    Text = "Enabled",
                    Default = false,
                    Tooltip = nil
                })

                Toggles.CombatChecksEnabled:OnChanged(function()
                    Settings.Combat.Checks.Enabled = Toggles.CombatChecksEnabled.Value
                end)

                Sections.Combat.Checks:AddToggle("CombatChecksKnockedEnabled", {
                    Text = "Knocked",
                    Default = false,
                    Tooltip = nil
                })

                Toggles.CombatChecksKnockedEnabled:OnChanged(function()
                    Settings.Combat.Checks.Knocked = Toggles.CombatChecksKnockedEnabled.Value
                end)

                Sections.Combat.Checks:AddToggle("CombatChecksGrabbedEnabled", {
                    Text = "Grabbed",
                    Default = false,
                    Tooltip = nil
                })

                Toggles.CombatChecksGrabbedEnabled:OnChanged(function()
                    Settings.Combat.Checks.Grabbed = Toggles.CombatChecksGrabbedEnabled.Value
                end)

                Sections.Combat.Checks:AddToggle("CombatChecksCrewEnabled", {
                    Text = "Crew",
                    Default = false,
                    Tooltip = nil
                })

                Toggles.CombatChecksCrewEnabled:OnChanged(function()
                    Settings.Combat.Checks.Crew = Toggles.CombatChecksCrewEnabled.Value
                end)

                Sections.Combat.Checks:AddToggle("CombatChecksVehicleEnabled", {
                    Text = "Vehicle",
                    Default = false,
                    Tooltip = nil
                })

                Toggles.CombatChecksVehicleEnabled:OnChanged(function()
                    Settings.Combat.Checks.Vehicle = Toggles.CombatChecksVehicleEnabled.Value
                end)

                Sections.Combat.Checks:AddToggle("CombatChecksWallEnabled", {
                    Text = "Wall",
                    Default = false,
                    Tooltip = nil
                })

                Toggles.CombatChecksWallEnabled:OnChanged(function()
                    Settings.Combat.Checks.Wall = Toggles.CombatChecksWallEnabled.Value
                end)
            end

            --// Auto Select
            do
                Sections.Combat.AutoSelect:AddToggle("CombatAutoSelectEnabled", {
                    Text = "Enabled",
                    Default = false,
                    Tooltip = nil
                })

                Toggles.CombatAutoSelectEnabled:OnChanged(function()
                    Settings.Combat.AutoSelect.Enabled = Toggles.CombatAutoSelectEnabled.Value
                end)

                Sections.Combat.AutoSelect:AddToggle("CombatAutoSelectCooldownEnabled", {
                    Text = "Cooldown",
                    Default = false,
                    Tooltip = nil
                })

                Toggles.CombatAutoSelectCooldownEnabled:OnChanged(function()
                    Settings.Combat.AutoSelect.Cooldown.Enabled = Toggles.CombatAutoSelectCooldownEnabled.Value
                end)

                Sections.Combat.AutoSelect:AddSlider("CombatAutoSelectCooldownAmount", {
                    Text = "Cooldown Amount (MS)",
                    Default = 0.1,
                    Min = 0,
                    Max = 1,
                    Rounding = 3,
                    Compact = false
                })

                Options.CombatAutoSelectCooldownAmount:OnChanged(function()
                    Settings.Combat.AutoSelect.Cooldown.Amount = Options.CombatAutoSelectCooldownAmount.Value
                end)
            end

            --// Smoothing
            do
                Sections.Combat.Smoothing:AddSlider("CombatSmoothingVertical", {
                    Text = "Vertical Smoothing",
                    Default = 10,
                    Min = 1,
                    Max = 50,
                    Rounding = 2,
                    Compact = false
                })

                Options.CombatSmoothingVertical:OnChanged(function()
                    Settings.Combat.Smoothing.Vertical = Options.CombatSmoothingVertical.Value
                end)

                Sections.Combat.Smoothing:AddSlider("CombatSmoothingHorizontal", {
                    Text = "Horizontal Smoothing",
                    Default = 10,
                    Min = 1,
                    Max = 50,
                    Rounding = 2,
                    Compact = false
                })

                Options.CombatSmoothingHorizontal:OnChanged(function()
                    Settings.Combat.Smoothing.Horizontal = Options.CombatSmoothingHorizontal.Value
                end)
            end

            --// Resolver
            do
                Sections.Combat.Resolver:AddToggle("CombatResolverEnabled", {
                    Text = "Enabled",
                    Default = false,
                    Tooltip = nil
                })

                Toggles.CombatResolverEnabled:OnChanged(function()
                    Settings.Combat.Resolver.Enabled = Toggles.CombatResolverEnabled.Value
                end)

                Sections.Combat.Resolver:AddSlider("CombatResolverRefreshRate", {
                    Text = "Refresh Rate",
                    Default = 200,
                    Min = 1,
                    Max = 200,
                    Rounding = 1,
                    Compact = false
                })

                Options.CombatResolverRefreshRate:OnChanged(function()
                    Settings.Combat.Resolver.RefreshRate = Options.CombatResolverRefreshRate.Value
                end)
            end

            --// Field Of View
            do
                Sections.Combat.FieldOfView:AddToggle("CombatFovEnabled", {
                    Text = "Enabled",
                    Default = false,
                    Tooltip = nil
                })

                Toggles.CombatFovEnabled:OnChanged(function()
                    Settings.Combat.Fov.Enabled = Toggles.CombatFovEnabled.Value
                end)

                Sections.Combat.FieldOfView:AddToggle("CombatFovVisualizeEnabled", {
                    Text = "Visualize",
                    Default = false,
                    Tooltip = nil
                }):AddColorPicker("CombatFovVisualizeColor", {
                    Default = Color3.new(1, 1, 1),
                    Title = "Fov Visualize Color",
                    Transparency = nil
                })

                Toggles.CombatFovVisualizeEnabled:OnChanged(function()
                    Settings.Combat.Fov.Visualize.Enabled = Toggles.CombatFovVisualizeEnabled.Value
                end)

                Options.CombatFovVisualizeColor:OnChanged(function()
                    Settings.Combat.Fov.Visualize.Color = Options.CombatFovVisualizeColor.Value
                end)

                Sections.Combat.FieldOfView:AddSlider("CombatFieldOfViewRadius", {
                    Text = "Radius",
                    Default = 80,
                    Min = 1,
                    Max = 800,
                    Rounding = 2,
                    Compact = false
                })

                Options.CombatFieldOfViewRadius:OnChanged(function()
                    Settings.Combat.Fov.Radius = Options.CombatFieldOfViewRadius.Value
                end)
            end

            --// Visuals
            do
                Sections.Combat.Visuals:AddToggle("CombatVisualsEnabled", {
                    Text = "Enabled",
                    Default = false,
                    Tooltip = nil
                })

                Toggles.CombatVisualsEnabled:OnChanged(function()
                    Settings.Combat.Visuals.Enabled = Toggles.CombatVisualsEnabled.Value
                end)

                Sections.Combat.Visuals:AddToggle("CombatVisualsTracerEnabled", {
                    Text = "Tracer",
                    Default = false,
                    Tooltip = nil
                }):AddColorPicker("CombatVisualsTracerColor", {
                    Default = Color3.new(1, 1, 1),
                    Title = "Tracer Color",
                    Transparency = nil
                })

                Toggles.CombatVisualsTracerEnabled:OnChanged(function()
                    Settings.Combat.Visuals.Tracer.Enabled = Toggles.CombatVisualsTracerEnabled.Value
                end)

                Options.CombatVisualsTracerColor:OnChanged(function()
                    Settings.Combat.Visuals.Tracer.Color = Options.CombatVisualsTracerColor.Value
                end)

                Sections.Combat.Visuals:AddSlider("CombatVisualsTracerThickness", {
                    Text = "Thickness",
                    Default = 2,
                    Min = 1,
                    Max = 10,
                    Rounding = 2,
                    Compact = false
                })

                Options.CombatVisualsTracerThickness:OnChanged(function()
                    Settings.Combat.Visuals.Tracer.Thickness = Options.CombatVisualsTracerThickness.Value
                end)

                Sections.Combat.Visuals:AddToggle("CombatVisualsDotEnabled", {
                    Text = "Dot",
                    Default = false,
                    Tooltip = nil
                }):AddColorPicker("CombatVisualsDotColor", {
                    Default = Color3.new(1, 1, 1),
                    Title = "Dot Color",
                    Transparency = nil
                })

                Toggles.CombatVisualsDotEnabled:OnChanged(function()
                    Settings.Combat.Visuals.Dot.Enabled = Toggles.CombatVisualsDotEnabled.Value
                end)

                Options.CombatVisualsDotColor:OnChanged(function()
                    Settings.Combat.Visuals.Dot.Color = Options.CombatVisualsDotColor.Value
                end)

                Sections.Combat.Visuals:AddToggle("CombatVisualsDotFilled", {
                    Text = "Dot Filled",
                    Default = false,
                    Tooltip = nil
                })

                Toggles.CombatVisualsDotFilled:OnChanged(function()
                    Settings.Combat.Visuals.Dot.Filled = Toggles.CombatVisualsDotFilled.Value
                end)

                Sections.Combat.Visuals:AddSlider("CombatVisualsDotSize", {
                    Text = "Size",
                    Default = 6,
                    Min = 1,
                    Max = 20,
                    Rounding = 2,
                    Compact = false
                })

                Options.CombatVisualsDotSize:OnChanged(function()
                    Settings.Combat.Visuals.Dot.Size = Options.CombatVisualsDotSize.Value
                end)

                local TargetChamsToggle = Sections.Combat.Visuals:AddToggle("CombatVisualsChamsEnabled", {
                    Text = "Chams",
                    Default = false,
                    Tooltip = nil
                })

                TargetChamsToggle:AddColorPicker("CombatVisualsChamsFillColor", {
                    Default = Color3.new(1, 1, 1),
                    Title = "Fill Color",
                    Transparency = 0.5
                })

                TargetChamsToggle:AddColorPicker("CombatVisualsChamsOutlineColor", {
                    Default = Color3.new(1, 1, 1),
                    Title = "Outline Color",
                    Transparency = 0.5
                })

                Toggles.CombatVisualsChamsEnabled:OnChanged(function()
                    Settings.Combat.Visuals.Chams.Enabled = Toggles.CombatVisualsChamsEnabled.Value
                end)

                Options.CombatVisualsChamsFillColor:OnChanged(function()
                    Settings.Combat.Visuals.Chams.Fill.Color = Options.CombatVisualsChamsFillColor.Value
                    Settings.Combat.Visuals.Chams.Fill.Transparency = Options.CombatVisualsChamsFillColor.Transparency
                end)

                Options.CombatVisualsChamsOutlineColor:OnChanged(function()
                    Settings.Combat.Visuals.Chams.Outline.Color = Options.CombatVisualsChamsOutlineColor.Value
                    Settings.Combat.Visuals.Chams.Outline.Transparency = Options.CombatVisualsChamsOutlineColor.Transparency
                end)
            end

            --// Air
            do
                Sections.Combat.Air:AddToggle("CombatAirEnabled", {
                    Text = "Enabled",
                    Default = false,
                    Tooltip = nil
                })

                Toggles.CombatAirEnabled:OnChanged(function()
                    Settings.Combat.Air.Enabled = Toggles.CombatAirEnabled.Value
                end)

                Sections.Combat.Air:AddToggle("CombatJumpOffsetEnabled", {
                    Text = "Jump Offset",
                    Default = false,
                    Tooltip = nil
                })

                Toggles.CombatJumpOffsetEnabled:OnChanged(function()
                    Settings.Combat.Air.JumpOffset.Enabled = Toggles.CombatJumpOffsetEnabled.Value
                end)

                Sections.Combat.Air:AddSlider("CombatJumpOffSet", {
                    Text = "Offset",
                    Default = 0.09,
                    Min = -10,
                    Max = 10,
                    Rounding = 3,
                    Compact = false
                })

                Options.CombatJumpOffSet:OnChanged(function()
                    Settings.Combat.Air.JumpOffset.Offset = Options.CombatJumpOffSet.Value
                end)
            end
        end

        --// Visuals tab
        do
 
            --// Bullet Tracers
            do

                local BulletTracersToggle = Sections.Visuals.BulletTracers:AddToggle("VisualsBulletTracersEnabled", {
                    Text = "Enabled",
                    Default = false,
                    Tooltip = nil
                })

                BulletTracersToggle:AddColorPicker("VisualsBulletTracersColor1", {
                    Default = Color3.new(1, 1, 1),
                    Title = "Bullet Tracers Color Gradient 1",
                    Transparency = nil
                })

                BulletTracersToggle:AddColorPicker("VisualsBulletTracersColor2", {
                    Default = Color3.new(0, 0, 0),
                    Title = "Bullet Tracers Color Gradient 2",
                    Transparency = nil
                })

                Sections.Visuals.BulletTracers:AddToggle("VisualsBulletTracersFadeEnabled", {
                    Text = "Fade",
                    Default = false,
                    Tooltip = nil
                })

                Toggles.VisualsBulletTracersEnabled:OnChanged(function()
                    Settings.Visuals.BulletTracers.Enabled = Toggles.VisualsBulletTracersEnabled.Value
                end)

                Toggles.VisualsBulletTracersFadeEnabled:OnChanged(function()
                    Settings.Visuals.BulletTracers.Fade.Enabled = Toggles.VisualsBulletTracersFadeEnabled.Value
                end)

                Options.VisualsBulletTracersColor1:OnChanged(function()
                    Settings.Visuals.BulletTracers.Color.Gradient1 = Options.VisualsBulletTracersColor1.Value
                end)

                Options.VisualsBulletTracersColor2:OnChanged(function()
                    Settings.Visuals.BulletTracers.Color.Gradient2 = Options.VisualsBulletTracersColor2.Value
                end)

                Sections.Visuals.BulletTracers:AddSlider("VisualsBulletTracersDuration", {
                    Text = "Duration",
                    Default = 1,
                    Min = 0.1,
                    Max = 10,
                    Rounding = 1,
                    Compact = false
                })

                Sections.Visuals.BulletTracers:AddSlider("VisualsBulletTracersFadeDuration", {
                    Text = "Fade Duration",
                    Default = 0.5,
                    Min = 0.1,
                    Max = 10,
                    Rounding = 1,
                    Compact = false
                })


                Options.VisualsBulletTracersDuration:OnChanged(function()
                    Settings.Visuals.BulletTracers.Duration = Options.VisualsBulletTracersDuration.Value
                end)

                Options.VisualsBulletTracersFadeDuration:OnChanged(function()
                    Settings.Visuals.BulletTracers.Fade.Duration = Options.VisualsBulletTracersFadeDuration.Value
                end)
            end

            --// Bullet Impacts
            do
                Sections.Visuals.BulletImpacts:AddToggle("VisualsBulletImpactsEnabled", {
                    Text = "Enabled",
                    Default = false,
                    Tooltip = nil
                }):AddColorPicker("VisualsBulletImpactsColor", {
                    Default = Color3.new(1, 1, 1),
                    Title = "Bullet Impact Color",
                    Transparency = nil
                })

                Sections.Visuals.BulletImpacts:AddToggle("VisualsBulletImpactsFadeEnabled", {
                    Text = "Fade",
                    Default = false,
                    Tooltip = nil
                })

                Sections.Visuals.BulletImpacts:AddDropdown("VisualsBulletImpactsMaterial", {
                    Values = {"SmoothPlastic", "ForceField", "Neon"},
                    Default = 1,
                    Multi = false,

                    Text = "Material",
                    Tooltip = nil
                })

                Options.VisualsBulletImpactsMaterial:OnChanged(function()
                    Settings.Visuals.BulletImpacts.Material = Options.VisualsBulletImpactsMaterial.Value
                end)

                Sections.Visuals.BulletImpacts:AddSlider("VisualsBulletImpactsSize", {
                    Text = "Size",
                    Default = 1,
                    Min = 0.1,
                    Max = 10,
                    Rounding = 2,
                    Compact = false
                })

                Sections.Visuals.BulletImpacts:AddSlider("VisualsBulletImpactsDuration", {
                    Text = "Duration",
                    Default = 1,
                    Min = 0.1,
                    Max = 10,
                    Rounding = 1,
                    Compact = false
                })

                Sections.Visuals.BulletImpacts:AddSlider("VisualsBulletImpactsFadeDuration", {
                    Text = "Fade Duration",
                    Default = 0.5,
                    Min = 0.1,
                    Max = 10,
                    Rounding = 1,
                    Compact = false
                })


                Options.VisualsBulletImpactsDuration:OnChanged(function()
                    Settings.Visuals.BulletImpacts.Duration = Options.VisualsBulletImpactsDuration.Value
                end)

                Options.VisualsBulletImpactsSize:OnChanged(function()
                    Settings.Visuals.BulletImpacts.Size = Options.VisualsBulletImpactsSize.Value
                end)

                Options.VisualsBulletImpactsFadeDuration:OnChanged(function()
                    Settings.Visuals.BulletImpacts.Fade.Duration = Options.VisualsBulletImpactsFadeDuration.Value
                end)

                Toggles.VisualsBulletImpactsEnabled:OnChanged(function()
                    Settings.Visuals.BulletImpacts.Enabled = Toggles.VisualsBulletImpactsEnabled.Value
                end)

                Toggles.VisualsBulletImpactsFadeEnabled:OnChanged(function()
                    Settings.Visuals.BulletImpacts.Fade.Enabled = Toggles.VisualsBulletImpactsFadeEnabled.Value
                end)

                Options.VisualsBulletImpactsColor:OnChanged(function()
                    Settings.Visuals.BulletImpacts.Color = Options.VisualsBulletImpactsColor.Value
                end)
            end

            --// On Hit
            do
                Sections.Visuals.OnHit:AddToggle("VisualsOnHitEnabled", {
                    Text = "Enabled",
                    Default = false,
                    Tooltip = nil
                })

                Sections.Visuals.OnHit:AddToggle("VisualsOnHitEffectEnabled", {
                    Text = "Effect",
                    Default = false,
                    Tooltip = nil
                }):AddColorPicker("VisualsOnHitEffectColor", {
                    Default = Color3.new(1, 1, 1),
                    Title = "Bullet Impact Color",
                    Transparency = nil
                })

                Sections.Visuals.OnHit:AddToggle("VisualsOnHiSoundEnabled", {
                    Text = "Sound",
                    Default = false,
                    Tooltip = nil
                })

                Sections.Visuals.OnHit:AddSlider("VisualsOnHitSoundVolume", {
                    Text = "Sound Volume",
                    Default = 5,
                    Min = 0.1,
                    Max = 10,
                    Rounding = 2,
                    Compact = false
                })

                local Sounds = {}

                for Sound, _ in pairs(Hitsounds) do
                    table.insert(Sounds, Sound)
                end

                Sections.Visuals.OnHit:AddDropdown("VisualsOnHitSound", {
                    Values = Sounds,
                    Default = 1,
                    Multi = false,
                    Text = "Sound To Play",
                    Tooltip = nil
                })


                Sections.Visuals.OnHit:AddToggle("VisualsOnHitChamsEnabled", {
                    Text = "Chams",
                    Default = false,
                    Tooltip = nil
                }):AddColorPicker("VisualsOnHitChamsColor", {
                    Default = Color3.new(1, 1, 1),
                    Title = "Hit Chams Color",
                    Transparency = nil
                })

                Sections.Visuals.OnHit:AddSlider("VisualsOnHitChamsDuration", {
                    Text = "Duration",
                    Default = 1,
                    Min = 0.1,
                    Max = 10,
                    Rounding = 2,
                    Compact = false
                })

                Sections.Visuals.OnHit:AddDropdown("VisualsOnHitChamsMaterial", {
                    Values = {"ForceField", "Neon"},
                    Default = 1,
                    Multi = false,
                    Text = "Material",
                    Tooltip = nil
                })

                Options.VisualsOnHitChamsDuration:OnChanged(function()
                    Settings.Visuals.OnHit.Chams.Duration = Options.VisualsOnHitChamsDuration.Value
                end)

                Options.VisualsOnHitChamsMaterial:OnChanged(function()
                    Settings.Visuals.OnHit.Chams.Material = Options.VisualsOnHitChamsMaterial.Value
                end)

                Options.VisualsBulletImpactsMaterial:OnChanged(function()
                    Settings.Visuals.BulletImpacts.Material = Options.VisualsBulletImpactsMaterial.Value
                end)

                Toggles.VisualsOnHitEnabled:OnChanged(function()
                    Settings.Visuals.OnHit.Enabled = Toggles.VisualsOnHitEnabled.Value
                end)

                Toggles.VisualsOnHitChamsEnabled:OnChanged(function()
                    Settings.Visuals.OnHit.Chams.Enabled = Toggles.VisualsOnHitChamsEnabled.Value
                end)

                Options.VisualsOnHitChamsColor:OnChanged(function()
                    Settings.Visuals.OnHit.Chams.Color = Options.VisualsOnHitChamsColor.Value
                end)

                Toggles.VisualsOnHitEffectEnabled:OnChanged(function()
                    Settings.Visuals.OnHit.Effect.Enabled = Toggles.VisualsOnHitEffectEnabled.Value
                end)

                Options.VisualsOnHitEffectColor:OnChanged(function()
                    Settings.Visuals.OnHit.Effect.Color = Options.VisualsOnHitEffectColor.Value
                end)

                Toggles.VisualsOnHiSoundEnabled:OnChanged(function()
                    Settings.Visuals.OnHit.Sound.Enabled = Toggles.VisualsOnHiSoundEnabled.Value
                end)

                Options.VisualsOnHitSoundVolume:OnChanged(function()
                    Settings.Visuals.OnHit.Sound.Volume = Options.VisualsOnHitSoundVolume.Value
                end)

                Options.VisualsOnHitSound:OnChanged(function()
                    Settings.Visuals.OnHit.Sound.Value = Options.VisualsOnHitSound.Value
                end)
            end

            --// Atmosphere
            do
                Sections.Visuals.Atmosphere:AddToggle("VisualsAtmosphereEnabled", {
                    Text = "Enabled",
                    Default = false,
                    Tooltip = nil,
                })


                Toggles.VisualsAtmosphereEnabled:OnChanged(function()
                    Settings.Visuals.World.Enabled = Toggles.VisualsAtmosphereEnabled.Value
                end)

                Sections.Visuals.Atmosphere:AddToggle("VisualsAtmosphereFogEnabled", {
                    Text = "Fog",
                    Default = false,
                    Tooltip = nil,
                }):AddColorPicker("VisualsAtmosphereFogColor", {
                    Default = Color3.new(1, 1, 1),
                    Title = "Fog Color",
                    Transparency = nil,
                })

                Toggles.VisualsAtmosphereFogEnabled:OnChanged(function()
                    Settings.Visuals.World.Fog.Enabled = Toggles.VisualsAtmosphereFogEnabled.Value
                end)

                Options.VisualsAtmosphereFogColor:OnChanged(function()
                    Settings.Visuals.World.Fog.Color = Options.VisualsAtmosphereFogColor.Value
                end)

                Sections.Visuals.Atmosphere:AddSlider("VisualsAtmosphereFogStart", {
                    Text = "Fog Start",
                    Default = 1000,
                    Min = 1,
                    Max = 10000,
                    Rounding = 0,
                    Compact = false,
                })

                Sections.Visuals.Atmosphere:AddSlider("VisualsAtmosphereFogEnd", {
                    Text = "Fog End",
                    Default = 1000,
                    Min = 1,
                    Max = 10000,
                    Rounding = 0,
                    Compact = false,
                })

                Options.VisualsAtmosphereFogStart:OnChanged(function()
                    Settings.Visuals.World.Fog.Start = Options.VisualsAtmosphereFogStart.Value
                end)

                Options.VisualsAtmosphereFogEnd:OnChanged(function()
                    Settings.Visuals.World.Fog.End = Options.VisualsAtmosphereFogEnd.Value
                end)

                Sections.Visuals.Atmosphere:AddToggle("VisualsAtmosphereAmbientEnabled", {
                    Text = "Ambient",
                    Default = false,
                    Tooltip = nil,
                }):AddColorPicker("VisualsAtmosphereAmbientColor", {
                    Default = Color3.new(1, 1, 1),
                    Title = "Ambient Color",
                    Transparency = nil,
                })

                Toggles.VisualsAtmosphereAmbientEnabled:OnChanged(function()
                    Settings.Visuals.World.Ambient.Enabled = Toggles.VisualsAtmosphereAmbientEnabled.Value
                end)

                Options.VisualsAtmosphereAmbientColor:OnChanged(function()
                    Settings.Visuals.World.Ambient.Color = Options.VisualsAtmosphereAmbientColor.Value
                end)

                Sections.Visuals.Atmosphere:AddToggle("VisualsAtmosphereBrightnessChangerEnabled", {
                    Text = "Brightness Changer",
                    Default = false,
                    Tooltip = nil,
                })

                Sections.Visuals.Atmosphere:AddSlider("VisualsAtmosphereBrightnessChangerValue", {
                    Text = "Brightness Value",
                    Default = 0,
                    Min = 0,
                    Max = 10,
                    Rounding = 2,
                    Compact = false,
                })

                Toggles.VisualsAtmosphereBrightnessChangerEnabled:OnChanged(function()
                    Settings.Visuals.World.Brightness.Enabled = Toggles.VisualsAtmosphereBrightnessChangerEnabled.Value
                end)

                Options.VisualsAtmosphereBrightnessChangerValue:OnChanged(function()
                    Settings.Visuals.World.Brightness.Value = Options.VisualsAtmosphereBrightnessChangerValue.Value
                end)

                Sections.Visuals.Atmosphere:AddToggle("VisualsAtmosphereTimeChangerEnabled", {
                    Text = "Clock Time",
                    Default = false,
                    Tooltip = nil,
                })

                Sections.Visuals.Atmosphere:AddSlider("VisualsAtmosphereTimeChangerValue", {
                    Text = "Time",
                    Default = 1,
                    Min = 0.1,
                    Max = 24,
                    Rounding = 1,
                    Compact = false,
                })

                Toggles.VisualsAtmosphereTimeChangerEnabled:OnChanged(function()
                    Settings.Visuals.World.ClockTime.Enabled = Toggles.VisualsAtmosphereTimeChangerEnabled.Value
                end)

                Options.VisualsAtmosphereTimeChangerValue:OnChanged(function()
                    Settings.Visuals.World.ClockTime.Value = Options.VisualsAtmosphereTimeChangerValue.Value
                end)

                Sections.Visuals.Atmosphere:AddToggle("VisualsAtmosphereExposureChangerEnabled", {
                    Text = "Exposure Changer",
                    Default = false,
                    Tooltip = nil,
                })

                Sections.Visuals.Atmosphere:AddSlider("VisualsAtmosphereExposureChangerValue", {
                    Text = "Exposure",
                    Default = 1,
                    Min = -3,
                    Max = 3,
                    Rounding = 1,
                    Compact = false,
                })

                Toggles.VisualsAtmosphereExposureChangerEnabled:OnChanged(function()
                    Settings.Visuals.World.WorldExposure.Enabled = Toggles.VisualsAtmosphereExposureChangerEnabled.Value
                end)

                Options.VisualsAtmosphereExposureChangerValue:OnChanged(function()
                    Settings.Visuals.World.WorldExposure.Value = Options.VisualsAtmosphereExposureChangerValue.Value
                end)
            end

            --// Crosshair
            do
                Sections.Visuals.Crosshair:AddToggle("VisualsCrosshairEnabled", {
                    Text = "Enabled",
                    Default = false,
                    Tooltip = nil,
                }):AddColorPicker("VisualsCrossahairColor", {
                    Default = Color3.new(1, 1, 1),
                    Title = "Crosshair Color",
                    Transparency = nil,
                })

                Toggles.VisualsCrosshairEnabled:OnChanged(function()
                    Settings.Visuals.Crosshair.Enabled = Toggles.VisualsCrosshairEnabled.Value
                end)

                Options.VisualsCrossahairColor:OnChanged(function()
                    Settings.Visuals.Crosshair.Color = Options.VisualsCrossahairColor.Value
                end)

                Sections.Visuals.Crosshair:AddSlider("VisualsCrosshairSize", {
                    Text = "Size",
                    Default = 1,
                    Min = 0.1,
                    Max = 30,
                    Rounding = 3,
                    Compact = false,
                })

                Options.VisualsCrosshairSize:OnChanged(function()
                    Settings.Visuals.Crosshair.Size = Options.VisualsCrosshairSize.Value
                end)

                Sections.Visuals.Crosshair:AddSlider("VisualsCrosshairGap", {
                    Text = "Gap",
                    Default = 2,
                    Min = 0.1,
                    Max = 10,
                    Rounding = 3,
                    Compact = false,
                })

                Options.VisualsCrosshairGap:OnChanged(function()
                    Settings.Visuals.Crosshair.Gap = Options.VisualsCrosshairGap.Value
                end)

                Sections.Visuals.Crosshair:AddToggle("VisualsCrosshairRotateEnabled", {
                    Text = "Rotate",
                    Default = false,
                    Tooltip = nil,
                })

                Sections.Visuals.Crosshair:AddSlider("VisualsCrosshairRotateAmount", {
                    Text = "Rotation Speed",
                    Default = 1,
                    Min = 0.1,
                    Max = 10,
                    Rounding = 3,
                    Compact = false,
                })

                Toggles.VisualsCrosshairRotateEnabled:OnChanged(function()
                    Settings.Visuals.Crosshair.Rotation.Enabled = Toggles.VisualsCrosshairRotateEnabled.Value
                end)

                Options.VisualsCrosshairRotateAmount:OnChanged(function()
                    Settings.Visuals.Crosshair.Rotation.Speed = Options.VisualsCrosshairRotateAmount.Value
                end)
            end
        end

        --// Anti Aim
        do

            --// Velocity Spoofer
            do
                Sections.AntiAim.VelocitySpoofer:AddToggle("AntiAimVelocitySpooferEnabled", {
                    Text = "Enabled",
                    Default = false,
                    Tooltip = nil,
                })

                Toggles.AntiAimVelocitySpooferEnabled:OnChanged(function()
                    Settings.AntiAim.VelocitySpoofer.Enabled = Toggles.AntiAimVelocitySpooferEnabled.Value
                end)

                Sections.AntiAim.VelocitySpoofer:AddDropdown("AntiAimVelocitySpooferType", {
                    Values = {"Underground", "Sky", "Multiplier", "Prediction Breaker", "Custom"},
                    Default = 1,
                    Multi = false,

                    Text = "Type",
                    Tooltip = nil
                })

                Options.AntiAimVelocitySpooferType:OnChanged(function()
                    Settings.AntiAim.VelocitySpoofer.Type = Options.AntiAimVelocitySpooferType.Value
                end)

                Sections.AntiAim.VelocitySpoofer:AddToggle("AntiAimVelocitySpooferVisualizeEnabled", {
                    Text = "Visualize",
                    Default = false,
                    Tooltip = nil,
                }):AddColorPicker("AntiAimVelocitySpooferVisualizeColor", {
                    Default = Color3.new(1, 1, 1),
                    Title = "Velocity Visualize Color",
                    Transparency = nil,
                })

                Sections.AntiAim.VelocitySpoofer:AddInput("AntiAimVelocitySpooferVisualizePrediction", {
                    Default = nil,
                    Numeric = false,
                    Finished = false,

                    Text = "Visualize Prediction",
                    Tooltip = nil,

                    Placeholder = "Visualize Prediction Amount"
                })

                Options.AntiAimVelocitySpooferVisualizePrediction:OnChanged(function()
                    Settings.AntiAim.VelocitySpoofer.Visualize.Prediction = tonumber(Options.AntiAimVelocitySpooferVisualizePrediction.Value)
                end)

                Toggles.AntiAimVelocitySpooferVisualizeEnabled:OnChanged(function()
                    Settings.AntiAim.VelocitySpoofer.Visualize.Enabled = Toggles.AntiAimVelocitySpooferVisualizeEnabled.Value
                end)

                Options.AntiAimVelocitySpooferVisualizeColor:OnChanged(function()
                    Settings.AntiAim.VelocitySpoofer.Visualize.Color = Options.AntiAimVelocitySpooferVisualizeColor.Value
                end)

                Sections.AntiAim.VelocitySpoofer:AddSlider("AntiAimVelocitySpooferYaw", {
                    Text = "Yaw",
                    Default = 0,
                    Min = 0,
                    Max = 100,
                    Rounding = 3,
                    Compact = false
                })

                Options.AntiAimVelocitySpooferYaw:OnChanged(function()
                    Settings.AntiAim.VelocitySpoofer.Yaw = Options.AntiAimVelocitySpooferYaw.Value
                end)

                Sections.AntiAim.VelocitySpoofer:AddSlider("AntiAimVelocitySpooferPitch", {
                    Text = "Pitch",
                    Default = 0,
                    Min = 0,
                    Max = 100,
                    Rounding = 3,
                    Compact = false
                })

                Options.AntiAimVelocitySpooferPitch:OnChanged(function()
                    Settings.AntiAim.VelocitySpoofer.Pitch = Options.AntiAimVelocitySpooferPitch.Value
                end)

                Sections.AntiAim.VelocitySpoofer:AddSlider("AntiAimVelocitySpooferRoll", {
                    Text = "Roll",
                    Default = 0,
                    Min = 0,
                    Max = 100,
                    Rounding = 3,
                    Compact = false
                })

                Options.AntiAimVelocitySpooferRoll:OnChanged(function()
                    Settings.AntiAim.VelocitySpoofer.Roll = Options.AntiAimVelocitySpooferRoll.Value
                end)
            end

            --// C-Sync
            do
                Sections.AntiAim.CSync:AddToggle("CSyncAntiAimEnabled", {
                    Text = "Enabled",
                    Default = false,
                    Tooltip = nil,
                }):AddKeyPicker("CSyncAntiAimKeyPicker", {
                    Default = "b",
                    SyncToggleState = true,
                    Mode = "Toggle",

                    Text = "C-Sync",
                    NoUI = false,
                })

                Toggles.CSyncAntiAimEnabled:OnChanged(function()
                    Settings.AntiAim.CSync.Enabled = Toggles.CSyncAntiAimEnabled.Value
                end)

                Sections.AntiAim.CSync:AddToggle("CSyncAntiAimVisualizeEnabled", {
                    Text = "Visualize",
                    Default = false,
                    Tooltip = nil,
                }):AddColorPicker("CSyncAntiAimVisualizeColor", {
                    Default = Color3.new(1, 1, 1),
                    Title = "CFrame Visualize Color",
                    Transparency = nil,
                })

                Sections.AntiAim.CSync:AddDropdown("CSyncAntiAimType", {
                    Values = {"Custom", "Random", "Random Target", "Target Strafe", "Local Strafe"},
                    Default = 1,
                    Multi = false,
                    Text = "Type",
                    Tooltip = nil,
                })

                Toggles.CSyncAntiAimVisualizeEnabled:OnChanged(function()
                    Settings.AntiAim.CSync.Visualize.Enabled = Toggles.CSyncAntiAimVisualizeEnabled.Value
                end)

                Options.CSyncAntiAimVisualizeColor:OnChanged(function()
                    Settings.AntiAim.CSync.Visualize.Color = Options.CSyncAntiAimVisualizeColor.Value
                end)

                Options.CSyncAntiAimType:OnChanged(function()
                    Settings.AntiAim.CSync.Type = Options.CSyncAntiAimType.Value
                end)

                Sections.AntiAim.CSync:AddSlider("CSyncAntiAimRandomRange", {
                    Text = "Random Range",
                    Default = 0.1,
                    Min = 0,
                    Max = 20,
                    Rounding = 1,
                    Compact = false,
                })

                Options.CSyncAntiAimRandomRange:OnChanged(function()
                    Settings.AntiAim.CSync.RandomDistance = Options.CSyncAntiAimRandomRange.Value
                end)

                Sections.AntiAim.CSync:AddSlider("CSyncAntiAimCustomX", {
                    Text = "Custom X",
                    Default = 0.1,
                    Min = 0,
                    Max = 500,
                    Rounding = 1,
                    Compact = false,
                })

                Options.CSyncAntiAimCustomX:OnChanged(function()
                    Settings.AntiAim.CSync.Custom.X = Options.CSyncAntiAimCustomX.Value
                end)

                Sections.AntiAim.CSync:AddSlider("CSyncAntiAimCustomY", {
                    Text = "Custom Y",
                    Default = 0.1,
                    Min = 0,
                    Max = 500,
                    Rounding = 1,
                    Compact = false,
                })

                Options.CSyncAntiAimCustomY:OnChanged(function()
                    Settings.AntiAim.CSync.Custom.Y = Options.CSyncAntiAimCustomY.Value
                end)

                Sections.AntiAim.CSync:AddSlider("CSyncAntiAimCustomZ", {
                    Text = "Custom Z",
                    Default = 0.1,
                    Min = 0,
                    Max = 500,
                    Rounding = 1,
                    Compact = false,
                })

                Options.CSyncAntiAimCustomZ:OnChanged(function()
                    Settings.AntiAim.CSync.Custom.Z = Options.CSyncAntiAimCustomZ.Value
                end)

                Sections.AntiAim.CSync:AddSlider("CSyncAntiAimTargetStrafeSpeed", {
                    Text = "Target Strafe Speed",
                    Default = 1,
                    Min = 0,
                    Max = 20,
                    Rounding = 1,
                    Compact = false,
                })

                Options.CSyncAntiAimTargetStrafeSpeed:OnChanged(function()
                    Settings.AntiAim.CSync.TargetStrafe.Speed = Options.CSyncAntiAimTargetStrafeSpeed.Value
                end)

                Sections.AntiAim.CSync:AddSlider("CSyncAntiAimTargetStrafeDistance", {
                    Text = "Target Strafe Distance",
                    Default = 1,
                    Min = 0,
                    Max = 20,
                    Rounding = 1,
                    Compact = false,
                })

                Options.CSyncAntiAimTargetStrafeDistance:OnChanged(function()
                    Settings.AntiAim.CSync.TargetStrafe.Distance = Options.CSyncAntiAimTargetStrafeDistance.Value
                end)

                Sections.AntiAim.CSync:AddSlider("CSyncAntiAimTargetStrafeHeight", {
                    Text = "Target Strafe Height",
                    Default = 1,
                    Min = 0,
                    Max = 20,
                    Rounding = 1,
                    Compact = false,
                })

                Options.CSyncAntiAimTargetStrafeHeight:OnChanged(function()
                    Settings.AntiAim.CSync.TargetStrafe.Height = Options.CSyncAntiAimTargetStrafeHeight.Value
                end)
            end

            --// Fake Lag
            do
                Sections.AntiAim.Network:AddToggle("AntiAimNetworkEnabled", {
                    Text = "Enabled",
                    Default = false,
                    Tooltip = nil,
                }):AddKeyPicker("AntiAimNetworkKeyPicker", {
                    Default = "b",
                    SyncToggleState = true,
                    Mode = "Toggle",

                    Text = "Network",
                    NoUI = false,
                })

                Toggles.AntiAimNetworkEnabled:OnChanged(function()
                    Settings.AntiAim.Network.Enabled = Toggles.AntiAimNetworkEnabled.Value
                end)

                Sections.AntiAim.Network:AddToggle("AntiAimNetworkWalkingCheck", {
                    Text = "Walking Check",
                    Default = false,
                    Tooltip = nil,
                })

                Toggles.AntiAimNetworkWalkingCheck:OnChanged(function()
                    Settings.AntiAim.Network.WalkingCheck = Toggles.AntiAimNetworkWalkingCheck.Value
                end)

                Sections.AntiAim.Network:AddSlider("AntiAimNetworkAmount", {
                    Text = "Amount",
                    Default = 0.1,
                    Min = 0,
                    Max = 30,
                    Rounding = 3,
                    Compact = false,
                })

                Options.AntiAimNetworkAmount:OnChanged(function()
                    Settings.AntiAim.Network.Amount = Options.AntiAimNetworkAmount.Value
                end)
            end

            --// Velocity Desync
            do
                Sections.AntiAim.VelocityDesync:AddToggle("AntiAimVelocityDesyncEnabled", {
                    Text = "Enabled",
                    Default = false,
                    Tooltip = nil,
                }):AddKeyPicker("AntiAimVelocityDesyncKeyPicker", {
                    Default = "b",
                    SyncToggleState = true,
                    Mode = "Toggle",

                    Text = "Velocity Desync",
                    NoUI = false,
                })

                Toggles.AntiAimVelocityDesyncEnabled:OnChanged(function()
                    Settings.AntiAim.VelocityDesync.Enabled = Toggles.AntiAimVelocityDesyncEnabled.Value
                end)

                Sections.AntiAim.VelocityDesync:AddSlider("AntiAimVelocityDesyncRange", {
                    Text = "Range",
                    Default = 1,
                    Min = 0.1,
                    Max = 10,
                    Rounding = 3,
                    Compact = false,
                })

                Options.AntiAimVelocityDesyncRange:OnChanged(function()
                    Settings.AntiAim.VelocityDesync.Range = Options.AntiAimVelocityDesyncRange.Value
                end)
            end

            --// FFlag Desync
            do
                Sections.AntiAim.FFlag:AddToggle("AntiAimFFlagDesyncEnabled", {
                    Text = "Enabled",
                    Default = false,
                    Tooltip = nil,
                }):AddKeyPicker("AntiAimFFlagDesyncKeyPicker", {
                    Default = "b",
                    SyncToggleState = true,
                    Mode = "Toggle",

                    Text = "FFlag Desync",
                    NoUI = false,
                })

                Toggles.AntiAimFFlagDesyncEnabled:OnChanged(function()
                    Settings.AntiAim.FFlagDesync.Enabled = Toggles.AntiAimFFlagDesyncEnabled.Value

                    if not Settings.AntiAim.FFlagDesync.Enabled then
                        for FFlag, Value in pairs(Script.Locals.FFlags) do
                            setfflag(FFlag, Value)
                        end
                    end
                end)

                Sections.AntiAim.FFlag:AddToggle("AntiAimFFlagDesyncSetNew", {
                    Text = "Set New",
                    Default = false,
                    Tooltip = nil,
                })

                Toggles.AntiAimFFlagDesyncSetNew:OnChanged(function()
                    Settings.AntiAim.FFlagDesync.SetNew = Toggles.AntiAimFFlagDesyncSetNew.Value
                end)

                Sections.AntiAim.FFlag:AddDropdown("AntiAimFFlagDesyncFFlags", {
                    Values = {"S2PhysicsSenderRate", "PhysicsSenderMaxBandwidthBps", "DataSenderMaxJoinBandwidthBps"},
                    Default = {"S2PhysicsSenderRate"},
                    Multi = true,
                    Text = "FFlags",
                    Tooltip = nil,
                })

                Options.AntiAimFFlagDesyncFFlags:OnChanged(function()
                    Settings.AntiAim.FFlagDesync.FFlags = Options.AntiAimFFlagDesyncFFlags.Value
                end)

                Sections.AntiAim.FFlag:AddSlider("AntiAimFFlagDesyncAmount", {
                    Text = "Amount",
                    Default = 2,
                    Min = 0.1,
                    Max = 10,
                    Rounding = 3,
                    Compact = false,
                })

                Options.AntiAimFFlagDesyncAmount:OnChanged(function()
                    Settings.AntiAim.FFlagDesync.Amount = Options.AntiAimFFlagDesyncAmount.Value
                end)

                Sections.AntiAim.FFlag:AddSlider("AntiAimFFlagDesyncSetnewAmount", {
                    Text = "Set New Amount",
                    Default = 15,
                    Min = 0.1,
                    Max = 20,
                    Rounding = 3,
                    Compact = false,
                })

                Options.AntiAimFFlagDesyncSetnewAmount:OnChanged(function()
                    Settings.AntiAim.FFlagDesync.SetNewAmount = Options.AntiAimFFlagDesyncSetnewAmount.Value
                end)
            end

            --// Invisible Desync
        end

        --// Misc
        do

            --// Speed
            do
                Sections.Misc.Speed:AddToggle("MiscCFrameSpeedEnabled", {
                    Text = "Enabled",
                    Default = false,
                    Tooltip = nil,
                }):AddKeyPicker("MiscCFrameSpeedKeybind", {
                    Default = "b",
                    SyncToggleState = true,
                    Mode = "Toggle",

                    Text = "Speed",
                    NoUI = false,
                })

                Toggles.MiscCFrameSpeedEnabled:OnChanged(function()
                    Settings.Misc.Movement.Speed.Enabled = Toggles.MiscCFrameSpeedEnabled.Value
                end)

                Sections.Misc.Speed:AddSlider("MiscCFrameSpeedAmount", {
                    Text = "Amount",
                    Default = 0.1,
                    Min = 0,
                    Max = 10,
                    Rounding = 3,
                    Compact = false,
                })

                Options.MiscCFrameSpeedAmount:OnChanged(function()
                    Settings.Misc.Movement.Speed.Amount = Options.MiscCFrameSpeedAmount.Value
                end)
            end

            --// Exploits
            do
                Sections.Misc.Exploits:AddToggle("MiscExploitsEnabled", {
                    Text = "Enabled",
                    Default = false,
                    Tooltip = nil,
                })

                Toggles.MiscExploitsEnabled:OnChanged(function()
                    Settings.Misc.Exploits.Enabled = Toggles.MiscExploitsEnabled.Value
                end)

                Sections.Misc.Exploits:AddToggle("MiscExploitsNoRecoil", {
                    Text = "No Recoil",
                    Default = false,
                    Tooltip = nil,
                })

                Toggles.MiscExploitsNoRecoil:OnChanged(function()
                    Settings.Misc.Exploits.NoRecoil = Toggles.MiscExploitsNoRecoil.Value
                end)

                Sections.Misc.Exploits:AddToggle("MiscExploitsNoJumpCooldown", {
                    Text = "No Jumpcooldown",
                    Default = false,
                    Tooltip = nil,
                })

                Toggles.MiscExploitsNoJumpCooldown:OnChanged(function()
                    Settings.Misc.Exploits.NoJumpCooldown = Toggles.MiscExploitsNoJumpCooldown.Value
                end)

                Sections.Misc.Exploits:AddToggle("MiscExploitsNoSlowdown", {
                    Text = "No Slowdown",
                    Default = false,
                    Tooltip = nil,
                })

                Toggles.MiscExploitsNoSlowdown:OnChanged(function()
                    Settings.Misc.Exploits.NoSlowDown = Toggles.MiscExploitsNoSlowdown.Value
                end)
            end
        end

        --// Settings Tab
        do
            local MenuGroup = Tabs.Settings:AddLeftGroupbox("Menu")

            Library.KeybindFrame.Visible = true

            MenuGroup:AddToggle("KeybindsListEnabled", {
                Text = "Keybinds List",
                Default = true,
                Tooltip = nil,
            })

            Toggles.KeybindsListEnabled:OnChanged(function()
                Library.KeybindFrame.Visible = Toggles.KeybindsListEnabled.Value
            end)

            MenuGroup:AddButton("Unload", function() Library:Unload() end)
            MenuGroup:AddLabel("Menu bind"):AddKeyPicker("MenuKeybind", { Default = "End", NoUI = true, Text = "Menu keybind" })
            Library.ToggleKeybind = Options.MenuKeybind

            ThemeManager:SetLibrary(Library)
            SaveManager:SetLibrary(Library)

            ThemeManager:SetFolder("Azure")
            SaveManager:SetFolder("Azure/Hood")

            SaveManager:BuildConfigSection(Tabs.Settings)
            ThemeManager:ApplyToTab(Tabs.Settings)
        end
    end
end

load()

   end,
})

local Button = MainTab:CreateButton({
   Name = "üßäDrax-sourceüßä",
   Callback = function()
   --[[ 
    @title
        fatality.universal (lua)
    
    @author
        sleeperweda

    @description
        Beware of üçù code.
]]

local SYC = {
    Modules = {
        UI = {}
    }
}

-- check if there is no global variable SYC, and if there is none, it will set it to the table above.
-- erm its basically prefetch ifykyk
if not getgenv().SYC then
    getgenv().SYC = SYC
end

if not getgenv().load_game then
    getgenv().load_game = "da_hood"
end

if not isfolder("drax") then
    makefolder("drax")
end

if not isfolder("drax/configs") then
    makefolder("drax/configs")
end

if not isfolder("drax/configs/da_hood") then
    makefolder("drax/configs/da_hood")
end

-- make services global. self-explanatory.
getgenv().playerService = game:GetService("Players")
getgenv().coreguiService = game:GetService("CoreGui")
getgenv().tweenService = game:GetService("TweenService")
getgenv().inputService = game:GetService("UserInputService")
getgenv().rsService = game:GetService("RunService")
getgenv().replicatedStorage = game:GetService("ReplicatedStorage")
getgenv().textService = game:GetService("TextService")
getgenv().httpService = game:GetService("HttpService")
getgenv().userSettings = UserSettings()
getgenv().userGameSettings = userSettings:GetService("UserGameSettings")
getgenv().inputManager = game:GetService("VirtualInputManager")

local LocalPlayer = playerService.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

-- localization of lua libraries. this reduces the need to repeatedly look up these global libraries.
-- what the actual fuck weda.
local MathHuge, MathAbs, MathAcos, MathAsin, MathAtan, MathAtan2, MathCeil, MathCos, MathCosh, MathDeg, MathExp, MathFloor, MathFmod, MathFrexp, MathLdexp, MathLog, MathLog10, MathMax, MathMin, MathModf, MathPi, MathPow, MathRad, MathRandom, MathRandomseed, MathSin, MathSinh, MathSqrt, MathTan, MathTanh = math.huge, math.abs, math.acos, math.asin, math.atan, math.atan2, math.ceil, math.cos, math.cosh, math.deg, math.exp, math.floor, math.fmod, math.frexp, math.ldexp, math.log, math.log10, math.max, math.min, math.modf, math.pi, math.pow, math.rad, math.random, math.randomseed, math.sin, math.sinh, math.sqrt, math.tan, math.tanh
local TableConcat, TableInsert, TablePack, TableRemove, TableSort, TableUnpack, TableClear, TableFind = table.concat, table.insert, table.pack, table.remove, table.sort, table.unpack, table.clear, table.find
local Vector2New, Vector2Zero, Vector2New = Vector2.new, Vector2.zero, Vector2.new
local Vector3New, Vector3Zero, Vector3One, Vector3FromNormalId, Vector3FromAxis = Vector3.new, Vector3.zero, Vector3.one, Vector3.FromNormalId, Vector3.FromAxis
local UDim2New = UDim2.new
local CFrameNew, CFrameAngles, CFrameFromAxisAngle, CFrameFromEulerAnglesXYZ, CFrameFromMatrix, CFrameFromOrientation, CFrameFromQuaternion = CFrame.new, CFrame.Angles, CFrame.fromAxisAngle, CFrame.fromEulerAnglesXYZ, CFrame.fromMatrix, CFrame.fromOrientation, CFrame.fromQuaternion
local Color3New, Color3FromRGB, Color3FromHSV = Color3.new, Color3.fromRGB, Color3.fromHSV
local InstanceNew = Instance.new
local TaskDelay, TaskSpawn, TaskWait = task.delay, task.spawn, task.wait
local RaycastParamsNew = RaycastParams.new
local DrawingNew = Drawing.new

-- importing of files, this is bundled with a bundler.
local ModuleHandler = (function() -- src/Lua/Modules/ModuleHandler.lua
    -- similar to lua require, but it is for a certain table. Such as SYC.Modules
    
    local ModuleHandler = {}
    
    function ModuleHandler:include(ModuleName)
        if not SYC then return end
        if not SYC.Modules then return end
    
        if not type(ModuleName) == "string" then return end
    
        local Modules = SYC.Modules
        return Modules[ModuleName]
    end
    
    getgenv().include = function (modname) return ModuleHandler:include(modname) end 
    return ModuleHandler
end)()

do -- src/Lua/Modules/Base/
    do -- src/Lua/Modules/Base/Connection.lua
        function SYC.Modules.Connect(onething, secondthing)
            local connection = onething:Connect(secondthing)
            return connection
        end
    end
    do -- src/Lua/Modules/Base/Draw.lua
        local DrawingClass = {}
        DrawingClass.__index = DrawingClass
        DrawingClass.Objects = {}
        
        local DrawingMeta = {}
        
        DrawingMeta.__call = function (self, Arguments)
            if Arguments then
                local newObject = Drawing.new(Arguments[1])
                
                for property, value in next, Arguments[2] do
                    newObject[property] = value
                end
        
                table.insert(self.Objects, newObject)
                return newObject
            end
        end
        
        setmetatable(DrawingClass, DrawingMeta)
        
        SYC.Modules.DrawingClass = DrawingClass
    end
    do -- src/Lua/Modules/Base/Lerp.lua
        function SYC.Modules.lerp(a, b, t)
            return a + (b - a) * t
        end
    end
    do -- src/Lua/Modules/Base/Loops.lua
        local Loops = {Heartbeat = {}, RenderStepped = {}}
        function Loops:AddToHeartbeat(Name, Function)
            if Loops["Heartbeat"][Name] == nil then
                Loops["Heartbeat"][Name] = rsService.Heartbeat:Connect(Function)
            end
        end
        function Loops:RemoveFromHeartbeat(Name)
            if Loops["Heartbeat"][Name] then
                Loops["Heartbeat"][Name]:Disconnect()
                Loops["Heartbeat"][Name] = nil
            end
        end
        function Loops:AddToRenderStepped(Name, Function)
            if Loops["RenderStepped"][Name] == nil then
                Loops["RenderStepped"][Name] = rsService.RenderStepped:Connect(Function)
            end
        end
        function Loops:RemoveFromRenderStepped(Name)
            if Loops["RenderStepped"][Name] then
                Loops["RenderStepped"][Name]:Disconnect()
                Loops["RenderStepped"][Name] = nil
            end
        end
        
        SYC.Modules.Loops = Loops
    end
    do -- src/Lua/Modules/Base/PerlinNoise.lua
        -- useful shit for legit ig
        function SYC.Modules.PerlinNoise(offset, speed, time)
            local value = math.noise(time * speed + offset)
            return math.clamp(value, -0.5, 0.5)
        end
    end
    do -- src/Lua/Modules/Base/UI - Rich to Plain.lua
        -- @https://devforum.roblox.com/t/how-to-ensure-a-plain-text-string-when-using-rich-text-field/1640202
        function SYC.Modules.UI.RichTextToNormalText(str)
            local output_string = str
            while true do 
                if not output_string:find("<") and not output_string:find(">") then break end -- If not found  any <...>
                if (output_string:find("<") and not output_string:find(">")) or (output_string:find(">") and not output_string:find("<")) then return error("Invalid RichText") end -- if found only "<..." or "...>"
                output_string = output_string:gsub(output_string:sub(output_string:find("<"),output_string:find(">")),"",1) -- Removing this "<...>"
                TaskWait()
            end
            return output_string
        end
    end
    do -- src/Lua/Modules/Base/UI -GetTextBoundary.lua
        function SYC.Modules.UI:GetTextBoundary(Text, Font, Size, Resolution)
            local Bounds = textService:GetTextSize(Text, Size, Font, Resolution or Vector2New(1920, 1080))
            return Bounds.X, Bounds.Y
        end
    end
end

local UserInterface = (function() -- src/Lua/Interface/Interface.Lua
    local UserInterface = {
        Instances = {},
        Popup = nil,
        KeybindsListObjects = {},
        KeybindList = nil,
    
        Flags = {},
        ConfigFlags = {}
    }
    getgenv().uishit = UserInterface
    
    getgenv().theme = {
        accent = Color3FromRGB(168, 157, 159)
    }
    
    getgenv().theme_event = Instance.new('BindableEvent')
    
    getgenv().UI = UserInterface.Instances
    local UIModule = include "UI"
    
    local dragging, dragInput, dragStart, startPos, dragObject
    
    local Keys = {
        [Enum.KeyCode.LeftShift] = "LS",
        [Enum.KeyCode.RightShift] = "RS",
        [Enum.KeyCode.LeftControl] = "LC",
        [Enum.KeyCode.RightControl] = "RC",
        [Enum.KeyCode.LeftAlt] = "LA",
        [Enum.KeyCode.RightAlt] = "RA",
        [Enum.KeyCode.CapsLock] = "CAPS",
        [Enum.KeyCode.Return] = "ENT",
        [Enum.KeyCode.PageDown] = "PGD",
        [Enum.KeyCode.PageUp] = "PGU",
        [Enum.KeyCode.ScrollLock] = "SCL",
        [Enum.KeyCode.One] = "1",
        [Enum.KeyCode.Two] = "2",
        [Enum.KeyCode.Three] = "3",
        [Enum.KeyCode.Four] = "4",
        [Enum.KeyCode.Five] = "5",
        [Enum.KeyCode.Six] = "6",
        [Enum.KeyCode.Seven] = "7",
        [Enum.KeyCode.Eight] = "8",
        [Enum.KeyCode.Nine] = "9",
        [Enum.KeyCode.Zero] = "0",
        [Enum.KeyCode.KeypadOne] = "1",
        [Enum.KeyCode.KeypadTwo] = "2",
        [Enum.KeyCode.KeypadThree] = "3",
        [Enum.KeyCode.KeypadFour] = "4",
        [Enum.KeyCode.KeypadFive] = "5",
        [Enum.KeyCode.KeypadSix] = "6",
        [Enum.KeyCode.KeypadSeven] = "7",
        [Enum.KeyCode.KeypadEight] = "8",
        [Enum.KeyCode.KeypadNine] = "9",
        [Enum.KeyCode.KeypadZero] = "0",
        [Enum.KeyCode.Minus] = "-",
        [Enum.KeyCode.Equals] = "=",
        [Enum.KeyCode.Tilde] = "~",
        [Enum.KeyCode.LeftBracket] = "[",
        [Enum.KeyCode.RightBracket] = "]",
        [Enum.KeyCode.RightParenthesis] = ")",
        [Enum.KeyCode.LeftParenthesis] = "(",
        [Enum.KeyCode.Semicolon] = ",",
        [Enum.KeyCode.Quote] = "'",
        [Enum.KeyCode.BackSlash] = "\\",
        [Enum.KeyCode.Comma] = ",",
        [Enum.KeyCode.Period] = ".",
        [Enum.KeyCode.Slash] = "/",
        [Enum.KeyCode.Asterisk] = "*",
        [Enum.KeyCode.Plus] = "+",
        [Enum.KeyCode.Period] = ".",
        [Enum.KeyCode.Backquote] = "`",
        [Enum.KeyCode.Insert] = "INS",
        [Enum.UserInputType.MouseButton1] = "MB1",
        [Enum.UserInputType.MouseButton2] = "MB2",
        [Enum.UserInputType.MouseButton3] = "MB3",
        [Enum.KeyCode.Backspace] = "BS",
        [Enum.KeyCode.Escape] = "ESC",
        [Enum.KeyCode.Space] = "SPC",
    }
    
    local FlagCount = 0
    function UserInterface:GetNextFlag()
        FlagCount = FlagCount + 1
        return tostring(FlagCount)
    end
    
    function UserInterface:Create(OptionsLaughtOutLouds)
        local Configuration = {
            Tabs = {},
            Title = OptionsLaughtOutLouds.title or 'syndicate<font color="rgb(129, 127, 127)">.club</font>'
        }
    
        local Texts = {
            "user",
        }
    
        local function ChangeText(Object, NewText) -- this is for the thing in the top-right in the ui what
            tweenService:Create(Object, TweenInfo.new(0.2), {TextTransparency = 0.5}):Play()
            Object.Text = NewText
            TaskWait(0.1)
    
            tweenService:Create(Object, TweenInfo.new(0.2), {TextTransparency = 0}):Play()
        end
        
        UI["1"] = InstanceNew("ScreenGui", coreguiService)
        UI["1"]["Name"] = [[syndicate.club]]
        UI["1"]["ZIndexBehavior"] = Enum.ZIndexBehavior.Global
    
        UI["2"] = InstanceNew("Frame", UI["1"])
        UI["2"]["BorderSizePixel"] = 0
        UI["2"]["BackgroundColor3"] = Color3FromRGB(24, 24, 24)
        UI["2"]["Size"] = UDim2New(0, 562, 0, 459)
        UI["2"]["Position"] = UDim2New(0, 527, 0, 168)
        UI["2"]["BorderColor3"] = Color3FromRGB(0, 0, 0)
        UI["2"]["Name"] = [[BackgroundFrame]]
        
        UI["3"] = InstanceNew("UICorner", UI["2"])
        UI["3"]["Name"] = [[BackgroundCorner]]
        
        UI["4"] = InstanceNew("UIStroke", UI["2"])
        UI["4"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border
        UI["4"]["Name"] = [[BackgroundStroke]]
        UI["4"]["Thickness"] = 2
        UI["4"]["Color"] = Color3FromRGB(31, 33, 31)
        
        UI["5"] = InstanceNew("TextLabel", UI["2"])
        UI["5"]["TextStrokeTransparency"] = 0
        UI["5"]["BorderSizePixel"] = 0
        UI["5"]["BackgroundColor3"] = Color3FromRGB(255, 255, 255)
        UI["5"]["TextSize"] = 16
        UI["5"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
        UI["5"]["TextColor3"] = Color3FromRGB(255, 255, 255)
        UI["5"]["BackgroundTransparency"] = 1
        UI["5"]["Size"] = UDim2New(0, 81, 0, 20)
        UI["5"]["BorderColor3"] = Color3FromRGB(0, 0, 0)
        UI["5"]["Text"] = Configuration.Title
        UI["5"]["Name"] = [[MainTitle]]
        UI["5"]["Position"] = UDim2New(0, 15, 0, 12)
        UI["5"]["RichText"] = true
        UI["5"]["TextXAlignment"] = Enum.TextXAlignment.Left
    
        UI["6"] = InstanceNew("Frame", UI["2"])
        UI["6"]["BackgroundColor3"] = Color3FromRGB(255, 255, 255)
        UI["6"]["Size"] = UDim2New(0, 1, 0, 16)
        UI["6"]["Position"] = UDim2New(0, 98, 0, 14)
        UI["6"]["BorderColor3"] = Color3FromRGB(0, 0, 0)
        UI["6"]["Name"] = [[BackgroundAccent]]
    
        UI["7"] = InstanceNew("Frame", UI["2"])
        UI["7"]["BorderSizePixel"] = 0
        UI["7"]["BackgroundColor3"] = Color3FromRGB(255, 255, 255)
        UI["7"]["Size"] = UDim2New(0, 456, 0, 16)
        UI["7"]["Position"] = UDim2New(0, 105, 0, 14)
        UI["7"]["BorderColor3"] = Color3FromRGB(0, 0, 0)
        UI["7"]["Name"] = [[TabsList]]
        UI["7"]["BackgroundTransparency"] = 1
    
        UI["9"] = InstanceNew("UIListLayout", UI["7"])
        UI["9"]["Padding"] = UDim.new(0, 5)
        UI["9"]["SortOrder"] = Enum.SortOrder.LayoutOrder
        UI["9"]["Name"] = [[TabsListLayout]]
        UI["9"]["FillDirection"] = Enum.FillDirection.Horizontal
    
        UI["a"] = InstanceNew("TextLabel", UI["2"])
        UI["a"]["TextWrapped"] = false
        UI["a"]["TextStrokeTransparency"] = 0
        UI["a"]["BorderSizePixel"] = 0
        UI["a"]["TextXAlignment"] = Enum.TextXAlignment.Right
        UI["a"]["TextScaled"] = false
        UI["a"]["BackgroundColor3"] = Color3FromRGB(255, 255, 255)
        UI["a"]["TextSize"] = 16
        UI["a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
        UI["a"]["TextColor3"] = Color3FromRGB(255, 255, 255)
        UI["a"]["BackgroundTransparency"] = 1
        UI["a"]["Size"] = UDim2New(0, 452, 0, 19)
        UI["a"]["BorderColor3"] = Color3FromRGB(0, 0, 0)
        UI["a"]["Text"] = [[powered by astro.space]]
        UI["a"]["Name"] = [[CreditTitle]]
        UI["a"]["Position"] = UDim2New(0, 96, 0, 428)
    
        UI["b"] = InstanceNew("Frame", UI["2"])
        UI["b"]["BorderSizePixel"] = 0
        UI["b"]["BackgroundColor3"] = Color3FromRGB(17, 17, 17)
        UI["b"]["Size"] = UDim2New(0, 533, 0, 378)
        UI["b"]["Position"] = UDim2New(0.027, 0,0.095, 0)
        UI["b"]["BorderColor3"] = Color3FromRGB(0, 0, 0)
        UI["b"]["Name"] = [[MainFrame]]
    
        local MainFrameShadow1 = Instance.new("Frame")
        local MF_SHADOW1 = Instance.new("UIGradient")
        
        MainFrameShadow1.Name = "MainFrameShadow1"
        MainFrameShadow1.Parent = UI["b"]
        MainFrameShadow1.ZIndex = 2
        MainFrameShadow1.Size = UDim2.new(1, 0, 0.039682541, 0)
        MainFrameShadow1.BorderColor3 = Color3.fromRGB(0, 0, 0)
        MainFrameShadow1.Position = UDim2.new(0, 0, 0.960317433, 0)
        MainFrameShadow1.BorderSizePixel = 0
        MainFrameShadow1.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
        
        MF_SHADOW1.Name = "MF_SHADOW1"
        MF_SHADOW1.Parent = MainFrameShadow1
        MF_SHADOW1.Transparency = NumberSequence.new({NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(0.004552352242171764, 0.11475414037704468), NumberSequenceKeypoint.new(0.030349012464284897, 0.3606557846069336), NumberSequenceKeypoint.new(0.6358118057250977, 1), NumberSequenceKeypoint.new(0.9998999834060669, 1), NumberSequenceKeypoint.new(1, 0)})
        MF_SHADOW1.Rotation = -90
    
        local MainFrameShadow2 = Instance.new("Frame")
        local MF_SHADOW2 = Instance.new("UIGradient")
        
        MainFrameShadow2.Name = "MainFrameShadow2"
        MainFrameShadow2.Parent = UI["b"]
        MainFrameShadow2.ZIndex = 2
        MainFrameShadow2.Size = UDim2.new(1, 0, 0.0399999991, 0)
        MainFrameShadow2.BorderColor3 = Color3.fromRGB(0, 0, 0)
        MainFrameShadow2.BorderSizePixel = 0
        MainFrameShadow2.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
        
        MF_SHADOW2.Name = "MF_SHADOW2"
        MF_SHADOW2.Parent = MainFrameShadow2
        MF_SHADOW2.Transparency = NumberSequence.new({NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(0.004552352242171764, 0.11475414037704468), NumberSequenceKeypoint.new(0.030349012464284897, 0.3606557846069336), NumberSequenceKeypoint.new(0.6358118057250977, 1), NumberSequenceKeypoint.new(0.9998999834060669, 1), NumberSequenceKeypoint.new(1, 0)})
        MF_SHADOW2.Rotation = 90
    
        UI["c"] = InstanceNew("UICorner", UI["b"])
        UI["c"]["Name"] = [[MainFrameCorner]]
    
        UI["d"] = InstanceNew("UIStroke", UI["b"])
        UI["d"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border
        UI["d"]["Name"] = [[MainFrameStroke]]
        UI["d"]["Color"] = Color3FromRGB(29, 29, 29)
    
        UI["e"] = InstanceNew("Folder", UI["2"])
        UI["e"]["Name"] = [[Sections]]
    
        local Shadow1 = Instance.new("ImageLabel")
    
        Shadow1.Name = "Shadow1"
        Shadow1.Parent = UI["2"]
        Shadow1.AnchorPoint = Vector2.new(0.5, 0.5)
        Shadow1.ZIndex = 0
        Shadow1.Size = UDim2.new(1.7, 0,2.843, 0)
        Shadow1.BorderColor3 = Color3.fromRGB(0, 0, 0)
        Shadow1.Rotation = 90
        Shadow1.BackgroundTransparency = 1
        Shadow1.Position = UDim2.new(0.468, 0,0.495, 0)
        Shadow1.BorderSizePixel = 0
        Shadow1.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Shadow1.ImageColor3 = Color3.fromRGB(0, 0, 0)
        Shadow1.ScaleType = Enum.ScaleType.Tile
        Shadow1.Image = "rbxassetid://8992230677"
        Shadow1.SliceCenter = Rect.new(Vector2.new(0, 0), Vector2.new(99, 99))
    
        local text_coroutine = coroutine.create(function ()
            while TaskWait() do
                for i = 1, #Texts do
                    TaskWait(2)
                    ChangeText(UI["a"], Texts[i])
                end
            end
        end)
        coroutine.resume(text_coroutine)
    
        function Configuration:Tab( Tab_Name )
            if not type(Tab_Name) == "string" then return end
    
            local TabConfiguration = { Sections = {} }
    
            local X = UIModule:GetTextBoundary(Tab_Name, Enum.Font.SourceSans, 16)
            UI["8"] = InstanceNew("TextButton", UI["7"])
            UI["8"]["TextStrokeTransparency"] = 0
            UI["8"]["BorderSizePixel"] = 0
            UI["8"]["TextSize"] = 16
            UI["8"]["TextColor3"] = Color3FromRGB(137, 137, 139)
            UI["8"]["BackgroundColor3"] = Color3FromRGB(255, 255, 255)
            UI["8"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
            UI["8"]["Size"] = UDim2New(0, X, 1, 0)
            UI["8"]["BackgroundTransparency"] = 1
            UI["8"]["Name"] = [[TabButton]]
            UI["8"]["BorderColor3"] = Color3FromRGB(0, 0, 0)
            UI["8"]["Text"] = Tab_Name
    
            UI["f"] = InstanceNew("Frame", UI["e"])
            UI["f"]["Active"] = true
            UI["f"]["BorderSizePixel"] = 0
            UI["f"]["BackgroundColor3"] = Color3FromRGB(255, 255, 255)
            UI["f"]["Name"] = [[MainSectionFrame]]
            UI["f"]["Position"] = UDim2New(0.028, 0,0.142, 0)
            UI["f"]["Size"] = UDim2New(0, 530, 0, 378)
            UI["f"]["BorderColor3"] = Color3FromRGB(0, 0, 0)
            UI["f"]["BackgroundTransparency"] = 1
            UI["f"]["Position"] = UDim2New(0.027, 0, 0.095, 0)
    
            local MSFrame = UI["f"]
    
            local leftblah = InstanceNew("ScrollingFrame", UI["f"])
            leftblah["Active"] = true
            leftblah["BorderSizePixel"] = 0
            leftblah["BackgroundColor3"] = Color3FromRGB(255, 255, 255)
            leftblah["Name"] = [[Left]]
            leftblah["ScrollBarImageTransparency"] = 0
            leftblah["Size"] = UDim2New(0, 265, 1, 0)
            leftblah["ScrollBarImageColor3"] = Color3FromRGB(0, 255, 255)
            leftblah["BorderColor3"] = Color3FromRGB(0, 0, 0)
            leftblah["ScrollBarThickness"] = 3
            leftblah["BackgroundTransparency"] = 1
            leftblah.AutomaticCanvasSize = Enum.AutomaticSize.Y
            leftblah["Position"] = UDim2New(0, 0, 0, 0)
            leftblah.BottomImage = ""
            leftblah.TopImage = ""
    
            theme_event.Event:Connect(function ()
                leftblah.ScrollBarImageColor3 = theme.scroll
            end)
    
            UI["11"] = InstanceNew("UIPadding", leftblah)
            UI["11"]["PaddingTop"] = UDim.new(0, 18)
            UI["11"]["Name"] = [[LeftColumnPadding]]
            UI["11"]["PaddingLeft"] = UDim.new(0, 7)
    
            local rightblahInstance = InstanceNew("ScrollingFrame", UI["f"])
            rightblahInstance["Active"] = true
            rightblahInstance["BorderSizePixel"] = 0
            rightblahInstance["BackgroundColor3"] = Color3FromRGB(255, 255, 255)
            rightblahInstance["Name"] = [[Right]]
            rightblahInstance["ScrollBarImageTransparency"] = 0
            rightblahInstance["Size"] = UDim2New(0, 265, 1, 0)
            rightblahInstance["ScrollBarImageColor3"] = Color3FromRGB(0, 255, 255)
            rightblahInstance["BorderColor3"] = Color3FromRGB(0, 0, 0)
            rightblahInstance["ScrollBarThickness"] = 3
            rightblahInstance["BackgroundTransparency"] = 1
            rightblahInstance.AutomaticCanvasSize = Enum.AutomaticSize.Y
            rightblahInstance["Position"] = UDim2New(0, 265, 0, 0)
            rightblahInstance.BottomImage = ""
            rightblahInstance.TopImage = ""
    
            theme_event.Event:Connect(function ()
                rightblahInstance.ScrollBarImageColor3 = theme.scroll
            end)
    
            UI["20"] = InstanceNew("UIPadding", rightblahInstance)
            UI["20"]["PaddingTop"] = UDim.new(0, 18)
            UI["20"]["PaddingRight"] = UDim.new(0, 7)
            UI["20"]["PaddingLeft"] = UDim.new(0, 6)
            UI["20"]["Name"] = [[RightColumnPadding]]
    
            UI["LISTLAYOUT_LEFT"] = InstanceNew("UIListLayout")
            UI["LISTLAYOUT_LEFT"].Name = "LeftColumnList"
            UI["LISTLAYOUT_LEFT"].Parent = leftblah
            UI["LISTLAYOUT_LEFT"].SortOrder = Enum.SortOrder.LayoutOrder
            UI["LISTLAYOUT_LEFT"].Padding = UDim.new(0, 19)
    
            UI["LISTLAYOUT_RIGHT"] = InstanceNew("UIListLayout")
            UI["LISTLAYOUT_RIGHT"].Name = "RightColumnList"
            UI["LISTLAYOUT_RIGHT"].Parent = rightblahInstance
            UI["LISTLAYOUT_RIGHT"].SortOrder = Enum.SortOrder.LayoutOrder
            UI["LISTLAYOUT_RIGHT"].Padding = UDim.new(0, 19)
    
            local localization = UI['LISTLAYOUT_LEFT']
            local localization2 = UI["LISTLAYOUT_RIGHT"]
    
            localization.Changed:Connect(function ()
                leftblah.CanvasSize = UDim2New(0, 0, 0, 100 + localization.AbsoluteContentSize.Y)
            end)
    
            localization2.Changed:Connect(function ()
                rightblahInstance.CanvasSize = UDim2New(0, 0, 0, 100 + localization2.AbsoluteContentSize.Y)
            end)
    
            TabConfiguration.Button = UI["8"]
            TabConfiguration.MainSectionFrame = MSFrame
            TabConfiguration.Left = leftblah
            TabConfiguration.Right = rightblahInstance
    
            function TabConfiguration:Select()
                for i, v in next, UI["e"]:GetChildren() do
                    if v:IsA("UIListLayout") then return end
                    v.Visible = false
                end
                for i, v in next, UI["7"]:GetChildren() do
                    if v:IsA("TextButton") then
                        v.TextColor3 = Color3FromRGB(137, 137, 139)
                    end
                end
                TabConfiguration.Button.TextColor3 = Color3FromRGB(255,255,255)
                TabConfiguration.MainSectionFrame.Visible = true
            end
            
            TabConfiguration.Button.MouseButton1Click:Connect(function ()
                TabConfiguration:Select()
            end)
    
            function TabConfiguration:Section( Section_Name, Side )
                if not type(Section_Name) == "string" then return end
                if not type(Side) == "string" then return end
    
                local SectionSide = Side == "right" and TabConfiguration.Right or TabConfiguration.Left
                local Options = {}
    
                local MainFrameThingy = InstanceNew("Frame", SectionSide)
                MainFrameThingy["BorderSizePixel"] = 0
                MainFrameThingy["BackgroundColor3"] = Color3FromRGB(28, 28, 28)
                MainFrameThingy["Size"] = UDim2New(0, 247, 0, 20)
                MainFrameThingy["Position"] = UDim2New(0, 6, 0, 0)
                MainFrameThingy["BorderColor3"] = Color3FromRGB(0, 0, 0)
                MainFrameThingy["Name"] = [[Column]]
    
                local MFSTROKE = InstanceNew("UIStroke", MainFrameThingy)
                MFSTROKE["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border
                MFSTROKE["Name"] = [[ColumnStroke]]
                MFSTROKE["Color"] = Color3FromRGB(37, 37, 37)
    
                local uicornerthingyy = InstanceNew("UICorner", MainFrameThingy)
                uicornerthingyy["Name"] = [[ColumnCorner]]
    
                local titlethinggyy = InstanceNew("TextLabel", MainFrameThingy)
                titlethinggyy["TextStrokeTransparency"] = 0
                titlethinggyy["BorderSizePixel"] = 0
                titlethinggyy["TextXAlignment"] = Enum.TextXAlignment.Left
                titlethinggyy["BackgroundColor3"] = Color3FromRGB(255, 255, 255)
                titlethinggyy["TextSize"] = 14
                titlethinggyy["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                titlethinggyy["TextColor3"] = Color3FromRGB(255, 255, 255)
                titlethinggyy["BackgroundTransparency"] = 1
                titlethinggyy["Size"] = UDim2New(0, 229, 0, -4)
                titlethinggyy["BorderColor3"] = Color3FromRGB(0, 0, 0)
                titlethinggyy["Text"] = Section_Name
                titlethinggyy["Name"] = [[ColumnTitle]]
                titlethinggyy["Position"] = UDim2New(0, 8, 0, 0)
    
                local uilistlayoutthingy = InstanceNew("UIListLayout", MainFrameThingy)
                uilistlayoutthingy["Padding"] = UDim.new(0, 13)
                uilistlayoutthingy["SortOrder"] = Enum.SortOrder.LayoutOrder
                uilistlayoutthingy["Name"] = [[ColumnListLayout]]
    
                local paddingthingy = InstanceNew("UIPadding", MainFrameThingy)
                paddingthingy["Name"] = [[ColumnPadding]]
                paddingthingy["PaddingLeft"] = UDim.new(0, 9)
    
                local SectionColumnComponents = InstanceNew("Frame", MainFrameThingy)
                SectionColumnComponents["BorderSizePixel"] = 0
                SectionColumnComponents["BackgroundColor3"] = Color3FromRGB(255, 255, 255)
                SectionColumnComponents["Size"] = UDim2New(0, 229, 0, 0)
                SectionColumnComponents["Position"] = UDim2New(0, 0, 0, 13)
                SectionColumnComponents["BorderColor3"] = Color3FromRGB(0, 0, 0)
                SectionColumnComponents["Name"] = tostring(math.random(10000,16384))
                SectionColumnComponents["BackgroundTransparency"] = 1
    
                local aujodnousnd = InstanceNew("UIListLayout", SectionColumnComponents)
                aujodnousnd["Padding"] = UDim.new(0, 4)
                aujodnousnd["SortOrder"] = Enum.SortOrder.LayoutOrder
                aujodnousnd["Name"] = [[ColumnComponentsList]]
    
                local function increaseYSize(sizeY, Custom)
                    SectionColumnComponents["Size"] += UDim2New(0, 0, 0, sizeY)
                    MainFrameThingy.Size = UDim2New(0, 247, 0, 22 + aujodnousnd.AbsoluteContentSize.Y)
                end
    
                do -- src/Lua/Interface/Components/
                    do -- src/Lua/Interface/Components/BoneSelector.lua
                        function Options:BoneSelector(Configuration)
                            local BoneSelectorOptions = {
                                Type = Configuration.type or "R15",
                                Callback = Configuration.callback or function() end,
                                Default = Configuration.default or nil,
                                Flag = UserInterface:GetNextFlag(),
                                Multi = Configuration.multi or false
                            }
                        
                            local BoneSelector = {
                                FValues = {},
                                FValue = BoneSelectorOptions.Multi and {} or "",
                            }
                        
                            local BoneSelectorHolder = InstanceNew("Frame")
                            local BSHStroke = InstanceNew("UIStroke")
                            local BSHCorner = InstanceNew("UICorner")
                            local R15 = InstanceNew("Frame")
                            local Head = Instance.new("TextButton")
                            local HumanoidRootPart = Instance.new("TextButton")
                            local LeftHand = Instance.new("TextButton")
                            local LeftLowerArm = Instance.new("TextButton")
                            local LowerTorso = Instance.new("TextButton")
                            local LeftUpperArm = Instance.new("TextButton")
                            local RightHand = Instance.new("TextButton")
                            local RightUpperArm = Instance.new("TextButton")
                            local RightLowerArm = Instance.new("TextButton")
                            local UpperTorso = Instance.new("TextButton")
                            local LeftUpperLeg = Instance.new("TextButton")
                            local LeftLowerLeg = Instance.new("TextButton")
                            local LeftFoot = Instance.new("TextButton")
                            local RightFoot = Instance.new("TextButton")
                            local RightUpperLeg = Instance.new("TextButton")
                            local RightLowerLeg = Instance.new("TextButton")
                            local R6 = InstanceNew("Frame")
                            local Head_2 = InstanceNew("TextButton")
                            local LeftArm_2 = InstanceNew("TextButton")
                            local RightArm_2 = InstanceNew("TextButton")
                            local RightLeg_2 = InstanceNew("TextButton")
                            local LeftLeg_2 = InstanceNew("TextButton")
                            local Torso_3 = InstanceNew("TextButton")
                            local HumanoidRootPart_2 = InstanceNew("TextButton")
                            
                            BoneSelectorHolder.Name = "BoneSelectorHolder"
                            BoneSelectorHolder.Parent = SectionColumnComponents
                            BoneSelectorHolder.Size = UDim2.new(1, 0, 0, 316)
                            BoneSelectorHolder.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            BoneSelectorHolder.Position = UDim2.new(0, 0, -1.17375305e-06, 0)
                            BoneSelectorHolder.BorderSizePixel = 0
                            BoneSelectorHolder.BackgroundColor3 = Color3.fromRGB(16, 16, 16)
                            
                            BSHStroke.Name = "BSHStroke"
                            BSHStroke.Parent = BoneSelectorHolder
                            BSHStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
                            BSHStroke.Color = Color3.fromRGB(36, 36, 36)
                            
                            BSHCorner.Name = "BSHCorner"
                            BSHCorner.Parent = BoneSelectorHolder
                            
                            R15.Name = "R15"
                            R15.Parent = BoneSelectorHolder
                            R15.Size = UDim2.new(0, 217, 0, 308)
                            R15.Visible = true
                            R15.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            R15.BackgroundTransparency = 1
                            R15.Position = UDim2.new(0.0262008738, 0, 0.0187500007, 0)
                            R15.BorderSizePixel = 0
                            R15.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                            
                            Head.Name = "Head"
                            Head.Parent = R15
                            Head.Size = UDim2.new(0, 60, 0, 68)
                            Head.BorderColor3 = Color3.fromRGB(36, 36, 36)
                            Head.Position = UDim2.new(0.358999997, 0, 0.0579999983, 0)
                            Head.BorderSizePixel = 2
                            Head.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
                            Head.TextColor3 = Color3.fromRGB(0, 0, 0)
                            Head.Text = ""
                            Head.TextSize = 14
                            Head.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                        
                            HumanoidRootPart.Name = "HumanoidRootPart"
                            HumanoidRootPart.Parent = R15
                            HumanoidRootPart.ZIndex = 2
                            HumanoidRootPart.Size = UDim2.new(0, 22, 0, 25)
                            HumanoidRootPart.BorderColor3 = Color3.fromRGB(36, 36, 36)
                            HumanoidRootPart.Position = UDim2.new(0.446557671, 0, 0.402155876, 0)
                            HumanoidRootPart.BorderSizePixel = 2
                            HumanoidRootPart.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
                            HumanoidRootPart.TextColor3 = Color3.fromRGB(0, 0, 0)
                            HumanoidRootPart.Text = ""
                            HumanoidRootPart.TextSize = 14
                            HumanoidRootPart.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                        
                            LeftHand.Name = "LeftHand"
                            LeftHand.Parent = R15
                            LeftHand.Size = UDim2.new(0, 53, 0, 20)
                            LeftHand.BorderColor3 = Color3.fromRGB(36, 36, 36)
                            LeftHand.Position = UDim2.new(0.0778940767, 0, 0.548259795, 0)
                            LeftHand.BorderSizePixel = 2
                            LeftHand.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
                            LeftHand.TextColor3 = Color3.fromRGB(0, 0, 0)
                            LeftHand.Text = ""
                            LeftHand.TextSize = 14
                            LeftHand.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                        
                            LeftLowerArm.Name = "LeftLowerArm"
                            LeftLowerArm.Parent = R15
                            LeftLowerArm.Size = UDim2.new(0, 53, 0, 44)
                            LeftLowerArm.BorderColor3 = Color3.fromRGB(36, 36, 36)
                            LeftLowerArm.Position = UDim2.new(0.0778940767, 0, 0.405238956, 0)
                            LeftLowerArm.BorderSizePixel = 2
                            LeftLowerArm.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
                            LeftLowerArm.TextColor3 = Color3.fromRGB(0, 0, 0)
                            LeftLowerArm.Text = ""
                            LeftLowerArm.TextSize = 14
                            LeftLowerArm.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                        
                            LowerTorso.Name = "LowerTorso"
                            LowerTorso.Parent = R15
                            LowerTorso.Size = UDim2.new(0, 76, 0, 20)
                            LowerTorso.BorderColor3 = Color3.fromRGB(36, 36, 36)
                            LowerTorso.Position = UDim2.new(0.32213372, 0, 0.54809612, 0)
                            LowerTorso.BorderSizePixel = 2
                            LowerTorso.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
                            LowerTorso.TextColor3 = Color3.fromRGB(0, 0, 0)
                            LowerTorso.Text = ""
                            LowerTorso.TextSize = 14
                            LowerTorso.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                        
                            LeftUpperArm.Name = "LeftUpperArm"
                            LeftUpperArm.Parent = R15
                            LeftUpperArm.Size = UDim2.new(0, 53, 0, 38)
                            LeftUpperArm.BorderColor3 = Color3.fromRGB(36, 36, 36)
                            LeftUpperArm.Position = UDim2.new(0.0778940767, 0, 0.278615594, 0)
                            LeftUpperArm.BorderSizePixel = 2
                            LeftUpperArm.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
                            LeftUpperArm.TextColor3 = Color3.fromRGB(0, 0, 0)
                            LeftUpperArm.Text = ""
                            LeftUpperArm.TextSize = 14
                            LeftUpperArm.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                        
                            RightHand.Name = "RightHand"
                            RightHand.Parent = R15
                            RightHand.Size = UDim2.new(0, 49, 0, 19)
                            RightHand.BorderColor3 = Color3.fromRGB(36, 36, 36)
                            RightHand.Position = UDim2.new(0.672364116, 0, 0.548259795, 0)
                            RightHand.BorderSizePixel = 2
                            RightHand.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
                            RightHand.TextColor3 = Color3.fromRGB(0, 0, 0)
                            RightHand.Text = ""
                            RightHand.TextSize = 14
                            RightHand.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                        
                            RightUpperArm.Name = "RightUpperArm"
                            RightUpperArm.Parent = R15
                            RightUpperArm.Size = UDim2.new(0, 53, 0, 38)
                            RightUpperArm.BorderColor3 = Color3.fromRGB(36, 36, 36)
                            RightUpperArm.Position = UDim2.new(0.672364116, 0, 0.278615594, 0)
                            RightUpperArm.BorderSizePixel = 2
                            RightUpperArm.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
                            RightUpperArm.TextColor3 = Color3.fromRGB(0, 0, 0)
                            RightUpperArm.Text = ""
                            RightUpperArm.TextSize = 14
                            RightUpperArm.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                        
                            RightLowerArm.Name = "RightLowerArm"
                            RightLowerArm.Parent = R15
                            RightLowerArm.Size = UDim2.new(0, 53, 0, 44)
                            RightLowerArm.BorderColor3 = Color3.fromRGB(36, 36, 36)
                            RightLowerArm.Position = UDim2.new(0.672364116, 0, 0.405238956, 0)
                            RightLowerArm.BorderSizePixel = 2
                            RightLowerArm.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
                            RightLowerArm.TextColor3 = Color3.fromRGB(0, 0, 0)
                            RightLowerArm.Text = ""
                            RightLowerArm.TextSize = 14
                            RightLowerArm.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                        
                            UpperTorso.Name = "UpperTorso"
                            UpperTorso.Parent = R15
                            UpperTorso.Size = UDim2.new(0, 76, 0, 82)
                            UpperTorso.BorderColor3 = Color3.fromRGB(36, 36, 36)
                            UpperTorso.Position = UDim2.new(0.32213372, 0, 0.279000014, 0)
                            UpperTorso.BorderSizePixel = 2
                            UpperTorso.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
                            UpperTorso.TextColor3 = Color3.fromRGB(0, 0, 0)
                            UpperTorso.Text = ""
                            UpperTorso.TextSize = 14
                            UpperTorso.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                        
                            LeftUpperLeg.Name = "LeftUpperLeg"
                            LeftUpperLeg.Parent = R15
                            LeftUpperLeg.Size = UDim2.new(0, 38, 0, 62)
                            LeftUpperLeg.BorderColor3 = Color3.fromRGB(36, 36, 36)
                            LeftUpperLeg.Position = UDim2.new(0.32213372, 0, 0.613031149, 0)
                            LeftUpperLeg.BorderSizePixel = 2
                            LeftUpperLeg.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
                            LeftUpperLeg.TextColor3 = Color3.fromRGB(0, 0, 0)
                            LeftUpperLeg.Text = ""
                            LeftUpperLeg.TextSize = 14
                            LeftUpperLeg.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                        
                            LeftLowerLeg.Name = "LeftLowerLeg"
                            LeftLowerLeg.Parent = R15
                            LeftLowerLeg.Size = UDim2.new(0, 38, 0, 32)
                            LeftLowerLeg.BorderColor3 = Color3.fromRGB(36, 36, 36)
                            LeftLowerLeg.Position = UDim2.new(0.32213372, 0, 0.814329863, 0)
                            LeftLowerLeg.BorderSizePixel = 2
                            LeftLowerLeg.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
                            LeftLowerLeg.TextColor3 = Color3.fromRGB(0, 0, 0)
                            LeftLowerLeg.Text = ""
                            LeftLowerLeg.TextSize = 14
                            LeftLowerLeg.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                        
                            LeftFoot.Name = "LeftFoot"
                            LeftFoot.Parent = R15
                            LeftFoot.Size = UDim2.new(0, 38, 0, 9)
                            LeftFoot.BorderColor3 = Color3.fromRGB(36, 36, 36)
                            LeftFoot.Position = UDim2.new(0.32213372, 0, 0.918225944, 0)
                            LeftFoot.BorderSizePixel = 2
                            LeftFoot.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
                            LeftFoot.TextColor3 = Color3.fromRGB(0, 0, 0)
                            LeftFoot.Text = ""
                            LeftFoot.TextSize = 14
                            LeftFoot.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                        
                            RightFoot.Name = "RightFoot"
                            RightFoot.Parent = R15
                            RightFoot.Size = UDim2.new(0, 38, 0, 9)
                            RightFoot.BorderColor3 = Color3.fromRGB(36, 36, 36)
                            RightFoot.Position = UDim2.new(0.497248918, 0, 0.918225944, 0)
                            RightFoot.BorderSizePixel = 2
                            RightFoot.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
                            RightFoot.TextColor3 = Color3.fromRGB(0, 0, 0)
                            RightFoot.Text = ""
                            RightFoot.TextSize = 14
                            RightFoot.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                        
                            RightUpperLeg.Name = "RightUpperLeg"
                            RightUpperLeg.Parent = R15
                            RightUpperLeg.Size = UDim2.new(0, 38, 0, 62)
                            RightUpperLeg.BorderColor3 = Color3.fromRGB(36, 36, 36)
                            RightUpperLeg.Position = UDim2.new(0.497248918, 0, 0.613031149, 0)
                            RightUpperLeg.BorderSizePixel = 2
                            RightUpperLeg.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
                            RightUpperLeg.TextColor3 = Color3.fromRGB(0, 0, 0)
                            RightUpperLeg.Text = ""
                            RightUpperLeg.TextSize = 14
                            RightUpperLeg.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                        
                            RightLowerLeg.Name = "RightLowerLeg"
                            RightLowerLeg.Parent = R15
                            RightLowerLeg.Size = UDim2.new(0, 38, 0, 32)
                            RightLowerLeg.BorderColor3 = Color3.fromRGB(36, 36, 36)
                            RightLowerLeg.Position = UDim2.new(0.497248918, 0, 0.814329863, 0)
                            RightLowerLeg.BorderSizePixel = 2
                            RightLowerLeg.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
                            RightLowerLeg.TextColor3 = Color3.fromRGB(0, 0, 0)
                            RightLowerLeg.Text = ""
                            RightLowerLeg.TextSize = 14
                            RightLowerLeg.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                            
                            R6.Name = "R6"
                            R6.Parent = BoneSelectorHolder
                            R6.Size = UDim2.new(0, 217, 0, 308)
                            R6.Visible = false
                            R6.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            R6.BackgroundTransparency = 1
                            R6.Position = UDim2.new(0.0262008738, 0, 0.0187500007, 0)
                            R6.BorderSizePixel = 0
                            R6.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                            
                            Head_2.Name = "Head"
                            Head_2.Parent = R6
                            Head_2.Size = UDim2.new(0, 76, 0, 68)
                            Head_2.BorderColor3 = Color3.fromRGB(36, 36, 36)
                            Head_2.Position = UDim2.new(0.322580636, 0, 0.058441557, 0)
                            Head_2.BorderSizePixel = 2
                            Head_2.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
                            Head_2.TextColor3 = Color3.fromRGB(0, 0, 0)
                            Head_2.Text = ""
                            Head_2.TextSize = 14
                            Head_2.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                            
                            LeftArm_2.Name = "Left Arm"
                            LeftArm_2.Parent = R6
                            LeftArm_2.Size = UDim2.new(0, 53, 0, 103)
                            LeftArm_2.BorderColor3 = Color3.fromRGB(36, 36, 36)
                            LeftArm_2.Position = UDim2.new(0.0783410147, 0, 0.27922079, 0)
                            LeftArm_2.BorderSizePixel = 2
                            LeftArm_2.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
                            LeftArm_2.TextColor3 = Color3.fromRGB(0, 0, 0)
                            LeftArm_2.Text = ""
                            LeftArm_2.TextSize = 14
                            LeftArm_2.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                            
                            RightArm_2.Name = "Right Arm"
                            RightArm_2.Parent = R6
                            RightArm_2.Size = UDim2.new(0, 53, 0, 103)
                            RightArm_2.BorderColor3 = Color3.fromRGB(36, 36, 36)
                            RightArm_2.Position = UDim2.new(0.672811031, 0, 0.27922079, 0)
                            RightArm_2.BorderSizePixel = 2
                            RightArm_2.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
                            RightArm_2.TextColor3 = Color3.fromRGB(0, 0, 0)
                            RightArm_2.Text = ""
                            RightArm_2.TextSize = 14
                            RightArm_2.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                            
                            RightLeg_2.Name = "Right Leg"
                            RightLeg_2.Parent = R6
                            RightLeg_2.Size = UDim2.new(0, 38, 0, 103)
                            RightLeg_2.BorderColor3 = Color3.fromRGB(36, 36, 36)
                            RightLeg_2.Position = UDim2.new(0.497695863, 0, 0.613636374, 0)
                            RightLeg_2.BorderSizePixel = 2
                            RightLeg_2.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
                            RightLeg_2.TextColor3 = Color3.fromRGB(0, 0, 0)
                            RightLeg_2.Text = ""
                            RightLeg_2.TextSize = 14
                            RightLeg_2.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                            
                            LeftLeg_2.Name = "Left Leg"
                            LeftLeg_2.Parent = R6
                            LeftLeg_2.Size = UDim2.new(0, 38, 0, 103)
                            LeftLeg_2.BorderColor3 = Color3.fromRGB(36, 36, 36)
                            LeftLeg_2.Position = UDim2.new(0.322580636, 0, 0.613636374, 0)
                            LeftLeg_2.BorderSizePixel = 2
                            LeftLeg_2.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
                            LeftLeg_2.TextColor3 = Color3.fromRGB(0, 0, 0)
                            LeftLeg_2.Text = ""
                            LeftLeg_2.TextSize = 14
                            LeftLeg_2.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                            
                            Torso_3.Name = "Torso"
                            Torso_3.Parent = R6
                            Torso_3.Size = UDim2.new(0, 76, 0, 103)
                            Torso_3.BorderColor3 = Color3.fromRGB(36, 36, 36)
                            Torso_3.Position = UDim2.new(0.322580636, 0, 0.27922079, 0)
                            Torso_3.BorderSizePixel = 2
                            Torso_3.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
                            Torso_3.TextColor3 = Color3.fromRGB(0, 0, 0)
                            Torso_3.Text = ""
                            Torso_3.TextSize = 14
                            Torso_3.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                            
                            HumanoidRootPart_2.Name = "HumanoidRootPart"
                            HumanoidRootPart_2.Parent = R6
                            HumanoidRootPart_2.Size = UDim2.new(0, 31, 0, 30)
                            HumanoidRootPart_2.BorderColor3 = Color3.fromRGB(36, 36, 36)
                            HumanoidRootPart_2.Position = UDim2.new(0.42396313, 0, 0.373376638, 0)
                            HumanoidRootPart_2.BorderSizePixel = 2
                            HumanoidRootPart_2.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
                            HumanoidRootPart_2.TextColor3 = Color3.fromRGB(0, 0, 0)
                            HumanoidRootPart_2.Text = ""
                            HumanoidRootPart_2.TextSize = 14
                            HumanoidRootPart_2.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                        
                            local function R15_function()
                                for _, bodypart in pairs(R15:GetChildren()) do
                                    bodypart.AutoButtonColor = false
                        
                                    local name = bodypart.Name
                                    --if string.find(name, "frame") then continue end
                        
                                    local self_conn = nil
                                    local function ButtonClick()
                                        tweenService:Create(bodypart, TweenInfo.new(0.2), { BackgroundColor3 = theme.accent }):Play()
                                        BoneSelector["FValues"][name].Selected = true
                        
                                        if not self_conn then
                                            self_conn = theme_event.Event:Connect(function ()
                                                if BoneSelector["FValues"][name].Selected then
                                                    bodypart.BackgroundColor3 = theme.accent
                                                end
                                            end)
                                        end
                                    end
                        
                                    local function ButtonUnClick()
                                        tweenService:Create(bodypart, TweenInfo.new(0.2), { BackgroundColor3 = Color3FromRGB(27, 27, 27) }):Play()
                                        BoneSelector["FValues"][name].Selected = false
                        
                                        if self_conn then
                                            self_conn:Disconnect(); self_conn = nil
                                        end
                                    end
                        
                                    bodypart.MouseButton1Click:Connect(function ()
                                        BoneSelectorOptions:Set(name)
                                    end)
                        
                                    BoneSelector["FValues"][name] = {
                                        Click = ButtonClick,
                                        UnClick = ButtonUnClick,
                                        Selected = false,
                                    }
                                end
                            end
                        
                            local function R6_FUNCTION()
                                for _, bodypart in pairs(R6:GetChildren()) do
                                    local name = bodypart.Name
                        
                                    local self_conn = nil
                                    local function ButtonClick()
                                        bodypart.BackgroundColor3 = theme.accent
                                        BoneSelector["FValues"][name].Selected = true
                        
                                        if not self_conn then
                                            self_conn = theme_event.Event:Connect(function ()
                                                if BoneSelector["FValues"][name].Selected then
                                                    bodypart.BackgroundColor3 = theme.accent
                                                end
                                            end)
                                        end
                                    end
                        
                                    local function ButtonUnClick()
                                        bodypart.BackgroundColor3 = Color3FromRGB(27, 27, 27)
                                        BoneSelector["FValues"][name].Selected = false
                        
                                        if self_conn then
                                            self_conn:Disconnect(); self_conn = nil
                                        end
                                    end
                        
                                    bodypart.MouseButton1Click:Connect(function ()
                                        BoneSelectorOptions:Set(name)
                                    end)
                        
                                    BoneSelector["FValues"][name] = {
                                        Click = ButtonClick,
                                        UnClick = ButtonUnClick,
                                        Selected = false,
                                    }
                        
                        
                                end
                            end
                        
                            R15_function()
                        
                            function BoneSelectorOptions:Update()
                                for _, v in pairs(BoneSelector.FValues) do
                                    if BoneSelector.FValue == _ then
                                        v.Click()
                                    else
                                        v.UnClick()
                                    end
                                end
                        
                                return BoneSelector
                            end
                        
                            function BoneSelectorOptions:Set(value)
                                if BoneSelectorOptions.Multi then
                                    if type(value) == "table" then
                                        BoneSelectorOptions:Refresh()
                            
                                        for _,v in pairs(value) do
                                            if not table.find(BoneSelector.FValue, _) then
                                                BoneSelectorOptions:Set(v)
                                            end
                                        end
                            
                                        local RemovedButtons = {}
                            
                                        for _,v in pairs(BoneSelector.FValue) do
                                            if not table.find(value, _) then
                                                RemovedButtons[#RemovedButtons + 1] = v
                                            end
                                        end
                            
                                        pcall(BoneSelectorOptions.Callback, BoneSelector.FValue)
                                        UserInterface.Flags[BoneSelectorOptions.Flag] = BoneSelector.FValue
                                        UserInterface.Flags[BoneSelectorOptions.Flag .. "f"] = { [1] = function(value)  end, [2] = function(value) BoneSelectorOptions:Set(value) end }
                            
                                        return
                                    end
                            
                                    local Index = table.find(BoneSelector.FValue, value)
                            
                                    if Index then
                                        table.remove(BoneSelector.FValue, Index)
                            
                                        BoneSelector.FValues[value].UnClick()
                            
                                        pcall(BoneSelectorOptions.Callback, BoneSelector.FValue)
                                        UserInterface.Flags[BoneSelectorOptions.Flag] = BoneSelector.FValue
                                        UserInterface.Flags[BoneSelectorOptions.Flag .. "f"] = { [1] = function() BoneSelectorOptions:Refresh() end, [2] = function(value) BoneSelectorOptions:Set(value) end }
                                    else
                                        BoneSelector.FValue[#BoneSelector.FValue + 1] = value
                            
                                        BoneSelector.FValues[value].Click()
                            
                                        pcall(BoneSelectorOptions.Callback, BoneSelector.FValue)
                                        UserInterface.Flags[BoneSelectorOptions.Flag] = BoneSelector.FValue
                                        UserInterface.Flags[BoneSelectorOptions.Flag .. "f"] = { [1] = function() BoneSelectorOptions:Refresh() end, [2] = function(value) BoneSelectorOptions:Set(value) end }
                                    end
                                else
                                    BoneSelector.FValue = value
                        
                                    for _, v in pairs(BoneSelector.FValues) do
                                        v.UnClick()
                                    end
                                    BoneSelector["FValues"][BoneSelector.FValue].Click()
                        
                                    pcall(BoneSelectorOptions.Callback, BoneSelector.FValue)
                                    UserInterface.Flags[BoneSelectorOptions.Flag] = BoneSelector.FValue
                                    UserInterface.Flags[BoneSelectorOptions.Flag .. "f"] = { [1] = function() BoneSelectorOptions:Refresh() end, [2] = function(value) BoneSelectorOptions:Set(value) end }
                                end 
                            end
                        
                            function BoneSelectorOptions:GetValues()
                                return BoneSelector.FValue
                            end
                        
                            function BoneSelectorOptions:Refresh()
                                for i, v in next, BoneSelector.FValues do
                                    if v.UnClick then
                                        v.UnClick()
                                    end
                                end
                            end
                        
                            function BoneSelectorOptions:SetMulti(bool)
                                if BoneSelectorOptions.Multi == bool then return end
                                self:Refresh()
                                BoneSelectorOptions.Multi = bool
                                BoneSelector.FValue = bool and {} or ""
                            end
                        
                            UserInterface.ConfigFlags[BoneSelectorOptions.Flag] = function(state) BoneSelectorOptions:Set(state) end
                            increaseYSize(308)
                            return BoneSelectorOptions
                        end
                    end
                    do -- src/Lua/Interface/Components/Button.lua
                        function Options:Button(Configuration)
                            local ButtonOptions = {
                                title = Configuration.title or "button",
                                callback = Configuration.callback or function () end
                            }
                            
                            local Button = InstanceNew("TextButton")
                            local ButtonCorner = InstanceNew("UICorner")
                        
                            Button.Name = "Button"
                            Button.Parent = SectionColumnComponents
                            Button.BackgroundColor3 = Color3FromRGB(21, 21, 21)
                            Button.BorderColor3 = Color3FromRGB(0, 0, 0)
                            Button.BorderSizePixel = 0
                            Button.Size = UDim2New(0, 159, 0, 23)
                            Button.AutoButtonColor = false
                            Button.FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]])
                            Button.Text = ButtonOptions.title
                            Button.TextColor3 = Color3FromRGB(255, 255, 255)
                            Button.TextSize = 14
                            Button.TextStrokeTransparency = 0
                            Button.TextWrapped = true
                        
                            ButtonCorner.CornerRadius = UDim.new(0, 2)
                            ButtonCorner.Name = "ButtonCorner"
                            ButtonCorner.Parent = Button
                        
                            local ButtonStroke = InstanceNew("UIStroke", Button)
                            ButtonStroke["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border
                            ButtonStroke["Name"] = [[ButtonStroke]]
                            ButtonStroke["Color"] = Color3FromRGB(37, 37, 37)
                            
                            local Tweens = {
                                OnClick = function ()
                                    local ButtonTween, ButtonStrokeTween = 
                                    tweenService:Create(Button, TweenInfo.new(0), {BackgroundColor3 = Color3FromRGB(36, 36, 36)}),
                                    tweenService:Create(ButtonStroke, TweenInfo.new(0), {Color = Color3FromRGB(45, 43, 46)})
                                    ButtonTween:Play();ButtonStrokeTween:Play()
                                end,
                                OnHover = function ()
                                    local ButtonTween, ButtonStrokeTween = 
                                    tweenService:Create(Button, TweenInfo.new(0), {BackgroundColor3 = Color3FromRGB(28, 28, 28)}),
                                    tweenService:Create(ButtonStroke, TweenInfo.new(0), {Color = Color3FromRGB(36, 36, 36)})
                                    ButtonTween:Play();ButtonStrokeTween:Play()
                                end,
                                OnMouseLeave = function ()
                                    local ButtonTween, ButtonStrokeTween = 
                                    tweenService:Create(Button, TweenInfo.new(0), {BackgroundColor3 = Color3FromRGB(21, 21, 21)}),
                                    tweenService:Create(ButtonStroke, TweenInfo.new(0), {Color = Color3FromRGB(40, 40, 40)})
                                    ButtonTween:Play();ButtonStrokeTween:Play()
                                end
                            }
                        
                            local function OnClick()
                                Tweens.OnClick()
                                pcall(ButtonOptions.callback)
                        
                                TaskWait(0.1)
                                Tweens.OnHover()
                            end
                        
                            Button.MouseButton1Click:Connect(OnClick)
                            Button.MouseEnter:Connect(Tweens.OnHover)
                            Button.MouseLeave:Connect(Tweens.OnMouseLeave)
                        
                            increaseYSize(23)
                        end
                    end
                    do -- src/Lua/Interface/Components/Colorpicker.lua
                        function Options:Colorpicker(Configuration, ToggleOption)
                            local ColorpickerOptions = {
                                Title = Configuration.title or "colorpicker",
                                Default = Configuration.default or Color3FromRGB(255,255,255),
                                Transparency = Configuration.transparency or 0,
                                Callback = Configuration.callback or function() end,
                                Flag = UserInterface:GetNextFlag()
                            }
                        
                            local Colorpicker = {
                                TransparencyValue = 0,
                        		ColorValue = nil,
                        		HuePosition = 0,
                                SlidingSat = false,
                        		SlidingHue = false,
                        		SlidingAlpha = false,
                            }
                        
                            local ColorpickerHolder = InstanceNew("Frame")
                            local ColorpickerTitle = InstanceNew("TextLabel")
                            local ColorpickerButton = InstanceNew("TextButton")
                            local ColorpickerStatus = InstanceNew("Frame")
                            local ColorpickerInline = InstanceNew("Frame")
                            local CPInlineCorner = InstanceNew("UICorner")
                            local ColorpickerContent = InstanceNew("Frame")
                            local Accent = InstanceNew("Frame")
                            local HueBackground = InstanceNew("Frame")
                            local CPHueGradient = InstanceNew("UIGradient")
                            local HuePicker = InstanceNew("ImageLabel")
                            local TextButton = InstanceNew("TextButton")
                            local SaturationBackground = InstanceNew("Frame")
                            local SaturationImage = InstanceNew("ImageLabel")
                            local SaturationPicker = InstanceNew("ImageLabel")
                            local SaturationButton = InstanceNew("TextButton")
                            local TransparencyBackground = InstanceNew("Frame")
                            local TransparencyGradient = InstanceNew("UIGradient")
                            local TransparencyPicker = InstanceNew("ImageLabel")
                            local TransparencyButton = InstanceNew("TextButton")
                        
                            ColorpickerHolder.Name = tostring(math.random(1000, 16384))
                            ColorpickerHolder.Parent = ToggleOption == nil and SectionColumnComponents or ToggleOption
                            ColorpickerHolder.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                            ColorpickerHolder.BackgroundTransparency = 1.000
                            ColorpickerHolder.BorderColor3 = Color3FromRGB(0, 0, 0)
                            ColorpickerHolder.BorderSizePixel = 0
                            ColorpickerHolder.Size = UDim2New(0, 229, 0, 13)
                            
                            if ToggleOption == nil then
                                ColorpickerTitle.Name = "ColorpickerTitle"
                                ColorpickerTitle.Parent = ColorpickerHolder
                                ColorpickerTitle.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                                ColorpickerTitle.BackgroundTransparency = 1.000
                                ColorpickerTitle.BorderColor3 = Color3FromRGB(0, 0, 0)
                                ColorpickerTitle.BorderSizePixel = 0
                                ColorpickerTitle.Size = UDim2New(0, 216, 0, 13)
                                ColorpickerTitle.Font = Enum.Font.SourceSans
                                ColorpickerTitle.Text = ColorpickerOptions.Title
                                ColorpickerTitle.TextColor3 = Color3FromRGB(255, 255, 255)
                                ColorpickerTitle.TextSize = 14.000
                                ColorpickerTitle.TextXAlignment = Enum.TextXAlignment.Left 
                            end
                            
                            ColorpickerButton.Name = "ColorpickerButton"
                            ColorpickerButton.Parent = ColorpickerHolder
                            ColorpickerButton.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                            ColorpickerButton.BackgroundTransparency = 1.000
                            ColorpickerButton.BorderColor3 = Color3FromRGB(0, 0, 0)
                            ColorpickerButton.BorderSizePixel = 0
                            ColorpickerButton.Position = UDim2New(0.943231463, 0, 0, 0)
                            ColorpickerButton.Size = UDim2New(0, 13, 0, 13)
                            ColorpickerButton.Font = Enum.Font.SourceSans
                            ColorpickerButton.Text = ""
                            ColorpickerButton.TextColor3 = Color3FromRGB(0, 0, 0)
                            ColorpickerButton.TextSize = 14.000
                            
                            ColorpickerStatus.Name = "ColorpickerStatus"
                            ColorpickerStatus.Parent = ColorpickerHolder
                            ColorpickerStatus.BackgroundColor3 = Color3FromRGB(170, 170, 255)
                            ColorpickerStatus.BorderColor3 = Color3FromRGB(0, 0, 0)
                            ColorpickerStatus.BorderSizePixel = 0
                            ColorpickerStatus.Position = UDim2New(0.943231463, 0, 0, 0)
                            ColorpickerStatus.Size = UDim2New(0, 13, 0, 13)
                            
                            ColorpickerInline.Name = "ColorpickerInline"
                            ColorpickerInline.Parent = ColorpickerHolder
                            ColorpickerInline.BackgroundColor3 = Color3FromRGB(170, 170, 255)
                            ColorpickerInline.BackgroundTransparency = 1.000
                            ColorpickerInline.BorderColor3 = Color3FromRGB(0, 0, 0)
                            ColorpickerInline.BorderSizePixel = 0
                            ColorpickerInline.Position = UDim2New(0.943231463, 0, 0, 0)
                            ColorpickerInline.Size = UDim2New(0, 13, 0, 13)
                            ColorpickerInline.Visible = false
                            ColorpickerInline.ZIndex = 3
                            
                            CPInlineCorner.CornerRadius = UDim.new(0, 2)
                            CPInlineCorner.Name = "CPInlineCorner"
                            CPInlineCorner.Parent = ColorpickerInline
                        
                            local ColorpickerStatusCorner = InstanceNew("UICorner")
                            ColorpickerStatusCorner.CornerRadius = UDim.new(0, 4)
                            ColorpickerStatusCorner.Name = "ColorpickerStatusCorner"
                            ColorpickerStatusCorner.Parent = ColorpickerStatus
                            
                            ColorpickerContent.Name = "ColorpickerContent"
                            ColorpickerContent.Parent = ColorpickerInline
                            ColorpickerContent.BackgroundColor3 = Color3FromRGB(23, 23, 23)
                            ColorpickerContent.BorderColor3 = Color3FromRGB(0, 0, 0)
                            ColorpickerContent.Position = UDim2New(-9.46153831, 0, 0, 0)
                            ColorpickerContent.Size = UDim2New(0, 136, 0, 139)
                            ColorpickerContent.ZIndex = 3
                        
                            Accent.Name = "Accent"
                            Accent.Parent = ColorpickerContent
                            Accent.BackgroundColor3 = Color3FromRGB(168, 157, 159)
                            Accent.BorderColor3 = Color3FromRGB(0, 0, 0)
                            Accent.Size = UDim2New(1, 0, 0, 1)
                            
                            HueBackground.Name = "HueBackground"
                            HueBackground.Parent = ColorpickerContent
                            HueBackground.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                            HueBackground.BorderColor3 = Color3FromRGB(0, 0, 0)
                            HueBackground.BorderSizePixel = 0
                            HueBackground.Position = UDim2New(0.879000008, 0, 0.0680000037, 0)
                            HueBackground.Size = UDim2New(0, 9, 0, 106)
                            
                            CPHueGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3FromRGB(255, 0, 0)), ColorSequenceKeypoint.new(0.17, Color3FromRGB(255, 0, 255)), ColorSequenceKeypoint.new(0.33, Color3FromRGB(0, 0, 255)), ColorSequenceKeypoint.new(0.50, Color3FromRGB(0, 255, 255)), ColorSequenceKeypoint.new(0.67, Color3FromRGB(0, 255, 0)), ColorSequenceKeypoint.new(0.83, Color3FromRGB(255, 255, 0)), ColorSequenceKeypoint.new(1.00, Color3FromRGB(255, 0, 0))}
                            CPHueGradient.Rotation = 90
                            CPHueGradient.Name = "CPHueGradient"
                            CPHueGradient.Parent = HueBackground
                            
                            HuePicker.Name = "HuePicker"
                            HuePicker.Parent = HueBackground
                            HuePicker.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                            HuePicker.BackgroundTransparency = 1
                            HuePicker.BorderColor3 = Color3FromRGB(0, 0, 0)
                            HuePicker.BorderSizePixel = 0
                            HuePicker.Position = UDim2New(0, -4, 0, -2)
                            HuePicker.Size = UDim2New(0, 17, 0, 5)
                            HuePicker.Image = "rbxassetid://13900818694"
                            
                            TextButton.Parent = HueBackground
                            TextButton.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                            TextButton.BackgroundTransparency = 1.000
                            TextButton.BorderColor3 = Color3FromRGB(0, 0, 0)
                            TextButton.BorderSizePixel = 0
                            TextButton.Size = UDim2New(1, 0, 1, 0)
                            TextButton.Font = Enum.Font.SourceSans
                            TextButton.Text = ""
                            TextButton.TextColor3 = Color3FromRGB(0, 0, 0)
                            TextButton.TextSize = 14.000
                            
                            SaturationBackground.Name = "SaturationBackground"
                            SaturationBackground.Parent = ColorpickerContent
                            SaturationBackground.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                            SaturationBackground.BorderColor3 = Color3FromRGB(0, 0, 0)
                            SaturationBackground.Position = UDim2New(0.0661764741, 0, 0.0676691756, 0)
                            SaturationBackground.Size = UDim2New(0, 102, 0, 106)
                            
                            SaturationImage.Name = "SaturationImage"
                            SaturationImage.Parent = SaturationBackground
                            SaturationImage.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                            SaturationImage.BackgroundTransparency = 1.000
                            SaturationImage.BorderColor3 = Color3FromRGB(0, 0, 0)
                            SaturationImage.Size = UDim2New(1, 0, 1, 0)
                            SaturationImage.Image = "rbxassetid://13901004307"
                            
                            SaturationPicker.Name = "SaturationPicker"
                            SaturationPicker.Parent = SaturationBackground
                            SaturationPicker.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                            SaturationPicker.BackgroundTransparency = 1.000
                            SaturationPicker.BorderColor3 = Color3FromRGB(0, 0, 0)
                            SaturationPicker.Position = UDim2New(0, -1, 0, -1)
                            SaturationPicker.Size = UDim2New(0, 5, 0, 5)
                            SaturationPicker.Image = "rbxassetid://13900819741"
                            
                            SaturationButton.Name = "SaturationButton"
                            SaturationButton.Parent = SaturationBackground
                            SaturationButton.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                            SaturationButton.BackgroundTransparency = 1.000
                            SaturationButton.BorderColor3 = Color3FromRGB(0, 0, 0)
                            SaturationButton.BorderSizePixel = 0
                            SaturationButton.Size = UDim2New(1, 0, 1, 0)
                            SaturationButton.Font = Enum.Font.SourceSans
                            SaturationButton.Text = ""
                            SaturationButton.TextColor3 = Color3FromRGB(0, 0, 0)
                            SaturationButton.TextSize = 14.000
                            
                            TransparencyBackground.Name = "TransparencyBackground"
                            TransparencyBackground.Parent = ColorpickerContent
                            TransparencyBackground.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                            TransparencyBackground.BorderColor3 = Color3FromRGB(0, 0, 0)
                            TransparencyBackground.BorderSizePixel = 0
                            TransparencyBackground.Position = UDim2New(0.0441176482, 0, 0.880901992, 0)
                            TransparencyBackground.Size = UDim2New(0, 123, 0, 6)
                            
                            TransparencyGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3FromRGB(255, 255, 255)), ColorSequenceKeypoint.new(0.57, Color3FromRGB(150, 150, 150)), ColorSequenceKeypoint.new(1.00, Color3FromRGB(0, 0, 0))}
                            TransparencyGradient.Name = "TransparencyGradient"
                            TransparencyGradient.Parent = TransparencyBackground
                            
                            TransparencyPicker.Name = "TransparencyPicker"
                            TransparencyPicker.Parent = TransparencyBackground
                            TransparencyPicker.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                            TransparencyPicker.BackgroundTransparency = 1.000
                            TransparencyPicker.BorderColor3 = Color3FromRGB(0, 0, 0)
                            TransparencyPicker.BorderSizePixel = 0
                            TransparencyPicker.Position = UDim2New(0, -2, 0, -2)
                            TransparencyPicker.Size = UDim2New(0, 5, 0, 17)
                            TransparencyPicker.Image = "rbxassetid://14248606745"
                            
                            TransparencyButton.Name = "TransparencyButton"
                            TransparencyButton.Parent = TransparencyBackground
                            TransparencyButton.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                            TransparencyButton.BackgroundTransparency = 1.000
                            TransparencyButton.BorderColor3 = Color3FromRGB(0, 0, 0)
                            TransparencyButton.BorderSizePixel = 0
                            TransparencyButton.Size = UDim2New(1, 0, 1, 0)
                            TransparencyButton.Font = Enum.Font.SourceSans
                            TransparencyButton.Text = ""
                            TransparencyButton.TextColor3 = Color3FromRGB(0, 0, 0)
                            TransparencyButton.TextSize = 14.000
                        
                            for _, object in next, ColorpickerContent:GetDescendants() do
                                if object:IsA("UIGradient") then continue end
                        
                                if object.ZIndex then
                                    object.ZIndex = 3
                                end
                            end
                        
                            local Hue, Sat, Val = ColorpickerOptions.Default:ToHSV()
                        
                            local contentAnimations = {
                                Open = function ( self )
                                    ColorpickerContent.Visible = true
                                    ColorpickerInline.Visible = true
                        
                                    local ContentTween = tweenService:Create(ColorpickerContent, TweenInfo.new(0.15), { BackgroundTransparency = 0,  Position = UDim2New(-10.923, 0,0, 0) })
                                    ContentTween:Play()
                                    self:FadeIn()
                                end,
                                FadeIn = function ()
                                    for _, object in pairs( ColorpickerContent:GetDescendants() ) do
                                        if object:IsA("Frame") then
                                            tweenService:Create(object, TweenInfo.new(0.15), { BackgroundTransparency = 0 }):Play()
                                        elseif object:IsA("ImageLabel") then
                                            tweenService:Create(object, TweenInfo.new(0.15), { ImageTransparency = 0 }):Play()
                                        end
                                    end
                                end,
                                FadeOut = function ()
                                    for _, object in pairs( ColorpickerContent:GetDescendants() ) do
                                        if object:IsA("Frame") then
                                            tweenService:Create(object, TweenInfo.new(0.15), { BackgroundTransparency = 1 }):Play()
                                        elseif object:IsA("ImageLabel") then
                                            tweenService:Create(object, TweenInfo.new(0.15), { ImageTransparency = 1 }):Play()
                                        end
                                    end
                                end
                            }
                        
                            -- to those who code, they will understand why I did this.
                            function contentAnimations:Close()
                                local ContentTween = tweenService:Create(ColorpickerContent, TweenInfo.new(0.15), { BackgroundTransparency = 1, Position = UDim2New(-9.46153831, 0,0, 0) })
                                ContentTween:Play()
                        
                                contentAnimations:FadeOut()
                        
                                TaskWait(0.15)
                        
                                ColorpickerContent.Visible = false
                                ColorpickerInline.Visible = false
                            end
                        
                            local function FromRGBA (r, g, b)
                                local rgb = Color3FromRGB(r, g, b)
                            
                                return rgb
                            end
                        
                            function ColorpickerOptions:Set(color, trans, ignore)
                                if not ColorpickerOptions.Transparency then
                                    Colorpicker.TransparencyValue = 1
                                end
                        
                                trans = trans or Colorpicker.TransparencyValue
                        
                                if typeof(color) == "table" then
                                    local OldColor = color
                        
                                    color = Color3.fromHex(OldColor[1])
                                    --trans = OldColor[2]
                                end
                        
                                Hue, Sat, Val = color:ToHSV()
                        
                                Colorpicker.ColorValue = color
                                Colorpicker.TransparencyValue = trans
                        
                                SaturationBackground.BackgroundColor3 = Color3.fromHSV(Colorpicker.HuePosition, 1, 1)
                                
                                ColorpickerStatus.BackgroundColor3 = color
                                
                                if not ignore then
                                    SaturationPicker.Position = UDim2New(0, math.clamp(Sat * SaturationBackground.AbsoluteSize.X, 0, SaturationBackground.AbsoluteSize.X - 3), 0, math.clamp(SaturationBackground.AbsoluteSize.Y - Val * SaturationBackground.AbsoluteSize.Y, 0, SaturationBackground.AbsoluteSize.Y - 3))
                                    Colorpicker.HuePosition = Hue
                                    HuePicker.Position = UDim2New(0, -2, 1 - Hue, -2)
                                end
                                pcall(ColorpickerOptions.Callback, FromRGBA(color.R * 255, color.G * 255, color.B * 255), trans)
                                UserInterface.Flags[ColorpickerOptions.Flag] = FromRGBA(color.R * 255, color.G * 255, color.B * 255)
                            end
                            ColorpickerOptions:Set(ColorpickerOptions.Default, ColorpickerOptions.Transparency)
                            
                            local function SlideSaturation(input)
                                local SizeX = math.clamp((input.Position.X - SaturationBackground.AbsolutePosition.X) / SaturationBackground.AbsoluteSize.X, 0, 1)
                                local SizeY = 1 - math.clamp((input.Position.Y - SaturationBackground.AbsolutePosition.Y) / SaturationBackground.AbsoluteSize.Y, 0, 1)
                                local PosY = math.clamp(((input.Position.Y - SaturationBackground.AbsolutePosition.Y) / SaturationBackground.AbsoluteSize.Y) * SaturationBackground.AbsoluteSize.Y, 0, SaturationBackground.AbsoluteSize.Y - 3)
                                local PosX = math.clamp(((input.Position.X - SaturationBackground.AbsolutePosition.X) / SaturationBackground.AbsoluteSize.X) * SaturationBackground.AbsoluteSize.X, 0, SaturationBackground.AbsoluteSize.X - 3)
                                
                                SaturationPicker.Position = UDim2New(0, PosX, 0, PosY)
                                ColorpickerOptions:Set(Color3.fromHSV(Colorpicker.HuePosition, SizeX, SizeY), Colorpicker.TransparencyValue, true)
                            end
                        
                            SaturationButton.MouseButton1Down:Connect(function (input)
                                Colorpicker.SlidingSat = true
                        
                                SlideSaturation({ Position = game.UserInputService:GetMouseLocation() - Vector2New(0, 36) })
                            end)
                        
                            local function SlideHue(input)
                                local SizeY = 1 - math.clamp((input.Position.Y - HueBackground.AbsolutePosition.Y) / HueBackground.AbsoluteSize.Y, 0, 1)
                                local PosY = math.clamp(((input.Position.Y - HueBackground.AbsolutePosition.Y) / HueBackground.AbsoluteSize.Y) * HueBackground.AbsoluteSize.Y, 0, HueBackground.AbsoluteSize.Y - 2)
                            
                                HuePicker.Position = UDim2New(0, -2, 0, PosY - 2)
                                Colorpicker.HuePosition = SizeY
                        
                                ColorpickerOptions:Set(Color3.fromHSV(SizeY, Sat, Val), Colorpicker.TransparencyValue, true)
                            end
                        
                            TextButton.MouseButton1Down:Connect(function (input)
                                Colorpicker.SlidingHue = true
                        
                                SlideHue({ Position = game.UserInputService:GetMouseLocation() - Vector2New(0, 36) })
                            end)
                        
                            local function SlideTrans(input)
                                local SizeX = 1 - math.clamp((input.Position.X - TransparencyBackground.AbsolutePosition.X) / TransparencyBackground.AbsoluteSize.X, 0, 1)
                                local PosX = math.clamp(((input.Position.X - TransparencyBackground.AbsolutePosition.X) / TransparencyBackground.AbsoluteSize.X) * TransparencyBackground.AbsoluteSize.X, 0, TransparencyBackground.AbsoluteSize.X - 3)
                        
                                TransparencyPicker.Position = UDim2New(0, PosX, 0, -2)
                        
                                ColorpickerOptions:Set(Color3.fromHSV(Colorpicker.HuePosition, Sat, Val), SizeX, true)
                            end
                        
                            TransparencyButton.MouseButton1Down:Connect(function (input)
                                Colorpicker.SlidingAlpha = true
                        
                                SlideTrans({ Position = game.UserInputService:GetMouseLocation() - Vector2New(0, 36) })
                            end)
                        
                            inputService.InputEnded:Connect(function (input)
                                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                                    Colorpicker.SlidingSat, Colorpicker.SlidingHue, Colorpicker.SlidingAlpha = false, false, false
                                end
                            end)
                        
                            inputService.InputChanged:Connect(function (input)
                                if input.UserInputType == Enum.UserInputType.MouseMovement then
                                    if Colorpicker.SlidingSat then
                                        SlideSaturation(input)
                                    elseif Colorpicker.SlidingHue then
                                        SlideHue(input)
                                    elseif Colorpicker.SlidingAlpha then
                                        SlideTrans(input)
                                    end
                                end
                            end)
                        
                            ColorpickerButton.MouseButton1Click:Connect(function ()
                                if UserInterface.Popup and UserInterface.Popup.ID ~= ColorpickerHolder.Name then
                                    UserInterface:RemovePopups()
                                end
                                if ColorpickerInline.Visible then
                                    contentAnimations:Close()
                                else
                                    UserInterface:NewPopup({ Remove = contentAnimations.Close, ID = ColorpickerHolder.Name })
                                    contentAnimations:Open()
                                end
                            end)
                        
                            increaseYSize(13)
                        
                            UserInterface.ConfigFlags[ColorpickerOptions.Flag] = function(value) ColorpickerOptions:Set(value) end
                        
                            return ColorpickerOptions
                        end
                    end
                    do -- src/Lua/Interface/Components/Dropdowns.lua
                        function Options:Dropdown(Configuration)
                            local DropdownOptions = {
                                Title = Configuration.title or "",
                                Content = Configuration.values or {},
                                Default = Configuration.default or "-",
                                Multi = Configuration.multi or false,
                                Callback = Configuration.callback or function () end,
                                Flag = UserInterface:GetNextFlag()
                            }
                        
                            local Dropdown = {
                                FValues = {},
                                FValue = DropdownOptions.Multi and {} or "",
                            }
                        
                            local DropdownHolder = InstanceNew("Frame")
                            local DropdownTitle = InstanceNew("TextLabel")
                        
                            DropdownHolder.Name = tostring(math.random(100, 16030))
                            DropdownHolder.Parent = SectionColumnComponents
                            DropdownHolder.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                            DropdownHolder.BackgroundTransparency = 1.000
                            DropdownHolder.BorderColor3 = Color3FromRGB(0, 0, 0)
                            DropdownHolder.BorderSizePixel = 0
                            DropdownHolder.Size = UDim2New(0, 229, 0, 40)
                            
                            DropdownTitle.Name = "DropdownTitle"
                            DropdownTitle.Parent = DropdownHolder
                            DropdownTitle.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                            DropdownTitle.BackgroundTransparency = 1.000
                            DropdownTitle.BorderColor3 = Color3FromRGB(0, 0, 0)
                            DropdownTitle.BorderSizePixel = 0
                            DropdownTitle.Size = UDim2New(0, 164, 0, 13)
                            DropdownTitle.Font = Enum.Font.SourceSans
                            DropdownTitle.Text = DropdownOptions.Title
                            DropdownTitle.TextColor3 = Color3FromRGB(255, 255, 255)
                            DropdownTitle.TextSize = 14.000
                            DropdownTitle.TextXAlignment = Enum.TextXAlignment.Left
                        
                            local xcxcxcxcxc = InstanceNew("UIListLayout", DropdownHolder)
                            xcxcxcxcxc["Padding"] = UDim.new(0, 5)
                            xcxcxcxcxc["SortOrder"] = Enum.SortOrder.LayoutOrder
                            xcxcxcxcxc["Name"] = [[ColumnListLayout]]
                            
                            local OpenButton = InstanceNew("TextButton")
                        	local OpenButtonCorner = InstanceNew("UICorner")
                        	local OpenButtonStroke = InstanceNew("UIStroke")
                        	local DropdownImage = InstanceNew("ImageLabel")
                        	local DropdownText = InstanceNew("TextLabel")
                        
                            OpenButton.Name = "OpenButton"
                            OpenButton.Parent = DropdownHolder
                            OpenButton.ZIndex = 2
                            OpenButton.Size = UDim2New(0, 230, 0, 22)
                            OpenButton.BorderColor3 = Color3FromRGB(34, 34, 34)
                            OpenButton.Position = UDim2New(0, 0, 0.576923072, 0)
                            OpenButton.BackgroundColor3 = Color3FromRGB(21, 21, 21)
                            OpenButton.AutoButtonColor = false
                            OpenButton.TextColor3 = Color3FromRGB(255, 255, 255)
                            OpenButton.Text = ""
                            OpenButton.TextXAlignment = Enum.TextXAlignment.Left
                            OpenButton.TextSize = 14
                            OpenButton.TextTruncate = Enum.TextTruncate.AtEnd
                            OpenButton.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                            
                            OpenButtonCorner.Name = "OpenButtonCorner"
                            OpenButtonCorner.Parent = OpenButton
                            OpenButtonCorner.CornerRadius = UDim.new(0, 3)
                            
                            OpenButtonStroke.Name = "OpenButtonStroke"
                            OpenButtonStroke.Parent = OpenButton
                            OpenButtonStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
                            OpenButtonStroke.Color = Color3FromRGB(15, 15, 15)
                            
                            DropdownImage.Name = "DropdownImage"
                            DropdownImage.Parent = OpenButton
                            DropdownImage.ZIndex = 3
                            DropdownImage.Size = UDim2New(0, 9, 0, 6)
                            DropdownImage.BorderColor3 = Color3FromRGB(0, 0, 0)
                            DropdownImage.BackgroundTransparency = 1
                            DropdownImage.Position = UDim2New(0.939999938, 0, 0.342727214, 0)
                            DropdownImage.BorderSizePixel = 0
                            DropdownImage.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                            DropdownImage.Image = "rbxassetid://17830630301"
                            
                            DropdownText.Name = "DropdownText"
                            DropdownText.Parent = OpenButton
                            DropdownText.ZIndex = 3
                            DropdownText.Size = UDim2New(0, 204, 0, 22)
                            DropdownText.BorderColor3 = Color3FromRGB(0, 0, 0)
                            DropdownText.BackgroundTransparency = 1
                            DropdownText.Position = UDim2New(0.0130434781, 0, 0, 0)
                            DropdownText.BorderSizePixel = 0
                            DropdownText.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                            DropdownText.TextColor3 = Color3FromRGB(255, 255, 255)
                            DropdownText.Text = DropdownOptions.Default
                            DropdownText.TextXAlignment = Enum.TextXAlignment.Left
                            DropdownText.TextSize = 14
                            DropdownText.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                            DropdownText.TextTruncate = "AtEnd"
                        
                            local Inline = InstanceNew("Frame")
                            local InlineCorner = InstanceNew("UICorner")
                            local InlineStroke = InstanceNew("UIStroke")
                            local InlineList = InstanceNew("UIListLayout")
                        
                            Inline.Name = "Inline"
                            Inline.Parent = OpenButton
                            Inline.Size = UDim2New(0, 229, 0, 0)
                            Inline.BorderColor3 = Color3FromRGB(0, 0, 0)
                            Inline.Position = UDim2New(0, 0, 1, 0)
                            Inline.BorderSizePixel = 0
                            Inline.BackgroundColor3 = Color3FromRGB(15, 15, 15)
                            Inline.Visible = false
                            Inline.ZIndex = 3
                            
                            InlineCorner.Name = "InlineCorner"
                            InlineCorner.Parent = Inline
                            InlineCorner.CornerRadius = UDim.new(0, 3)
                            
                            InlineStroke.Name = "InlineStroke"
                            InlineStroke.Parent = Inline
                            InlineStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
                            InlineStroke.Color = Color3FromRGB(37, 37, 37)
                            
                            InlineList.Name = "InlineList"
                            InlineList.Parent = Inline
                        
                            local contentAnimations = {
                                Open = function ( self )
                                    Inline.Visible = true
                        
                                    local ImageRotation = tweenService:Create(DropdownImage, TweenInfo.new(0.15), { Rotation = 180 })
                                    ImageRotation:Play()
                        
                                    local ContentTween = tweenService:Create(Inline, TweenInfo.new(0.15), { BackgroundTransparency = 0 })
                                    ContentTween:Play()
                                    self:FadeIn()
                                end,
                                FadeIn = function ()
                                    for _, object in pairs( Inline:GetDescendants() ) do
                                        if object:IsA("Frame") then
                                            tweenService:Create(object, TweenInfo.new(0.15), { BackgroundTransparency = 0 }):Play()
                                        elseif object:IsA("TextButton") then
                                            tweenService:Create(object, TweenInfo.new(0.15), { TextTransparency = 0 }):Play()
                                        elseif object:IsA("UIStroke") then
                                            tweenService:Create(object, TweenInfo.new(0.15), { Transparency = 0 }):Play()
                                        elseif object:IsA("TextLabel") then
                                            tweenService:Create(object, TweenInfo.new(0.15), { TextTransparency = 0 }):Play()
                                        end
                                    end
                                end,
                                FadeOut = function ()
                                    for _, object in pairs( Inline:GetDescendants() ) do
                                        if object:IsA("Frame") then
                                            tweenService:Create(object, TweenInfo.new(0.15), { BackgroundTransparency = 1 }):Play()
                                        elseif object:IsA("TextButton") then
                                            tweenService:Create(object, TweenInfo.new(0.15), { TextTransparency = 1 }):Play()
                                        elseif object:IsA("TextLabel") then
                                            tweenService:Create(object, TweenInfo.new(0.15), { TextTransparency = 1 }):Play()
                                        elseif object:IsA("UIStroke") then
                                            tweenService:Create(object, TweenInfo.new(0.15), { Transparency = 1 }):Play()
                                        end
                                    end
                                end
                            }
                            
                            function contentAnimations:Close()
                                local ContentTween = tweenService:Create(Inline, TweenInfo.new(0.15), { BackgroundTransparency = 1 })
                                ContentTween:Play()
                        
                                local ImageRotation = tweenService:Create(DropdownImage, TweenInfo.new(0.15), { Rotation = 0 })
                                ImageRotation:Play()
                        
                                contentAnimations:FadeOut()
                        
                                TaskWait(0.15)
                        
                                Inline.Visible = false
                            end
                        
                            local Count = 0
                        
                            function Dropdown:CreateValue(name)
                                if not Dropdown.FValues[name] then
                                    local Objects = {}
                        
                                    local DropdownButton = InstanceNew("TextButton")
                                    local DBStroke = InstanceNew("UIStroke")
                                    local DBCorner = InstanceNew("UICorner")
                                    local DBName = InstanceNew("TextLabel")
                        
                                    DropdownButton.Name = "DropdownButton"
                                    DropdownButton.Parent = Inline
                                    DropdownButton.Size = UDim2.new(1, 0, 0, 14)
                                    DropdownButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                    DropdownButton.BackgroundTransparency = 1
                                    DropdownButton.Position = UDim2.new(0.0131004369, 0, 0, 0)
                                    DropdownButton.BorderSizePixel = 0
                                    DropdownButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                    DropdownButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                                    DropdownButton.Text = ""
                                    DropdownButton.TextXAlignment = Enum.TextXAlignment.Left
                                    DropdownButton.TextSize = 14
                                    DropdownButton.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                                    DropdownButton.TextTransparency = 1
                                    DropdownButton.ZIndex = 4
                        
                                    DBStroke.Name = "DBStroke"
                                    DBStroke.Parent = DropdownButton
                                    DBStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
                                    DBStroke.Color = Color3.fromRGB(24, 24, 24)
                                    
                                    DBCorner.Name = "DBCorner"
                                    DBCorner.Parent = DropdownButton
                                    DBCorner.CornerRadius = UDim.new(0, 3)
                                    
                                    DBName.Name = "DBName"
                                    DBName.Parent = DropdownButton
                                    DBName.Size = UDim2.new(0, 226, 1, 0)
                                    DBName.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                    DBName.BackgroundTransparency = 1
                                    DBName.Position = UDim2.new(0.0131004369, 0, 0, 0)
                                    DBName.BorderSizePixel = 0
                                    DBName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                    DBName.TextColor3 = Color3.fromRGB(129, 129, 127)
                                    DBName.TextXAlignment = Enum.TextXAlignment.Left
                                    DBName.TextSize = 14
                                    DBName.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                                    DBName.Text = name
                                    DBName.ZIndex = 4
                        
                                    Objects.Name = DropdownButton
                        
                                    Inline.Size += UDim2.new(0, 0, 0, 14)
                        
                                    local function Click()
                                        DBName.TextColor3 = Color3.fromRGB(168, 157, 159)
                                        Dropdown.FValues[name].Selected = true
                                    end
                        
                                    local function Unclick()
                                        DBName.TextColor3 = Color3.fromRGB(129, 129, 127)
                                        Dropdown.FValues[name].Selected = false
                                    end
                        
                                    DropdownButton.MouseButton1Down:Connect(function ()
                                        Dropdown:Set(name)
                                    end)
                                    
                                    Count += 1
                        
                                    Dropdown.FValues[name] = {
                                        Click = Click,
                                        Unclick = Unclick,
                                        Objects = Objects,
                                        Selected = false,
                                    }
                        
                                    theme_event.Event:Connect(function ()
                                        if Dropdown["FValues"][name].Selected then
                                            DBName.TextColor3 = theme.accent
                                        end
                                    end)
                                end
                        
                                return Dropdown
                            end
                        
                            function Dropdown:Update()
                                for _, v in pairs(Dropdown.FValues) do
                                    if Dropdown.FValue == _ then
                                        v.Click()
                                    else
                                        v.Unclick()
                                    end
                                end
                        
                                return Dropdown
                            end
                        
                            function Dropdown:Display()
                                if DropdownOptions.Multi then
                                    local CurrentText = {}
                        
                                    if #Dropdown.FValue > 0 then
                                        for _,v in pairs(Dropdown.FValue) do
                                            CurrentText[#CurrentText + 1] = v
                        
                                            local Text = table.concat(CurrentText, ", ")
                                            DropdownText.Text = Text
                                        end
                                    else
                                        DropdownText.Text = "-"
                                    end
                                else
                                    DropdownText.Text = Dropdown.FValue ~= "" and Dropdown.FValue or "-"
                                end
                        
                                return Dropdown
                            end
                        
                            function Dropdown:Set(value)
                                if DropdownOptions.Multi then
                                    if typeof(value) == "table" then
                                        for _,v in pairs(value) do
                                            if not table.find(Dropdown.FValue, _) then
                                                Dropdown:Set(v)
                                            end
                                        end
                        
                                        local RemovedButtons = {}
                        
                                        for _,v in pairs(Dropdown.FValue) do
                                            if not table.find(value, _) then
                                                RemovedButtons[#RemovedButtons + 1] = v
                                            end
                                        end
                        
                                        pcall(DropdownOptions.Callback, Dropdown.FValue)
                                        UserInterface.Flags[DropdownOptions.Flag] = Dropdown.FValue
                                        UserInterface.Flags[DropdownOptions.Flag .. "f"] = { [1] = function(value) Dropdown:Refresh(value) end, [2] = function(value) Dropdown:Set(value) end }
                        
                                        return
                                    end
                        
                                    local Index = table.find(Dropdown.FValue, value)
                        
                                    if Index then
                                        table.remove(Dropdown.FValue, Index)
                        
                                        Dropdown:Display()
                        
                                        Dropdown.FValues[value].Unclick()
                        
                                        pcall(DropdownOptions.Callback, Dropdown.FValue)
                                        UserInterface.Flags[DropdownOptions.Flag] = Dropdown.FValue
                                        UserInterface.Flags[DropdownOptions.Flag .. "f"] = { [1] = function(value) Dropdown:Refresh(value) end, [2] = function(value) Dropdown:Set(value) end }
                                    else
                                        Dropdown.FValue[#Dropdown.FValue + 1] = value
                        
                                        Dropdown:Display()
                        
                                        Dropdown.FValues[value].Click()
                        
                                        pcall(DropdownOptions.Callback, Dropdown.FValue)
                                        UserInterface.Flags[DropdownOptions.Flag] = Dropdown.FValue
                                        UserInterface.Flags[DropdownOptions.Flag .. "f"] = { [1] = function(value) Dropdown:Refresh(value) end, [2] = function(value) Dropdown:Set(value) end }
                                    end
                                else
                                    Dropdown.FValue = value
                        
                                    self:Update()
                        
                                    Dropdown:Display()
                                    pcall(DropdownOptions.Callback, Dropdown.FValue)
                                    UserInterface.Flags[DropdownOptions.Flag] = Dropdown.FValue
                                    UserInterface.Flags[DropdownOptions.Flag .. "f"] = { [1] = function(value) Dropdown:Refresh(value) end, [2] = function(value) Dropdown:Set(value) end }
                                end
                        
                                return Dropdown
                            end
                        
                            function Dropdown:Refresh(tbl)
                                for _,v in pairs(Dropdown.FValues) do
                                    v.Objects.Name:Destroy()
                                    v = nil
                                end
                        
                                Inline.Size = UDim2New(0, 229, 0, 0)
                                table.clear(Dropdown.FValues)
                        
                                if DropdownOptions.Multi then
                                    table.clear(Dropdown.FValue)
                                    Count = 0
                        
                                    for _,v in pairs(tbl) do
                                        Dropdown:CreateValue(v)
                                    end
                        
                                    Dropdown:Display()
                        
                                    pcall(DropdownOptions.Callback, Dropdown.FValue)
                                    UserInterface.Flags[DropdownOptions.Flag] = Dropdown.FValue
                                    UserInterface.Flags[DropdownOptions.Flag .. "f"] = { [1] = function(value) Dropdown:Refresh(value) end, [2] = function(value) Dropdown:Set(value) end }
                                else
                                    Count = 0
                        
                                    for _,v in pairs(tbl) do
                                        Dropdown:CreateValue(v)
                                    end
                        
                                    Dropdown.FValue = nil
                        
                                    Dropdown:Update()
                                    Dropdown:Display()
                        
                                    pcall(DropdownOptions.Callback, Dropdown.FValue)
                                    UserInterface.Flags[DropdownOptions.Flag] = Dropdown.FValue
                                    UserInterface.Flags[DropdownOptions.Flag .. "f"] = { [1] = function(value) Dropdown:Refresh(value) end, [2] = function(value) Dropdown:Set(value) end }
                                end
                        
                                for _, v in pairs(tbl) do
                                    Dropdown:CreateValue(v)
                                end
                            
                                Dropdown:Set(DropdownOptions.Default)
                        
                                return Dropdown
                            end
                        
                            for _, v in pairs(DropdownOptions.Content) do
                                Dropdown:CreateValue(v)
                            end
                        
                            Dropdown:Set(DropdownOptions.Default)
                        
                            OpenButton.MouseButton1Click:Connect(function ()
                                if UserInterface.Popup and UserInterface.Popup.ID ~= DropdownHolder.Name then
                                    UserInterface:RemovePopups()
                                end
                                if Inline.Visible then
                                    contentAnimations:Close()
                                    Inline.ZIndex = 3
                                else
                                    UserInterface:NewPopup({ Remove = contentAnimations.Close, ID = DropdownHolder.Name })
                                    Inline.ZIndex = 4
                                    contentAnimations:Open()
                                end
                            end)
                        
                            UserInterface.ConfigFlags[DropdownOptions.Flag] = function(state) Dropdown:Set(state) end
                        
                            increaseYSize(40)
                            return DropdownOptions, Dropdown
                        end
                    end
                    do -- src/Lua/Interface/Components/Keybind.lua
                        function Options:Keybind(Configuration, toggle)
                            
                            local KeybindOptions = {
                                Title = Configuration.title or "",
                                Mode = Configuration.mode or "Toggle",
                                Key = Configuration.key or "",
                                Callback = Configuration.callback or function() end,
                                KeybindsList = Configuration.keybindlist or false,
                                KeybindListName = Configuration.keybindname or self.Title,
                                Flag = UserInterface:GetNextFlag()
                            }
                        
                            local Keybind = {
                                FMode = KeybindOptions.Mode,
                                FKey = KeybindOptions.Key,
                                Toggled = false,
                                Picking = false,
                                Modes = {},
                            }
                        
                            local KeybindHolder = InstanceNew("Frame")
                            local KeybindButton = InstanceNew("TextButton")
                        
                            KeybindHolder.Name = tostring(math.random(1000, 16384))
                            KeybindHolder.Parent = toggle == nil and SectionColumnComponents or toggle
                            KeybindHolder.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                            KeybindHolder.BackgroundTransparency = 1.000
                            KeybindHolder.BorderColor3 = Color3FromRGB(0, 0, 0)
                            KeybindHolder.BorderSizePixel = 0
                            KeybindHolder.Size = UDim2New(0, 229, 0, 14)
                            
                            if toggle == nil then
                                local KeybindTitle = InstanceNew("TextLabel")
                                KeybindTitle.Name = "KeybindTitle"
                                KeybindTitle.Parent = KeybindHolder
                                KeybindTitle.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                                KeybindTitle.BackgroundTransparency = 1.000
                                KeybindTitle.BorderColor3 = Color3FromRGB(0, 0, 0)
                                KeybindTitle.BorderSizePixel = 0
                                KeybindTitle.Size = UDim2New(0, 161, 0, 14)
                                KeybindTitle.Font = Enum.Font.SourceSans
                                KeybindTitle.Text = KeybindOptions.Title
                                KeybindTitle.TextColor3 = Color3FromRGB(255, 255, 255)
                                KeybindTitle.TextSize = 14.000
                                KeybindTitle.TextXAlignment = Enum.TextXAlignment.Left
                            end
                        
                            KeybindButton.Name = "KeybindButton"
                            KeybindButton.Parent = KeybindHolder
                            KeybindButton.BackgroundColor3 = Color3FromRGB(21, 21, 21)
                            KeybindButton.BorderColor3 = Color3FromRGB(34, 34, 34)
                            KeybindButton.Position = UDim2New(0.703056753, 0, 0, 0)
                            KeybindButton.Size = UDim2New(0, 68, 0, 14)
                            KeybindButton.Font = Enum.Font.SourceSans
                            KeybindButton.Text = "key : NONE"
                            KeybindButton.TextColor3 = Color3FromRGB(255, 255, 255)
                            KeybindButton.TextSize = 14.000
                            KeybindButton.ZIndex = 2
                            KeybindButton.AutoButtonColor = false
                        
                            local KeybindInline = InstanceNew("Frame")
                            local KeybindContent = InstanceNew("Frame")
                            local KBContent = InstanceNew("UIListLayout")
                        
                            KeybindInline.Name = "KeybindInline"
                            KeybindInline.Parent = KeybindHolder
                            KeybindInline.BackgroundColor3 = Color3FromRGB(170, 170, 255)
                            KeybindInline.BackgroundTransparency = 1.000
                            KeybindInline.BorderColor3 = Color3FromRGB(0, 0, 0)
                            KeybindInline.BorderSizePixel = 0
                            KeybindInline.Position = UDim2New(0.943231463, 0, 0, 0)
                            KeybindInline.Size = UDim2New(0, 13, 0, 13)
                            KeybindInline.Visible = false
                            
                            KeybindContent.Name = "KeybindContent"
                            KeybindContent.Parent = KeybindInline
                            KeybindContent.BackgroundColor3 = Color3FromRGB(21, 21, 21)
                            KeybindContent.BorderColor3 = Color3FromRGB(34, 34, 34)
                            KeybindContent.Position = UDim2New(-4.23076916, 0, 1.2, 0)
                            KeybindContent.Size = UDim2New(0, 68, 0, 0)
                            KeybindContent.ZIndex = 3
                        
                            KBContent.Name = "KBContent"
                            KBContent.Parent = KeybindContent
                            KBContent.SortOrder = Enum.SortOrder.LayoutOrder
                        
                            local contentAnimations = {
                                Open = function ( self )
                                    KeybindContent.Visible = true
                                    KeybindInline.Visible = true
                        
                                    self:FadeIn()
                                end,
                                FadeIn = function ()
                                    for _, object in pairs( KeybindContent:GetDescendants() ) do
                                        if object:IsA("Frame") then
                                            tweenService:Create(object, TweenInfo.new(0.1), { BackgroundTransparency = 0 }):Play()
                                        elseif object:IsA("TextButton") then
                                            tweenService:Create(object, TweenInfo.new(0.1), { TextTransparency = 0 }):Play()
                                        end
                                    end
                                end,
                                FadeOut = function ()
                                    for _, object in pairs( KeybindContent:GetDescendants() ) do
                                        if object:IsA("Frame") then
                                            tweenService:Create(object, TweenInfo.new(0.1), { BackgroundTransparency = 1 }):Play()
                                        elseif object:IsA("TextButton") then
                                            tweenService:Create(object, TweenInfo.new(0.1), { TextTransparency = 1 }):Play()
                                        end
                                    end
                                end
                            }
                            
                            function contentAnimations:Close()
                                contentAnimations:FadeOut()
                        
                                TaskWait(0.05)
                        
                                KeybindContent.Visible = false
                                KeybindInline.Visible = false
                            end
                        
                            function Keybind:UpdateList()
                                if UserInterface.KeybindList and KeybindOptions.KeybindsList then
                                    UserInterface.KeybindList:Add(KeybindOptions.KeybindListName, Keybind.FMode)
                                    UserInterface.KeybindList:SetVisibility(KeybindOptions.KeybindListName, KeybindOptions:GetState())
                                    UserInterface.KeybindList:SetMode(KeybindOptions.KeybindListName, Keybind.FMode)
                                end
                            end
                        
                            function Keybind:Value(info)
                                if info then
                                    if info[1] then
                                        local Key = info[1]
                                        KeybindButton.Text = "key : " .. (Key == "NONE" or Key == "" and "NONE" or Key)
                                        Keybind.FKey = Key
                                    else
                                        KeybindButton.Text = "key : NONE"
                                    end
                        
                                    if info[2] then
                                        Keybind.Modes[info[2]]:Click(info[2] == "Toggle" and true or false)
                                    end
                        
                                    Keybind:UpdateList()
                                end
                        
                                return Keybind
                            end
                        
                            function KeybindOptions:GetState()
                                if Keybind.FMode == "Always" then
                                    return true
                                elseif Keybind.FMode == "Hold" then
                                    if Keybind.FKey == "NONE" then
                                        return false
                                    end
                        
                                    return Keybind.Toggled
                                else
                                    if Keybind.FKey == "NONE" then
                                        return false
                                    end
                        
                                    return Keybind.Toggled
                                end
                            end
                        
                            for _, v in pairs({ "Toggle", "Hold", "Always" }) do
                                local Button = {}
                                local KB_Button = InstanceNew("TextButton")
                                KB_Button.Name = "KB_Button"
                                KB_Button.Parent = KeybindContent
                                KB_Button.BackgroundColor3 = Color3FromRGB(21, 21, 21)
                                KB_Button.BackgroundTransparency = 0
                                KB_Button.BorderColor3 = Color3FromRGB(34, 34, 34)
                                KB_Button.BorderSizePixel = 0
                                KB_Button.Position = UDim2New(0, 0, 0.0416666679, 0)
                                KB_Button.Size = UDim2New(0, 68, 0, 14)
                                KB_Button.ZIndex = 3
                                KB_Button.Font = Enum.Font.SourceSans
                                KB_Button.Text = tostring(v)
                                KB_Button.TextColor3 = Color3FromRGB(129, 129, 127)
                                KB_Button.TextSize = 14.000
                                
                                local TextBoundY = KB_Button.TextBounds.Y
                                KeybindContent.Size += UDim2New(0, 0, 0, TextBoundY)
                        
                                function Button:Click(igr)
                                    for _,v in pairs(Keybind.Modes) do
                                        v:Unclick()
                                    end
                        
                                    Keybind.FMode = v
                                    KeybindInline.Visible = false
                                    Keybind:UpdateList()
                        
                                    KB_Button.TextColor3 = Color3FromRGB(168, 157, 159)
                        
                                    if not igr then
                                        pcall(KeybindOptions.Callback, KeybindOptions:GetState())
                                    end
                                end
                        
                                function Button:Unclick()
                                    KB_Button.TextColor3 = Color3FromRGB(129, 129, 127)
                                end
                                    
                                if v == Keybind.FMode then
                                    Button:Click()
                                end
                        
                                KB_Button.MouseButton1Down:Connect(Button.Click)
                        
                                theme_event.Event:Connect(function ()
                                    if v == Keybind.FMode then
                                        KB_Button.TextColor3 = theme.accent
                                    end
                                end)
                                
                                Keybind.Modes[v] = Button
                            end
                        
                            KeybindButton.InputBegan:Connect(function (input)
                                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                                    Keybind.Picking = true
                        
                                    KeybindButton.Text = "..."
                        
                                    TaskWait(0.02)
                        
                                    local Event; Event = inputService.InputBegan:Connect(function (input)
                                        local Key
                                        local KeyName = input.KeyCode.Name == "Escape" and "NONE" or Keys[input.KeyCode] or Keys[input.UserInputType] or input.KeyCode.Name
                        
                                        if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode.Name == "Escape" then
                                            Keybind.FKey = "NONE"
                                        elseif input.UserInputType == Enum.UserInputType.Keyboard then
                                            Keybind.FKey = input.KeyCode.Name
                                        elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
                                            Keybind.FKey = "MB1"
                                        elseif input.UserInputType == Enum.UserInputType.MouseButton2 then
                                            Keybind.FKey = "MB2"
                                        end
                        
                                        Break = true
                                        Keybind.Picking = false
                        
                                        KeybindButton.Text = "key : " .. KeyName
                        
                                        pcall(KeybindOptions.Callback, KeybindOptions:GetState())
                                        UserInterface.Flags[KeybindOptions.Flag] = KeybindOptions:GetState()
                                        UserInterface.Flags[KeybindOptions.Flag .. "_info"] = {Keybind.FKey, Keybind.FMode}
                                        Keybind:UpdateList()
                        
                                        Event:Disconnect()
                                    end)
                                end
                                
                                if input.UserInputType == Enum.UserInputType.MouseButton2 then
                                    if UserInterface.Popup and UserInterface.Popup.ID ~= KeybindHolder.Name then
                                        UserInterface:RemovePopups()
                                    end
                                    if KeybindInline.Visible then
                                        contentAnimations:Close()
                                    else
                                        UserInterface:NewPopup({ Remove = contentAnimations.Close, ID = KeybindHolder.Name })
                                        contentAnimations:Open()
                                    end
                                end
                            end)
                        
                            inputService.InputBegan:Connect(function ( input, gameprocessing )
                                if gameprocessing then return end
                        
                                -- mousebutton niggassss
                                local mb = Keybind.FKey == "MB2" and "MouseButton2" or Keybind.FKey == "MB1" and "MouseButton1"
                                if input.KeyCode.Name == Keybind.FKey or input.UserInputType.Name == mb then
                                    if Keybind.FMode == 'Toggle' then
                                        Keybind.Toggled = not Keybind.Toggled
                                    elseif Keybind.FMode == 'Hold' then
                                        Keybind.Toggled = true
                        
                                        local c; c = inputService.InputEnded:Connect(function ( input )
                                            if input.KeyCode.Name == Keybind.FKey or input.UserInputType.Name == mb then
                                                c:Disconnect()
                                                Keybind.Toggled = false
                                                pcall(KeybindOptions.Callback, KeybindOptions:GetState())
                                                Keybind:UpdateList()
                                            end
                                        end)
                                    end
                                    
                                    pcall(KeybindOptions.Callback, KeybindOptions:GetState())
                                    UserInterface.Flags[KeybindOptions.Flag] = KeybindOptions:GetState()
                                    UserInterface.Flags[KeybindOptions.Flag .. "_info"] = {Keybind.FKey, Keybind.FMode}
                                    Keybind:UpdateList()
                                end
                            end)
                        
                            if Keybind.FKey ~= "" then
                                Keybind:Value({ Keybind.FKey, Keybind.FMode })
                            end
                        
                            increaseYSize(14)
                        
                            UserInterface.Flags[KeybindOptions.Flag] = KeybindOptions:GetState()
                            UserInterface.Flags[KeybindOptions.Flag .. "_info"] = {Keybind.FKey, Keybind.FMode}
                        
                            UserInterface.ConfigFlags[KeybindOptions.Flag .. "_info"] = function(info) Keybind:Value(info) end
                        
                            return KeybindOptions
                        end
                    end
                    do -- src/Lua/Interface/Components/Label.lua
                        function Options:Label(text, richtext)
                            local LabelOptions = {}
                        
                            local RichTextEnabled = richtext ~= nil and richtext == true and true or false
                        
                            local Label = InstanceNew("TextLabel")
                            Label.Name = "Label"
                            Label.Parent = SectionColumnComponents
                            Label.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                            Label.BackgroundTransparency = 1.000
                            Label.BorderColor3 = Color3FromRGB(0, 0, 0)
                            Label.BorderSizePixel = 0
                            Label.Size = UDim2New(0, 229, 0, 14)
                            Label.Font = Enum.Font.SourceSans
                            Label.Text = text
                            Label.TextColor3 = Color3FromRGB(255, 255, 255)
                            Label.TextSize = 14.000
                            Label.TextXAlignment = Enum.TextXAlignment.Left
                            Label.RichText = RichTextEnabled
                            Label.TextTruncate = "AtEnd"
                        
                            function LabelOptions:ChangeText(newtext)
                                if not type(newtext) == "string" then return end
                                local new = tostring(newtext)
                                Label.Text = new
                            end
                            
                            increaseYSize(14)
                        
                            return LabelOptions
                        end
                    end
                    do -- src/Lua/Interface/Components/Playerlist.lua
                        function Options:PlayerList()
                            local PlayerlistHolder = InstanceNew("Frame")
                            local SearchBar = InstanceNew("TextBox")
                            local SearchTitle = InstanceNew("TextLabel")
                            local Players = InstanceNew("ScrollingFrame")
                            local ListLayout = InstanceNew("UIListLayout")
                        
                            PlayerlistHolder.Name = "PlayerlistHolder"
                            PlayerlistHolder.Parent = SectionColumnComponents
                            PlayerlistHolder.Size = UDim2New(1, 0, 0, 316)
                            PlayerlistHolder.BorderColor3 = Color3FromRGB(0, 0, 0)
                            PlayerlistHolder.BackgroundTransparency = 1
                            PlayerlistHolder.Position = UDim2New(0, 0, -1.17375305e-06, 0)
                            PlayerlistHolder.BorderSizePixel = 0
                            PlayerlistHolder.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                            
                            SearchBar.Name = "SearchBar"
                            SearchBar.Parent = PlayerlistHolder
                            SearchBar.Size = UDim2New(0, 160, 0, 17)
                            SearchBar.BorderColor3 = Color3FromRGB(31, 31, 31)
                            SearchBar.BackgroundColor3 = Color3FromRGB(21, 21, 21)
                            SearchBar.TextSize = 14
                            SearchBar.TextColor3 = Color3FromRGB(255, 255, 255)
                            SearchBar.Text = ""
                            SearchBar.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                            SearchBar.TextXAlignment = Enum.TextXAlignment.Left
                            
                            SearchTitle.Name = "SearchTitle"
                            SearchTitle.Parent = SearchBar
                            SearchTitle.Size = UDim2New(0, 63, 0, 17)
                            SearchTitle.BorderColor3 = Color3FromRGB(0, 0, 0)
                            SearchTitle.BackgroundTransparency = 1
                            SearchTitle.Position = UDim2New(1.03750002, 0, 0, 0)
                            SearchTitle.BorderSizePixel = 0
                            SearchTitle.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                            SearchTitle.TextColor3 = Color3FromRGB(255, 255, 255)
                            SearchTitle.Text = "search"
                            SearchTitle.TextXAlignment = Enum.TextXAlignment.Left
                            SearchTitle.TextSize = 14
                            SearchTitle.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                            
                            Players.Name = "Players"
                            Players.Parent = PlayerlistHolder
                            Players.Active = true
                            Players.Size = UDim2New(0, 229, 0, 300)
                            Players.BorderColor3 = Color3FromRGB(0, 0, 0)
                            Players.BackgroundTransparency = 1
                            Players.Position = UDim2New(0, 0, 0.075000003, 0)
                            Players.BorderSizePixel = 0
                            Players.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                            Players.ScrollBarImageColor3 = Color3FromRGB(0, 255, 255)
                            Players.AutomaticCanvasSize = Enum.AutomaticSize.Y
                            Players.ScrollBarThickness = 5
                            
                            ListLayout.Name = "ListLayout"
                            ListLayout.Parent = Players
                            ListLayout.Padding = UDim.new(0, 7)
                        
                            ListLayout.Changed:Connect(function ()
                                Players.CanvasSize = UDim2New(0, 0, 0, 8 + ListLayout.AbsoluteContentSize.Y)
                            end)
                        
                            local PlayerOptions = {
                                CurrentPlayer = ""
                            }
                        
                            function PlayerOptions:Clear()
                                for _, child in ipairs(Players:GetChildren()) do
                                    if child:IsA("Frame") then
                                        child:Destroy()
                                    end
                                end
                            end
                        
                            function PlayerOptions:Add(player, player_name)
                                local PlayerFrame = InstanceNew("Frame")
                                local PlayerImage = InstanceNew("ImageLabel")
                                local PlayerName = InstanceNew("TextButton")
                        
                                local DisplayName
                                if player.Character then
                                    local hum = player.Character:FindFirstChild("Humanoid")
                                    if hum then
                                        DisplayName = player.Character.Humanoid.DisplayName
                                    else
                                        DisplayName = player_name
                                    end
                                else
                                    DisplayName = player_name
                                end
                        
                                PlayerFrame.Name = player_name .. " " .. DisplayName
                                PlayerFrame.Parent = Players
                                PlayerFrame.Size = UDim2New(1, 0, 0, 19)
                                PlayerFrame.BorderColor3 = Color3FromRGB(0, 0, 0)
                                PlayerFrame.BackgroundTransparency = 1
                                PlayerFrame.BorderSizePixel = 0
                                PlayerFrame.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                                
                                PlayerImage.Name = "PlayerImage"
                                PlayerImage.Parent = PlayerFrame
                                PlayerImage.Size = UDim2New(0, 19, 0, 19)
                                PlayerImage.BorderColor3 = Color3FromRGB(0, 0, 0)
                                PlayerImage.BorderSizePixel = 0
                                PlayerImage.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                                PlayerImage.BackgroundTransparency = 1
                                PlayerImage.Image = "https://www.roblox.com/bust-thumbnail/image?userId=" .. player.UserId .. "&width=19&height=19&format=png"
                                
                                PlayerName.Name = "PlayerName"
                                PlayerName.Parent = PlayerImage
                                PlayerName.Size = UDim2New(0, 205, 0, 19)
                                PlayerName.BorderColor3 = Color3FromRGB(0, 0, 0)
                                PlayerName.BackgroundTransparency = 1
                                PlayerName.Position = UDim2New(1.26315784, 0, 0, 0)
                                PlayerName.BorderSizePixel = 0
                                PlayerName.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                                PlayerName.TextColor3 = Color3FromRGB(129, 129, 127)
                                PlayerName.Text = string.format("%s (@%s)", player_name, DisplayName)
                                PlayerName.TextXAlignment = Enum.TextXAlignment.Left
                                PlayerName.TextSize = 14
                                PlayerName.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                                PlayerName.TextTruncate = "AtEnd"
                        
                                local self_conn = nil
                                local function fucking_click()
                                    if PlayerOptions.CurrentPlayer == player_name then
                                        PlayerName.TextColor3 = Color3FromRGB(129, 129, 127)
                                        PlayerOptions.CurrentPlayer = nil
                        
                                        if self_conn then
                                            self_conn:Disconnect(); self_conn = nil
                                        end
                                    else
                                        for i, v in ipairs(Players:GetDescendants()) do
                                            if v.Name == "PlayerName" then
                                                v.TextColor3 = Color3FromRGB(129, 129, 127)
                                            end
                                        end
                                        PlayerName.TextColor3 = theme.accent
                                        PlayerOptions.CurrentPlayer = player_name
                        
                                        if not self_conn then
                                            self_conn = theme_event.Event:Connect(function ()
                                                if PlayerOptions.CurrentPlayer == player_name then
                                                    PlayerName.TextColor3 = theme.accent
                                                end
                                            end)
                                        end
                                    end
                                end
                        
                                PlayerName.MouseButton1Click:Connect(fucking_click)
                            end
                        
                            function PlayerOptions:Refresh()
                                PlayerOptions:Clear()
                        
                                for _, player in ipairs(playerService:GetPlayers()) do
                                    if player == LocalPlayer then continue end
                        
                                    local name = player.Name
                                    PlayerOptions:Add(player, name)
                                end
                            end
                        
                            function PlayerOptions:GetPlayers()
                                return Players:GetChildren()
                            end
                        
                            function PlayerOptions:Search()
                                local search = string.lower(SearchBar.Text)
                                for i, v in pairs(Players:GetChildren()) do
                                    if v:IsA("Frame") then
                                        if search ~= "" then
                                            local commanditemlist = string.lower(v.Name)
                                            if string.find(commanditemlist, search) then
                                                v.Visible = true
                                            else
                                                v.Visible = false
                                            end
                                        else
                                            v.Visible = true
                                        end
                                    end
                                end
                            end
                        
                            function PlayerOptions:GetCurrentPlayer()
                                return PlayerOptions.CurrentPlayer
                            end
                        
                            function PlayerOptions:Init()
                                -- init
                                PlayerOptions:Refresh()
                        
                                SearchBar.Changed:Connect(PlayerOptions.Search)
                                playerService.PlayerAdded:Connect(PlayerOptions.Refresh)
                                playerService.PlayerRemoving:Connect(PlayerOptions.Refresh)
                            end
                        
                            PlayerOptions:Init()
                        
                            increaseYSize(310)
                            return PlayerOptions
                        end
                    end
                    do -- src/Lua/Interface/Components/Slider.lua
                        function Options:Slider(Configuration)
                            local SliderOptions = {
                                 Title = Configuration.title or "slider",
                                 Min = Configuration.min or 1,
                                 Max = Configuration.max or 10,
                                 Float = Configuration.float or 1,
                                 Default = Configuration.default or 0,
                                 Value = 0,
                                 Callback = Configuration.callback or function() end,
                                 Sliding = false,
                                 Suffix = Configuration.suffix or "",
                                 Flag = UserInterface:GetNextFlag(),
                            }
                            SliderOptions.MinText = Configuration.mintext or tostring(SliderOptions.Min)
                            SliderOptions.MaxText = Configuration.maxtext or tostring(SliderOptions.Max)
                        
                            local Slider = InstanceNew("Frame")
                            local SliderInline = InstanceNew("Frame")
                            local InlineCorner = InstanceNew("UICorner")
                            local SliderBackground = InstanceNew("Frame")
                            local BackgroundCorner = InstanceNew("UICorner")
                            local SliderFill = InstanceNew("Frame")
                            local FillCorner = InstanceNew("UICorner")
                            local SliderDrag = InstanceNew("Frame")
                            local DragCorner = InstanceNew("UICorner")
                            local SliderName = InstanceNew("TextLabel")
                            local SliderValue = InstanceNew("TextLabel")
                        
                            Slider.Name = "Slider"
                            Slider.Parent = SectionColumnComponents
                            Slider.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                            Slider.BackgroundTransparency = 1.000
                            Slider.BorderColor3 = Color3FromRGB(0, 0, 0)
                            Slider.BorderSizePixel = 0
                            Slider.Size = UDim2New(0, 229, 0, 30)
                        
                            SliderInline.Name = "SliderInline"
                            SliderInline.Parent = Slider
                            SliderInline.BackgroundColor3 = Color3FromRGB(21, 21, 21)
                            SliderInline.BorderColor3 = Color3FromRGB(0, 0, 0)
                            SliderInline.BorderSizePixel = 0
                            SliderInline.Position = UDim2New(0, 0, 0.766666651, 0)
                            SliderInline.Size = UDim2New(0, 160, 0, 7)
                            
                            InlineCorner.CornerRadius = UDim.new(0, 2)
                            InlineCorner.Name = "InlineCorner"
                            InlineCorner.Parent = SliderInline
                            
                            SliderBackground.Name = "SliderBackground"
                            SliderBackground.Parent = SliderInline
                            SliderBackground.BackgroundColor3 = Color3FromRGB(21, 21, 21)
                            SliderBackground.BorderColor3 = Color3FromRGB(0, 0, 0)
                            SliderBackground.BorderSizePixel = 0
                            SliderBackground.Position = UDim2New(0, 0, -0.00999999978, 0)
                            SliderBackground.Size = UDim2New(0, 160, 1, 0)
                            
                            BackgroundCorner.CornerRadius = UDim.new(0, 2)
                            BackgroundCorner.Name = "BackgroundCorner"
                            BackgroundCorner.Parent = SliderBackground
                            
                            SliderFill.Name = "SliderFill"
                            SliderFill.Parent = SliderBackground
                            SliderFill.BackgroundColor3 = Color3FromRGB(172, 153, 159)
                            SliderFill.BorderColor3 = Color3FromRGB(0, 0, 0)
                            SliderFill.BorderSizePixel = 0
                            SliderFill.Position = UDim2New(0, 0, 0, 0)
                            SliderFill.Size = UDim2New(0, 0, 1, 0)
                            
                            FillCorner.CornerRadius = UDim.new(0, 2)
                            FillCorner.Name = "FillCorner"
                            FillCorner.Parent = SliderFill
                            
                            SliderDrag.Name = "SliderDrag"
                            SliderDrag.Parent = SliderBackground
                            SliderDrag.BackgroundColor3 = Color3FromRGB(21, 21, 21)
                            SliderDrag.BackgroundTransparency = 1.000
                            SliderDrag.BorderColor3 = Color3FromRGB(0, 0, 0)
                            SliderDrag.BorderSizePixel = 0
                            SliderDrag.Position = UDim2New(0, 0, -0.00999999978, 0)
                            SliderDrag.Size = UDim2New(1, 0, 1, 0)
                            
                            DragCorner.CornerRadius = UDim.new(0, 2)
                            DragCorner.Name = "DragCorner"
                            DragCorner.Parent = SliderDrag
                        
                            local X = UIModule:GetTextBoundary(SliderOptions.Title, Enum.Font.SourceSans, 14)
                            SliderName.Name = "SliderName"
                            SliderName.Parent = Slider
                            SliderName.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                            SliderName.BackgroundTransparency = 1.000
                            SliderName.BorderColor3 = Color3FromRGB(0, 0, 0)
                            SliderName.BorderSizePixel = 0
                            SliderName.Size = UDim2New(0, 28, 0, 20)
                            SliderName.FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]])
                            SliderName.Text = SliderOptions.Title
                            SliderName.TextColor3 = Color3FromRGB(255, 255, 255)
                            SliderName.TextSize = 14.000
                            SliderName.TextXAlignment = Enum.TextXAlignment.Left
                        
                            SliderValue.Name = "SliderValue"
                            SliderValue.Parent = Slider
                            SliderValue.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                            SliderValue.BackgroundTransparency = 1.000
                            SliderValue.BorderColor3 = Color3FromRGB(0, 0, 0)
                            SliderValue.BorderSizePixel = 0
                            SliderValue.Position = UDim2New(0, X + 3, 0, 0)
                            SliderValue.Size = UDim2New(0, SliderValue.TextBounds.X, 0, 20)
                            SliderValue.Font = Enum.Font.SourceSans
                            SliderValue.Text = SliderOptions.Value .. SliderOptions.Suffix
                            SliderValue.TextColor3 = Color3FromRGB(124, 124, 124)
                            SliderValue.TextSize = 14.000
                            SliderValue.TextXAlignment = Enum.TextXAlignment.Left
                        
                            local INLINESTROKE = InstanceNew("UIStroke", SliderInline)
                            INLINESTROKE["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border
                            INLINESTROKE["Name"] = [[INLINESTROKE]]
                            INLINESTROKE["Color"] = Color3FromRGB(32, 32, 32)
                        
                            local SliderBackgroundStroke = InstanceNew("UIStroke", SliderBackground)
                            SliderBackgroundStroke["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border
                            SliderBackgroundStroke["Name"] = [[SliderBackgroundStroke]]
                            SliderBackgroundStroke["Color"] = Color3FromRGB(32, 32, 32)
                        
                            local SliderFillStroke = InstanceNew("UIStroke", SliderFill)
                            SliderFillStroke["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border
                            SliderFillStroke["Name"] = [[SliderFillStroke]]
                            SliderFillStroke["Color"] = Color3FromRGB(172, 153, 159)
                            SliderFillStroke["Transparency"] = 0.5
                        
                            theme_event.Event:Connect(function ()
                                SliderFill.BackgroundColor3 = theme.accent
                                SliderFillStroke.Color = theme.accent
                            end)
                            
                            local function Round(number, float)
                                return float * math.round(number / float)
                            end
                        
                            function SliderOptions:Set(value)
                                value = math.clamp(Round(value, SliderOptions.Float), SliderOptions.Min, SliderOptions.Max)
                        
                                local Size = (value - SliderOptions.Min) / (SliderOptions.Max - SliderOptions.Min)
                        
                                SliderOptions.Value = value
                        
                                tweenService:Create(SliderFill, TweenInfo.new(0.13, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2New(Size, 0, 1, 0)}):Play()
                        
                                SliderOptions.Callback(value)
                                UserInterface.Flags[SliderOptions.Flag] = SliderOptions.Value
                        
                                local text = SliderOptions.Value == SliderOptions.Min and SliderOptions.MinText or SliderOptions.Value == SliderOptions.Max and SliderOptions.MaxText or string.format("%.14g%s", SliderOptions.Value, SliderOptions.Suffix)
                                SliderValue.Text = text
                            end
                        
                            function SliderOptions:Slide(input)
                                local Size = (input.Position.X - SliderBackground.AbsolutePosition.X) / SliderBackground.AbsoluteSize.X
                                local Value = math.clamp((SliderOptions.Max - SliderOptions.Min) * Size + SliderOptions.Min, SliderOptions.Min, SliderOptions.Max)
                        
                                self:Set(Value)
                            end
                        
                            SliderOptions:Set(SliderOptions.Default)
                        
                            SliderDrag.MouseEnter:Connect(function ()
                                tweenService:Create(SliderBackgroundStroke, TweenInfo.new(0.2), {Color = Color3FromRGB(255,255,255) }):Play()
                            end)
                        
                            SliderDrag.MouseLeave:Connect(function ()
                                tweenService:Create(SliderBackgroundStroke, TweenInfo.new(0.2), {Color = Color3FromRGB(32, 32, 32) }):Play()
                            end)
                        
                            SliderDrag.InputBegan:Connect(function (input)
                                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                                    SliderOptions.Sliding = true
                                    SliderOptions:Slide(input)
                                end
                            end)
                        
                            SliderDrag.InputEnded:Connect(function (input)
                                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                                    SliderOptions.Sliding = false
                                    SliderOptions:Slide(input)
                                end
                            end)
                        
                            SliderDrag.InputChanged:Connect(function (input)
                                if input.UserInputType == Enum.UserInputType.MouseMovement and SliderOptions.Sliding then
                                    SliderOptions:Slide(input)
                                end
                            end)
                        
                            UserInterface.ConfigFlags[SliderOptions.Flag] = function(value) SliderOptions:Set(value) end
                        
                            increaseYSize(30)
                            return SliderOptions
                        end
                    end
                    do -- src/Lua/Interface/Components/Textbox.lua
                        function Options:TextBox(Configuration)
                            local TextBoxOptions = {
                                Title = Configuration.title or "textbox",
                                Default = Configuration.default or "",
                                Placeholder = Configuration.placeholder or "",
                                ClearTextOnFocus = Configuration.cleartextonfocus or Configuration.ctf or true,
                                Callback = Configuration.callback or function() end,
                                Text = "",
                                Flag = UserInterface:GetNextFlag()
                            }
                        
                            if TextBoxOptions.Title ~= "NO TITLE" then
                                self:Label(TextBoxOptions.Title)
                            end
                        
                            local TextBox = InstanceNew("TextBox")
                            local TextboxCorner = InstanceNew("UICorner")
                            TextBox.Parent = SectionColumnComponents
                            TextBox.BackgroundColor3 = Color3FromRGB(23, 23, 23)
                            TextBox.BorderColor3 = Color3FromRGB(0, 0, 0)
                            TextBox.BorderSizePixel = 0
                            TextBox.Size = UDim2New(0, 229, 0, 14)
                            TextBox.Font = Enum.Font.SourceSans
                            TextBox.PlaceholderText = TextBoxOptions.Placeholder
                            TextBox.Text = ""
                            TextBox.TextColor3 = Color3FromRGB(255, 255, 255)
                            TextBox.TextSize = 14.000
                            TextBox.TextXAlignment = Enum.TextXAlignment.Left
                            TextBox.TextTruncate = "AtEnd"
                            TextBox.ClearTextOnFocus = TextBoxOptions.ClearTextOnFocus
                        
                            TextboxCorner.CornerRadius = UDim.new(0, 4)
                            TextboxCorner.Name = "TextboxCorner"
                            TextboxCorner.Parent = TextBox
                            
                            local TextBoxStroke = InstanceNew("UIStroke", TextBox)
                            TextBoxStroke["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border
                            TextBoxStroke["Name"] = [[TextBoxStroke]]
                            TextBoxStroke["Color"] = Color3FromRGB(37, 37, 37)
                        
                            function TextBoxOptions:Set(Text)
                                Text = Text or ""
                                
                                TextBox.Text = Text
                                TextBoxOptions.Text = TextBox.Text
                                UserInterface.Flags[TextBoxOptions.Flag] = TextBoxOptions.Text
                                UserInterface.Flags[TextBoxOptions.Flag .. "f"] = function(value) TextBoxOptions:Set(value) end
                                pcall(TextBoxOptions.Callback, TextBoxOptions.Text)
                            end
                        
                            local function OnFocusLost()
                                TextBoxOptions.Text = TextBox.Text
                                UserInterface.Flags[TextBoxOptions.Flag] = TextBoxOptions.Text
                                UserInterface.Flags[TextBoxOptions.Flag .. "f"] = function(value) TextBoxOptions:Set(value) end
                                pcall(TextBoxOptions.Callback, TextBoxOptions.Text)
                            end
                        
                            TextBox.FocusLost:Connect(OnFocusLost)
                        
                            increaseYSize(14)
                            UserInterface.ConfigFlags[TextBoxOptions.Flag] = function(text) TextBoxOptions:Set(text) end
                        
                            return TextBoxOptions
                        end
                    end
                    do -- src/Lua/Interface/Components/Toggle.lua
                        function Options:Toggle(Configuration)
                            local ToggleOptions = { 
                                title = Configuration.title or "toggle",
                                default = Configuration.default or false,
                                state = false,
                                callback = Configuration.callback or function() end,
                                Flag = UserInterface:GetNextFlag()
                            }
                            
                            UI["19"] = InstanceNew("TextButton", SectionColumnComponents)
                            UI["19"]["BorderSizePixel"] = 0
                            UI["19"]["TextTransparency"] = 1
                            UI["19"]["TextSize"] = 14
                            UI["19"]["TextColor3"] = Color3FromRGB(255, 255, 255)
                            UI["19"]["BackgroundColor3"] = Color3FromRGB(255, 255, 255)
                            UI["19"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                            UI["19"]["Size"] = UDim2New(0, 229, 0, 15)
                            UI["19"]["BackgroundTransparency"] = 1
                            UI["19"]["Name"] = [[ToggleButton]]
                            UI["19"]["BorderColor3"] = Color3FromRGB(0, 0, 0)
                            UI["19"]["Text"] = [[Toggle]]
                        
                            UI["1a"] = InstanceNew("Frame", UI["19"])
                            UI["1a"]["BorderSizePixel"] = 0
                            UI["1a"]["BackgroundColor3"] = Color3FromRGB(20, 20, 17)
                            UI["1a"]["Size"] = UDim2New(0, 13, 0, 13)
                            UI["1a"]["BorderColor3"] = Color3FromRGB(0, 0, 0)
                            UI["1a"]["Position"] = UDim2New(0, 0, 0.077, 0)
                            UI["1a"]["Name"] = [[ToggleStatus]]
                        
                            UI["1b"] = InstanceNew("UICorner", UI["1a"])
                            UI["1b"]["Name"] = [[ToggleStatusCorner]]
                            UI["1b"]["CornerRadius"] = UDim.new(0, 4)
                        
                            UI["1c"] = InstanceNew("UIStroke", UI["1a"])
                            UI["1c"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border
                            UI["1c"]["Name"] = [[ToggleUIStroke]]
                            UI["1c"]["Color"] = Color3FromRGB(37, 37, 37)
                        
                            UI["1d"] = InstanceNew("TextLabel", UI["19"])
                            UI["1d"]["TextStrokeTransparency"] = 1
                            UI["1d"]["BorderSizePixel"] = 0
                            UI["1d"]["TextXAlignment"] = Enum.TextXAlignment.Left
                            UI["1d"]["BackgroundColor3"] = Color3FromRGB(255, 255, 255)
                            UI["1d"]["TextSize"] = 14
                            UI["1d"].FontFace = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Thin, Enum.FontStyle.Normal)
                            UI["1d"]["TextColor3"] = Color3FromRGB(129, 129, 127)
                            UI["1d"]["BackgroundTransparency"] = 1
                            UI["1d"]["Size"] = UDim2New(1, 0, 0, 13)
                            UI["1d"]["BorderColor3"] = Color3FromRGB(0, 0, 0)
                            UI["1d"]["Text"] = ToggleOptions.title
                            UI["1d"]["Name"] = [[ToggleName]]
                            UI["1d"]["Position"] = UDim2New(0, 18, 0, 0)
                        
                            local Button = UI["19"]
                            local ToggleStatus = UI["1a"]
                            local ToggleName = UI["1d"]
                        
                            local TS_ON = tweenService:Create(ToggleStatus, TweenInfo.new(0.2), {
                                BackgroundColor3 = Color3FromRGB(168, 157, 159)
                            })
                            local TN_ON = tweenService:Create(ToggleName, TweenInfo.new(0.2), {
                                TextColor3 = Color3FromRGB(255, 255, 255)
                            })
                            local TS_OFF = tweenService:Create(ToggleStatus, TweenInfo.new(0.2), {
                                BackgroundColor3 = Color3FromRGB(20, 20, 17)
                            })
                            local TN_OFF = tweenService:Create(ToggleName, TweenInfo.new(0.2), {
                                TextColor3 = Color3FromRGB(129, 129, 127)
                            })
                        
                            theme_event.Event:Connect(function ()
                                TS_ON = tweenService:Create(ToggleStatus, TweenInfo.new(0.2), {
                                    BackgroundColor3 = theme.accent
                                })
                        
                                if ToggleOptions.state then
                                    ToggleStatus.BackgroundColor3 = theme.accent
                                end
                            end)
                        
                            local function ToggleOn()
                                TS_ON:Play();TN_ON:Play()
                            end
                        
                            local function ToggleOff()
                                TS_OFF:Play();TN_OFF:Play()
                            end
                        
                            function ToggleOptions:Set(boolean)
                                ToggleOptions.state = boolean
                                pcall(ToggleOptions.callback, ToggleOptions.state)
                                UserInterface.Flags[ToggleOptions.Flag] = ToggleOptions.state
                                if ToggleOptions.state == true then
                                    ToggleOn()
                                elseif not ToggleOptions.state then
                                    ToggleOff()
                                end
                            end
                        
                            function ToggleOptions:Keybind(Configuration)
                                Options:Keybind(Configuration, Button)
                            end
                        
                            function ToggleOptions:Colorpicker(Configuration)
                                Options:Colorpicker(Configuration, Button)
                            end
                            
                            local function OnClick()
                                ToggleOptions.state = not ToggleOptions.state
                                ToggleOptions:Set(ToggleOptions.state)
                            end
                        
                            Button.MouseButton1Click:Connect(OnClick)
                        
                            ToggleOptions:Set(ToggleOptions.default)
                            increaseYSize(15)     
                        
                            UserInterface.ConfigFlags[ToggleOptions.Flag] = function(state) ToggleOptions:Set(state) end
                        
                            return ToggleOptions
                        end
                    end
                end
    
                return Options
            end
    
            if #Configuration.Tabs > 0 then
                Configuration.Tabs[1]:Select()
            end
    
            table.insert(Configuration.Tabs, #Configuration.Tabs + 1, TabConfiguration)
            return TabConfiguration
        end
    
        local function isMouseInFrame()
            local framePosition = UI["b"].AbsolutePosition
            local frameSize = UI["b"].AbsoluteSize
    
            local player = playerService.LocalPlayer
            local mouse = player:GetMouse()
            
            local mouseX, mouseY = mouse.X, mouse.Y
            
            if mouseX >= framePosition.X and mouseX <= framePosition.X + frameSize.X and
               mouseY >= framePosition.Y and mouseY <= framePosition.Y + frameSize.Y then
                return true
            else
                return false
            end
        end
    
        UI["2"].InputBegan:Connect(function (input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 and not isMouseInFrame() then
                dragObject = UI["2"]
                dragging = true
                dragStart = input.Position
                startPos = dragObject.Position
            end
        end)
        UI["2"].InputEnded:Connect(function (input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)
        UI["2"].InputChanged:Connect(function (input)
            if dragging and input.UserInputType.Name == "MouseMovement" then
                dragInput = input
            end
        end)
    
        inputService.InputChanged:Connect(function (input)
            if input == dragInput and dragging then
                local delta = input.Position - dragStart
                local yPos = (startPos.Y.Offset + delta.Y) < -36 and -36 or startPos.Y.Offset + delta.Y
                dragObject:TweenPosition(UDim2New(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, yPos), "Out", "Quad", .15, true)
            end
        end)
    
        do -- src/Lua/Interface/Others/
            do -- src/Lua/Interface/Others/CloseOpen.lua
                inputService.InputBegan:Connect(function(input, gameproc)
                    if gameproc then return end
                
                    if input.KeyCode == Enum.KeyCode.RightShift then
                        UI["2"].Visible = not UI["2"].Visible
                    end
                end)
            end
            do -- src/Lua/Interface/Others/Config.lua
                function UserInterface:GetConfig()
                    local ConfigTable = {}
                
                    for _, v in pairs(UserInterface.ConfigFlags) do
                        local Value = UserInterface.Flags[_]
                
                        if typeof(Value) == "EnumItem" then
                            ConfigTable[_] = Value
                		elseif typeof(Value) == "Color3" then
                			ConfigTable[_] = { Value:ToHex() }
                        else
                            ConfigTable[_] = Value
                        end
                    end
                
                    return httpService:JSONEncode(ConfigTable)
                end
                
                function UserInterface:LoadConfig(config)
                    local Config = httpService:JSONDecode(config)
                    
                    for _, v in pairs(Config) do
                        local Func = UserInterface.ConfigFlags[_]
                
                        if Func then
                            Func(v)
                        end
                    end
                end
            end
            do -- src/Lua/Interface/Others/KeybindsList.lua
                function UserInterface:KeybindsList()
                    local KeybindsList = InstanceNew("Frame")
                    local KeybindsListCorner = InstanceNew("UICorner")
                    local KeybindsListTitle = InstanceNew("TextLabel")
                    local ObjectsList = InstanceNew("Frame")
                    local ObjectsList_2 = InstanceNew("UIListLayout")
                
                    KeybindsList.Name = "KeybindsList"
                    KeybindsList.Parent = UI["1"]
                    KeybindsList.BackgroundColor3 = Color3FromRGB(23, 21, 21)
                    KeybindsList.BorderColor3 = Color3FromRGB(0, 0, 0)
                    KeybindsList.BorderSizePixel = 0
                    KeybindsList.Position = UDim2New(0.00636042422, 0, 0.43246755, 0)
                    KeybindsList.Size = UDim2New(0, 102, 0, 19)
                    UI.KeybindListo = KeybindsList
                    
                    KeybindsListCorner.CornerRadius = UDim.new(0, 4)
                    KeybindsListCorner.Name = "KeybindsListCorner"
                    KeybindsListCorner.Parent = KeybindsList
                    
                    KeybindsListTitle.Name = "KeybindsListTitle"
                    KeybindsListTitle.Parent = KeybindsList
                    KeybindsListTitle.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                    KeybindsListTitle.BackgroundTransparency = 1.000
                    KeybindsListTitle.BorderColor3 = Color3FromRGB(0, 0, 0)
                    KeybindsListTitle.BorderSizePixel = 0
                    KeybindsListTitle.Size = UDim2New(1, 0, 1, 0)
                    KeybindsListTitle.Font = Enum.Font.RobotoMono
                    KeybindsListTitle.Text = "hotkeys"
                    KeybindsListTitle.TextColor3 = Color3FromRGB(255, 255, 255)
                    KeybindsListTitle.TextSize = 12.000
                    
                    ObjectsList.Name = "ObjectsList"
                    ObjectsList.Parent = KeybindsList
                    ObjectsList.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                    ObjectsList.BackgroundTransparency = 1.000
                    ObjectsList.BorderColor3 = Color3FromRGB(0, 0, 0)
                    ObjectsList.BorderSizePixel = 0
                    ObjectsList.Position = UDim2New(0, 0, 1, 0)
                    ObjectsList.Size = UDim2New(0, 102, 0, 13)
                    
                    ObjectsList_2.Name = "ObjectsList"
                    ObjectsList_2.Parent = ObjectsList
                    ObjectsList_2.SortOrder = Enum.SortOrder.LayoutOrder
                
                    local KeybindsListOptions = {}
                    UserInterface.KeybindList = KeybindsListOptions
                
                    function KeybindsListOptions:Add(title, state)
                        if table.find(UserInterface.KeybindsListObjects, title) then return end
                
                        local HotkeyFrame = InstanceNew("Frame")
                        local HotkeyTitle = InstanceNew("TextLabel")
                        local HotkeyState = InstanceNew("TextLabel")
                
                        HotkeyFrame.Name = title
                        HotkeyFrame.Parent = ObjectsList
                        HotkeyFrame.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                        HotkeyFrame.BackgroundTransparency = 1.000
                        HotkeyFrame.BorderColor3 = Color3FromRGB(0, 0, 0)
                        HotkeyFrame.BorderSizePixel = 0
                        HotkeyFrame.Size = UDim2New(0, 102, 0, 12)
                
                        HotkeyTitle.Name = "HotkeyTitle"
                        HotkeyTitle.Parent = HotkeyFrame
                        HotkeyTitle.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                        HotkeyTitle.BackgroundTransparency = 1.000
                        HotkeyTitle.BorderColor3 = Color3FromRGB(0, 0, 0)
                        HotkeyTitle.BorderSizePixel = 0
                        HotkeyTitle.Size = UDim2New(1, 0, 0, 12)
                        HotkeyTitle.Font = Enum.Font.RobotoMono
                        HotkeyTitle.Text = title
                        HotkeyTitle.TextColor3 = Color3FromRGB(255, 255, 255)
                        HotkeyTitle.TextSize = 12.000
                        HotkeyTitle.TextXAlignment = Enum.TextXAlignment.Left
                
                        HotkeyState.Name = "HotkeyState"
                        HotkeyState.Parent = HotkeyFrame
                        HotkeyState.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                        HotkeyState.BackgroundTransparency = 1.000
                        HotkeyState.BorderColor3 = Color3FromRGB(0, 0, 0)
                        HotkeyState.BorderSizePixel = 0
                        HotkeyState.Size = UDim2New(1, 0, 0, 12)
                        HotkeyState.Font = Enum.Font.RobotoMono
                        HotkeyState.Text = string.lower(state)
                        HotkeyState.TextColor3 = Color3FromRGB(255, 255, 255)
                        HotkeyState.TextSize = 12.000
                        HotkeyState.TextXAlignment = Enum.TextXAlignment.Right
                
                        table.insert(UserInterface.KeybindsListObjects, title)
                        return Options
                    end
                
                    function KeybindsListOptions:SetVisibility(Title, Visibility)
                        local object = ObjectsList:FindFirstChild(Title)
                        if object then
                            ObjectsList:FindFirstChild(Title).Visible = Visibility
                        end
                    end
                
                    function KeybindsListOptions:SetMode(Title, Mode)
                        local object = ObjectsList:FindFirstChild(Title)
                        if object then
                            ObjectsList:FindFirstChild(Title)["HotkeyState"].Text = string.lower(Mode)
                        end
                    end
                
                    function KeybindsListOptions:SetInterfaceVisibility(Visibility)
                        KeybindsList.Visible = Visibility
                    end
                
                    return KeybindsListOptions
                end
            end
            do -- src/Lua/Interface/Others/Popups.lua
                function UserInterface:RemovePopups()
                    if UserInterface.Popup then
                        UserInterface.Popup:Remove()
                        UserInterface.Popup = nil
                    end
                end
                
                function UserInterface:NewPopup(Configuration)
                    UserInterface.Popup = {
                        Remove = Configuration.Remove,
                        ID = Configuration.ID
                    }
                end
            end
            do -- src/Lua/Interface/Others/Watermark.lua
                function UserInterface:Watermark(text)
                    -- add more customization to this shit please.
                
                    --[[
                        Adding Soon : 
                            Watermark Text Triggers
                    ]]
                
                    local Watermark = InstanceNew("Frame")
                    local WatermarkCorner = InstanceNew("UICorner")
                    local WatermarkTitle = InstanceNew("TextLabel")
                
                    local TextBoundX = UIModule:GetTextBoundary("syndicate.club", Enum.Font.Code, 13)
                    Watermark.Name = "Watermark"
                    Watermark.Parent = UI["1"]
                    Watermark.BackgroundColor3 = Color3FromRGB(23, 21, 21)
                    Watermark.BorderColor3 = Color3FromRGB(0, 0, 0)
                    Watermark.BorderSizePixel = 0
                    Watermark.Position = UDim2New(0, 10, 0, 10)
                    Watermark.Size = UDim2New(0, TextBoundX + 10, 0, 20)
                
                    WatermarkCorner.CornerRadius = UDim.new(0, 4)
                    WatermarkCorner.Name = "WatermarkCorner"
                    WatermarkCorner.Parent = Watermark
                
                    WatermarkTitle.Name = "WatermarkTitle"
                    WatermarkTitle.Parent = Watermark
                    WatermarkTitle.BackgroundColor3 = Color3FromRGB(255, 255, 255)
                    WatermarkTitle.BackgroundTransparency = 1.000
                    WatermarkTitle.BorderColor3 = Color3FromRGB(0, 0, 0)
                    WatermarkTitle.BorderSizePixel = 0
                    WatermarkTitle.Size = UDim2New(1, 0, 1, 0)
                    WatermarkTitle.Font = Enum.Font.Code
                    WatermarkTitle.Text = text
                    WatermarkTitle.TextColor3 = Color3FromRGB(255, 255, 255)
                    WatermarkTitle.TextSize = 13.000
                    WatermarkTitle.RichText = true
                
                    local WatermarkOptions = {}
                
                    function WatermarkOptions:ChangeText(newtext)
                        if type(newtext) ~= "string" then return end
                        WatermarkTitle.Text = tostring(newtext)
                
                        local TBX = UIModule:GetTextBoundary(newtext, Enum.Font.Code, 13)
                        Watermark.Size = UDim2New(0, TBX + 10, 0, 20)
                    end
                
                    function WatermarkOptions:SetVisibility(visibility)
                        Watermark.Visible = visibility
                    end
                
                    function WatermarkOptions:SetPosition(v2Pos)
                        Watermark.Position = UDim2New(0, v2Pos.X, 0, v2Pos.Y)
                    end
                
                    return WatermarkOptions
                end
            end
        end
    
        return Configuration
    end
    
    return UserInterface
end)()

local nigga = (function() -- src/Lua/loader.lua
    local loaderOptions = {}
    loaderOptions.Completed = Instance.new("BindableEvent")
    loaderOptions.AutoLoadStop = Instance.new("BindableEvent")
    loaderOptions.Exit = false
    
    local function hasProperty(object, propertyName)
        local success, _ = pcall(function() 
            object[propertyName] = object[propertyName]
        end)
        return success
    end
    
    local function Tween(object, tweenInfo, property_Table)
        local newTween = game:GetService("TweenService"):Create(object, tweenInfo, property_Table)
        newTween:Play()
        return newTween
    end
    
    function loaderOptions:new()
        local Loader = Instance.new("ScreenGui")
        Loader.Name = "Loader"
        Loader.Parent = coreguiService
        
        local LoaderBackground = Instance.new("Frame")
        local BackgroundCorner = Instance.new("UICorner")
        local BackgroundStroke = Instance.new("UIStroke")
        local MainTitle = Instance.new("TextLabel")
        local InfoFrame = Instance.new("Frame")
        local InfoFrameStroke = Instance.new("UIStroke")
        local InfoFrameCorner = Instance.new("UICorner")
        local InfoTitle = Instance.new("TextLabel")
        local Information = Instance.new("TextLabel")
        local InfoGame = Instance.new("ImageLabel")
        local OptionsFrame = Instance.new("Frame")
        local OptionsFrameStroke = Instance.new("UIStroke")
        local OptionsFrameCorner = Instance.new("UICorner")
        local OptionsTitle = Instance.new("TextLabel")
        local Load_2 = Instance.new("TextButton")
        local LoadBCorner = Instance.new("UICorner")
        local LoadBStroke = Instance.new("UIStroke")
        local Exit = Instance.new("TextButton")
        local ExitBCorner = Instance.new("UICorner")
        local ExitBStroke = Instance.new("UIStroke")
        local Shadow1 = Instance.new("ImageLabel")
    
        LoaderBackground.Name = "LoaderBackground"
        LoaderBackground.Parent = Loader
        LoaderBackground.Size = UDim2.new(0, 345, 0, 194)
        LoaderBackground.BorderColor3 = Color3.fromRGB(0, 0, 0)
        LoaderBackground.Position = UDim2.new(0.393320978, 0, 0.377049178, 0)
        LoaderBackground.BorderSizePixel = 0
        LoaderBackground.BackgroundColor3 = Color3.fromRGB(23, 23, 23)
    
        BackgroundCorner.Name = "BackgroundCorner"
        BackgroundCorner.Parent = LoaderBackground
    
        BackgroundStroke.Name = "BackgroundStroke"
        BackgroundStroke.Parent = LoaderBackground
        BackgroundStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
        BackgroundStroke.Color = Color3.fromRGB(30, 32, 30)
        BackgroundStroke.Thickness = 2
    
        MainTitle.Name = "MainTitle"
        MainTitle.Parent = LoaderBackground
        MainTitle.Size = UDim2.new(0, 81, 0, 20)
        MainTitle.BorderColor3 = Color3.fromRGB(0, 0, 0)
        MainTitle.BackgroundTransparency = 1
        MainTitle.Position = UDim2.new(0, 6, 0, 6)
        MainTitle.BorderSizePixel = 0
        MainTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        MainTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
        MainTitle.Text = "drax.dahood"
        MainTitle.TextStrokeTransparency = 0
        MainTitle.TextSize = 16
        MainTitle.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
    
        InfoFrame.Name = "InfoFrame"
        InfoFrame.Parent = LoaderBackground
        InfoFrame.Size = UDim2.new(0, 332, 0, 103)
        InfoFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
        InfoFrame.Position = UDim2.new(0.0173913036, 0, 0.164948449, 0)
        InfoFrame.BorderSizePixel = 0
        InfoFrame.BackgroundColor3 = Color3.fromRGB(16, 16, 16)
    
        InfoFrameStroke.Name = "InfoFrameStroke"
        InfoFrameStroke.Parent = InfoFrame
        InfoFrameStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
        InfoFrameStroke.Color = Color3.fromRGB(28, 28, 28)
    
        InfoFrameCorner.Name = "InfoFrameCorner"
        InfoFrameCorner.Parent = InfoFrame
    
        InfoTitle.Name = "InfoTitle"
        InfoTitle.Parent = InfoFrame
        InfoTitle.Size = UDim2.new(0, 326, 0, 16)
        InfoTitle.BorderColor3 = Color3.fromRGB(0, 0, 0)
        InfoTitle.BackgroundTransparency = 1
        InfoTitle.Position = UDim2.new(0.0180722885, 0, 0, 0)
        InfoTitle.BorderSizePixel = 0
        InfoTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        InfoTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
        InfoTitle.Text = "Information"
        InfoTitle.TextXAlignment = Enum.TextXAlignment.Left
        InfoTitle.TextSize = 16
        InfoTitle.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
    
        Information.Name = "Information"
        Information.Parent = InfoFrame
        Information.Size = UDim2.new(0, 233, 0, 87)
        Information.BorderColor3 = Color3.fromRGB(0, 0, 0)
        Information.BackgroundTransparency = 1
        Information.Position = UDim2.new(0.298192769, 0, 0.155339807, 0)
        Information.BorderSizePixel = 0
        Information.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Information.TextYAlignment = Enum.TextYAlignment.Top
        Information.TextColor3 = Color3.fromRGB(255, 255, 255)
        Information.Text = "Version Loaded : Da Hood"
        Information.TextXAlignment = Enum.TextXAlignment.Left
        Information.TextSize = 14
        Information.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
    
        InfoGame.Name = "InfoGame"
        InfoGame.Parent = InfoFrame
        InfoGame.Size = UDim2.new(0, 81, 0, 81)
        InfoGame.BorderColor3 = Color3.fromRGB(25, 25, 25)
        InfoGame.Position = UDim2.new(0.036144577, 0, 0.155339807, 0)
        InfoGame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        InfoGame.Image = "rbxassetid://18175856299"
    
        OptionsFrame.Name = "OptionsFrame"
        OptionsFrame.Parent = LoaderBackground
        OptionsFrame.Size = UDim2.new(0, 332, 0, 47)
        OptionsFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
        OptionsFrame.Position = UDim2.new(0.0173913036, 0, 0.726804137, 0)
        OptionsFrame.BorderSizePixel = 0
        OptionsFrame.BackgroundColor3 = Color3.fromRGB(16, 16, 16)
    
        OptionsFrameStroke.Name = "OptionsFrameStroke"
        OptionsFrameStroke.Parent = OptionsFrame
        OptionsFrameStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
        OptionsFrameStroke.Color = Color3.fromRGB(28, 28, 28)
    
        OptionsFrameCorner.Name = "OptionsFrameCorner"
        OptionsFrameCorner.Parent = OptionsFrame
    
        OptionsTitle.Name = "OptionsTitle"
        OptionsTitle.Parent = OptionsFrame
        OptionsTitle.Size = UDim2.new(0, 326, 0, 16)
        OptionsTitle.BorderColor3 = Color3.fromRGB(0, 0, 0)
        OptionsTitle.BackgroundTransparency = 1
        OptionsTitle.Position = UDim2.new(0.0180722885, 0, 0, 0)
        OptionsTitle.BorderSizePixel = 0
        OptionsTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        OptionsTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
        OptionsTitle.Text = "Options"
        OptionsTitle.TextXAlignment = Enum.TextXAlignment.Left
        OptionsTitle.TextSize = 16
        OptionsTitle.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
    
        Load_2.Name = "Load"
        Load_2.Parent = OptionsFrame
        Load_2.ZIndex = 2
        Load_2.Size = UDim2.new(0, 153, 0, 17)
        Load_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
        Load_2.Position = UDim2.new(0.036144577, 0, 0.46808511, 0)
        Load_2.BorderSizePixel = 0
        Load_2.BackgroundColor3 = Color3.fromRGB(21, 21, 21)
        Load_2.AutoButtonColor = false
        Load_2.TextColor3 = Color3.fromRGB(255, 255, 255)
        Load_2.Text = "load"
        Load_2.TextStrokeTransparency = 1.0099999904632568
        Load_2.TextSize = 14
        Load_2.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
    
        LoadBCorner.Name = "LoadBCorner"
        LoadBCorner.Parent = Load_2
        LoadBCorner.CornerRadius = UDim.new(0, 4)
    
        LoadBStroke.Name = "LoadBStroke"
        LoadBStroke.Parent = Load_2
        LoadBStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
        LoadBStroke.Color = Color3.fromRGB(37, 37, 37)
    
        Exit.Name = "Exit"
        Exit.Parent = OptionsFrame
        Exit.ZIndex = 2
        Exit.Size = UDim2.new(0, 153, 0, 17)
        Exit.BorderColor3 = Color3.fromRGB(0, 0, 0)
        Exit.Position = UDim2.new(0.515060246, 0, 0.46808511, 0)
        Exit.BorderSizePixel = 0
        Exit.BackgroundColor3 = Color3.fromRGB(21, 21, 21)
        Exit.AutoButtonColor = false
        Exit.TextColor3 = Color3.fromRGB(255, 255, 255)
        Exit.Text = "exit"
        Exit.TextStrokeTransparency = 1.0099999904632568
        Exit.TextSize = 14
        Exit.FontFace = Font.new("rbxasset://fonts/families/SourceSansPro.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
    
        ExitBCorner.Name = "ExitBCorner"
        ExitBCorner.Parent = Exit
        ExitBCorner.CornerRadius = UDim.new(0, 4)
    
        ExitBStroke.Name = "ExitBStroke"
        ExitBStroke.Parent = Exit
        ExitBStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
        ExitBStroke.Color = Color3.fromRGB(37, 37, 37)
    
        Shadow1.Name = "Shadow1"
        Shadow1.Parent = LoaderBackground
        Shadow1.AnchorPoint = Vector2.new(0.5, 0.5)
        Shadow1.ZIndex = 0
        Shadow1.Size = UDim2.new(1.20727181, 0, 3.67960405, 0)
        Shadow1.BorderColor3 = Color3.fromRGB(0, 0, 0)
        Shadow1.Rotation = 90
        Shadow1.BackgroundTransparency = 1
        Shadow1.Position = UDim2.new(0.542648137, 0, 0.600463212, 0)
        Shadow1.BorderSizePixel = 0
        Shadow1.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Shadow1.ImageColor3 = Color3.fromRGB(0, 0, 0)
        Shadow1.ScaleType = Enum.ScaleType.Tile
        Shadow1.Image = "rbxassetid://8992230677"
        Shadow1.SliceCenter = Rect.new(Vector2.new(0, 0), Vector2.new(99, 99))
    
        for i, v in pairs(Loader:GetDescendants()) do
            if hasProperty(v, "BackgroundTransparency") then v.BackgroundTransparency = 1 end
            if hasProperty(v, "TextTransparency") then v.TextTransparency = 1 end
            if hasProperty(v, "ImageTransparency") then v.ImageTransparency = 1 end
            if hasProperty(v, "Transparency") then v.Transparency = 1 end
        end
    
        local names_to_look_and_ignore = {
            "Information",
            "MainTitle",
            "InfoTitle",
            "OptionsTitle",
            "Shadow1"
        }
    
        function loaderOptions:FadeIn()
            for i, v in pairs(Loader:GetDescendants()) do
                if hasProperty(v, "BackgroundTransparency") and not table.find(names_to_look_and_ignore, v.Name) then Tween(v, TweenInfo.new(0.2), {BackgroundTransparency = 0}) end
                if hasProperty(v, "TextTransparency") then Tween(v, TweenInfo.new(0.2), {TextTransparency = 0}) end
                if hasProperty(v, "ImageTransparency") then Tween(v, TweenInfo.new(0.2), {ImageTransparency = 0}) end
                if hasProperty(v, "Transparency") and v:IsA("UIStroke") then Tween(v, TweenInfo.new(0.2), {Transparency = 0}) end
            end
        end
    
        function loaderOptions:FadeOut()
            for i, v in pairs(Loader:GetDescendants()) do
                if hasProperty(v, "BackgroundTransparency") then Tween(v, TweenInfo.new(0.2), {BackgroundTransparency = 1}) end
                if hasProperty(v, "TextTransparency") then Tween(v, TweenInfo.new(0.2), {TextTransparency = 1}) end
                if hasProperty(v, "ImageTransparency") then Tween(v, TweenInfo.new(0.2), {ImageTransparency = 1}) end
                if hasProperty(v, "Transparency") then Tween(v, TweenInfo.new(0.2), {Transparency = 1}) end
            end
        end
    
        function loaderOptions:ChangeInfoText(newInfoText)
            Information.Text = newInfoText
        end
    
        function loaderOptions:Load()
            loaderOptions:FadeOut()
            task.wait(0.2)
            loaderOptions.Completed:Fire()
            Loader:Destroy()
    
            loaderOptions.Exit = true
        end
        
        local function exit()
            loaderOptions:FadeOut()
            task.wait(0.2)
            Loader:Destroy()
    
            loaderOptions.Exit = true
        end
    
        local function init()
            Load_2.MouseButton1Click:Connect(loaderOptions.Load)
            Exit.MouseButton1Click:Connect(exit)
        
            loaderOptions:FadeIn()
        end
        
        init()
    end
    
    function loaderOptions.on_completed(script)
        loaderOptions.Completed.Event:Connect(script)
    end
    
    function loaderOptions.on_auto_load_stop(script)
        loaderOptions.AutoLoadStop.Event:Connect(script)
    end
    
    loaderOptions:new()
    
    local info_text_table = {
        "Welcome User",
        "Loaded Da Hood Version",
        "Version 1.0"
    }
    local info_text = table.concat(info_text_table, "\n")
    
    loaderOptions:ChangeInfoText(info_text)
    
    local function my_script()
        local chosen_game = string.lower(load_game)
        if chosen_game == "da_hood" then
            (function() -- src/Lua/Scripts/da_hood/da_hood.lua
                local AuxScan = { Objects = {} }
                
                function AuxScan:NewFunction(Name, Func)
                	AuxScan.Objects[Name] = Func
                end
                
                function AuxScan:Run()
                	for i, v in next, AuxScan.Objects do
                		if v then
                			v()
                		end
                	end
                end
                
                function AuxScan:ChangeText(TextObject, FuncName)
                    TextObject.Text = FuncName
                end
                
                local rng = getgenv()._random_number_generator
                	or loadstring(
                		game:HttpGetAsync("https://gist.githubusercontent.com/Exponential-Workload/593d4b56701133bc827902fe6fdf16a2/raw/random-primeless.lua")
                	)()({
                		2005763914272875421616019,
                		2120351898859582514457029,
                		1841887723764170988785987,
                		2310240924147278131725029,
                	})
                
                local da_hood = {
                    functions = {}
                }
                
                local camera = workspace.CurrentCamera
                
                local connect = include "Connect"
                local Lerp = include "lerp"
                local Loops = include "Loops"
                local DrawingClass = include "DrawingClass"
                
                local function capitalizeFirst(str)
                    return str:sub(1,1):upper() .. str:sub(2):lower()
                end
                
                local on_character_silentaim_shit_whatever_nigga = Instance.new("BindableEvent")
                
                -- due to visuals, I had to put this here.
                local aimassist = {
                    is_firing = false,
                
                    enabled = false,
                    keybind = false,
                    smoothness = {
                        smoothing_start = 0,
                        smoothing_end = 0,
                        smoothing_boost = 0
                    },
                    fieldofview = 100,
                    closest_mode = "none",
                    bones = nil,
                    character = nil,
                    
                    lock_target = false,
                
                    configuration = {
                        visibility = false,
                        wallcheck = false,
                        team = false,
                        friends = false,
                    },
                
                    jitter = {
                        x = 0,
                        y = 0,
                        z = 0
                    },
                
                    use_mouse_sensitivity = false,
                    use_camera = true, -- will be configurable when mousemoverel actually works
                
                    lock_target_state = false,
                
                    prediction = 0,
                
                    smoothingtype = "Linear",
                
                    custom_calculation = false,
                
                    auto_prediction = false,
                
                    enable_on_move = false
                }
                
                local silentaim = {
                    enabled = false,
                    keybind = false,
                    smoothness = 1000,
                    fieldofview = 100,
                    closest_mode = "none",
                    bones = nil,
                    character = nil,
                    
                    lock_target = false,
                
                    configuration = {
                        visibility = false,
                        wallcheck = false,
                        team = false,
                        friends = false,
                    },
                
                    lock_target_state = false,
                
                    prediction = 0,
                
                    smoothingtype = "Linear",
                
                    custom_calculation = false,
                
                    auto_prediction = false,
                
                    position = nil,
                
                    look_at = false,
                
                    sync_with_aim_assist = false,
                
                    update_time = 60,
                    old_frame = tick(),
                
                    fov_calculation = "pixels"
                }
                
                local Characters = {
                    Prediction = {
                        JumpTimes = {},
                        LandTimes = {},
                        AirTimes = {},
                        VerticalPositions = {},
                        VerticalVelocity = {},
                        AirPrediction = {},
                        PeakTimes = {},
                        OldHorizontalVelocity = {}
                    }
                }
                
                local current_mouse_arg = "UpdateMousePosI"
                
                local mouse_arg = {
                    -- dahood
                	[2788229376] = current_mouse_arg or nil,
                	[16033173781] = current_mouse_arg or nil,
                
                    -- der hood
                	[17895097441] = "UpdateMousePosition" or nil,
                    [17895262040] = "UpdateMousePosition" or nil,
                
                    [9825515356] = "MousePosUpdate" or nil
                }
                
                local bullet_support = {
                    [4312377180] = {
                        path = workspace:FindFirstChild("MAP") and workspace.MAP:FindFirstChild("Ignored") or nil,
                    },
                    [1008451066] = {
                        path = workspace:FindFirstChild("Ignored") and workspace.Ignored:FindFirstChild("Siren") and workspace.Ignored.Siren:FindFirstChild("Radius") or nil,
                    },
                    [6133219615] = {
                        path = workspace:FindFirstChild("Ignored") and workspace.Ignored:FindFirstChild("Siren") and workspace.Ignored.Siren:FindFirstChild("Radius") or nil,
                    },
                    [3985694250] = {
                        path = workspace and workspace:FindFirstChild("Ignored") or nil
                    }
                }
                
                local gun_is_firing = false
                local gun_conn = nil
                local previousammo = math.huge
                
                local please_load = true
                
                --[[
                local placeinfo = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId)
                local updated = placeinfo.Updated
                
                local function validate_data(update_date, new_update_data)
                    if new_update_data == update_date then
                        return true
                    end
                    return false
                end
                ]]
                
                --[[
                if game.PlaceId == 2788229376 then
                    please_load = validate_data("2024-06-27T02:01:30.353Z", updated)
                elseif game.PlaceId == 16033173781 then
                    please_load = validate_data("2024-06-27T02:02:04.727Z", updated)
                else
                    please_load = true
                end]]
                
                if please_load then
                    do
                        (function() -- src/Lua/Scripts/da_hood/things.lua
                            function da_hood.functions:is_alive(player)
                            	return player
                            			and player.Character
                            			and player.Character:FindFirstChildOfClass("Humanoid")
                            			and player.Character:FindFirstChildOfClass("Humanoid").Health > 0
                            			and true
                            		or false
                            end
                            
                            function da_hood.functions:is_localplayer_alive()
                            	return self:is_alive(LocalPlayer)
                            end
                            
                            function da_hood.functions:is_moving(player)
                            	if player then
                            		if self:is_alive(player) then
                            			local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                            			return humanoid.MoveDirection.magnitude > 0
                            		end
                            	end
                            	return false
                            end
                            
                            function da_hood.functions:is_localplayer_moving()
                            	return self:is_moving(LocalPlayer)
                            end
                            
                            function da_hood.functions:wall_check(Character)
                                local Ray = Ray.new(camera.CFrame.Position, (Character.PrimaryPart.Position - camera.CFrame.Position))
                                local IgnoreList = {camera, LocalPlayer.Character, Character, Character.Parent}
                                local PartHit = workspace:FindPartOnRayWithIgnoreList(Ray, IgnoreList)
                                if not PartHit then
                                    return true
                                end
                                return false
                            end
                            
                            -- hahahaha, actually did this due to me being lazy to do something like player.Character in getnearestplayertomouse so I did this little shit üòÄüòÄ
                            function da_hood.functions:getentities()
                            	local entities = {}
                            	for _, player in ipairs(playerService:GetPlayers()) do
                            		if player == LocalPlayer then
                            			continue
                            		end
                                    
                            		if not da_hood.functions:is_alive(player) then
                            			continue
                            		end
                                    
                            		if table.find(entities, player.Character) then
                            			continue
                            		end
                            
                            		local character = player.Character
                            		table.insert(entities, character)
                            	end
                            	return entities
                            end
                            
                            function da_hood.functions:getnearestplayertomouse(distance, settings)
                            	local entity = nil
                            	local distance = distance
                            	for i, v in next, self:getentities() do
                                    if settings.friends and playerService[v.Name]:IsFriendsWith(LocalPlayer.UserId) then
                                        continue 
                                    end
                            
                                    if settings.team and playerService[v.Name].Team == LocalPlayer.Team then
                                        continue 
                                    end
                            
                                    local humanoidrootpart = v:FindFirstChild("HumanoidRootPart")
                                    if not humanoidrootpart then
                                        continue
                                    end
                            
                                    local humanoid = v:FindFirstChild("Humanoid")
                                    if not humanoid then
                                        continue
                                    end
                            
                            		local head = v:FindFirstChild("Head")
                            		if not head then
                            			continue
                            		end
                            
                                    if humanoid.Health == 0 then
                                        continue
                                    end
                            
                            		local hitbox_pos = v:FindFirstChild("Head").Position
                            		local v2_pos, onscreen = camera:WorldToViewportPoint(hitbox_pos)
                            
                            		if settings.visibility and not onscreen then
                            			continue
                            		end
                            
                                    if settings.wallcheck and not self:wall_check(v) then
                                        continue
                                    end
                            
                            		local magnitude = (Vector2New(v2_pos.X, v2_pos.Y) - inputService:GetMouseLocation()).Magnitude
                            		if magnitude < distance then
                            			entity = v
                            			distance = magnitude
                            		end
                            	end
                            	return entity
                            end
                            
                            -- HAD TO FUCKING MAKE ANOTHER ONE FOR SILENT AIM
                            function da_hood.functions:custom_getnearestplayertomouse(distance, settings)
                            	local entity = nil
                            	local distance = distance
                            	for i, v in next, self:getentities() do
                                    if settings.friends and playerService[v.Name]:IsFriendsWith(LocalPlayer.UserId) then
                                        continue 
                                    end
                            
                                    if settings.team and playerService[v.Name].Team == LocalPlayer.Team then
                                        continue 
                                    end
                            
                                    local humanoidrootpart = v:FindFirstChild("HumanoidRootPart")
                                    if not humanoidrootpart then
                                        continue
                                    end
                            
                                    local humanoid = v:FindFirstChild("Humanoid")
                                    if not humanoid then
                                        continue
                                    end
                            
                            		local head = v:FindFirstChild("Head")
                            		if not head then
                            			continue
                            		end
                            
                                    if humanoid.Health == 0 then
                                        continue
                                    end
                            
                            		local hitbox_pos = v:FindFirstChild("Head").Position
                            		local v2_pos, onscreen = camera:WorldToViewportPoint(hitbox_pos)
                            
                            		if settings.visibility and not onscreen then
                            			continue
                            		end
                            
                                    if settings.wallcheck and not self:wall_check(v) then
                                        continue
                                    end
                            
                            		local magnitude = (Vector2New(v2_pos.X, v2_pos.Y) - inputService:GetMouseLocation()).Magnitude
                            		if magnitude < distance then
                            			entity = v
                            			distance = magnitude
                            		end
                            	end
                            	return entity
                            end
                            
                            function da_hood.functions:getclosestpart(character, config)
                            	local Distance = MathHuge
                            	local MousePosition = inputService:GetMouseLocation()
                            	local ClosestPart
                            	for i, v in ipairs(character:GetChildren()) do
                            		if #config == 0 then
                            			continue
                            		end
                            
                            		if v:IsA("Part") or v:IsA("MeshPart") then
                            			if TableFind(config, v.Name) then
                            				local Point, OnScreen = camera:WorldToViewportPoint(v.Position)
                            				if not OnScreen then
                            					ClosestPart = character.HumanoidRootPart
                            					continue
                            				end
                            				local Magnitude = (MousePosition - Vector2New(Point.X, Point.Y)).Magnitude
                            				if Magnitude < Distance then
                            					Distance = Magnitude
                            					ClosestPart = v
                            				end
                            			end
                            		end
                            	end
                            
                            	return ClosestPart
                            end
                            
                            function da_hood.functions:closestpoint(part)
                            	local RaycastParamsClosestPoint = RaycastParamsNew()
                            	RaycastParamsClosestPoint.FilterType = Enum.RaycastFilterType.Whitelist
                            	RaycastParamsClosestPoint.FilterDescendantsInstances = { part }
                            
                            	local MouseRay = Mouse.UnitRay
                            	MouseRay = MouseRay.Origin + (MouseRay.Direction * (part.Position - MouseRay.Origin).Magnitude)
                            	local Origin = (MouseRay.Y >= (part.Position - part.Size / 2).Y and MouseRay.Y <= (part.Position + part.Size / 2).Y)
                            			and (part.Position + Vector3New(0, -part.Position.Y + MouseRay.Y, 0))
                            		or part.Position
                            
                            	local Raycast = workspace:Raycast(MouseRay, (Origin - MouseRay), RaycastParamsClosestPoint)
                            	return Raycast and Raycast.Position or Mouse.Hit.Position
                            end
                            
                            -- this is so fucking retarded.
                            function da_hood.functions:mouse_aim(arguments)
                            	if not type(arguments) == "table" then
                            		return
                            	end
                            
                            	local smoothness = arguments.smoothness
                            	local position = arguments.position
                            	local use_mouse_sensitivity = arguments.use_mouse_sensitivity
                            	local jitter = arguments.jitter
                            	local use_camera = arguments.use_camera
                            
                            	if use_camera then
                            		return
                            	end
                            
                            	if not position then
                            		return
                            	end
                            
                            	local CalculateJitter = function(vector1)
                            		if vector1 == 0 then
                            			return 0
                            		end
                            		return rng(vector1 * -1, vector1)
                            	end
                            
                            	local screen_pos, on_screen = camera:WorldToViewportPoint(position)
                            
                            	if not on_screen then
                            		return
                            	end
                            
                            	if use_mouse_sensitivity then
                            		smoothness = smoothness / (userGameSettings.MouseSensitivity / 0.20016)
                            	end
                            
                            	local mousepos = inputService:GetMouseLocation()
                            	local X, Y = screen_pos.X, screen_pos.Y
                            	local AimPosX, AimPosY = X - mousepos.X, Y - mousepos.Y
                            	
                            	mousemoverel(AimPosX / 10, AimPosY/10)
                            end
                            
                            -- da hood custom prediction
                            -- taken from fatality.
                            function da_hood.functions:custom_prediction(HitPosition, Vel, BulletTravel, Configuration)
                            	local Character = Configuration.Character
                                local Prediction = Configuration.Prediction
                                local AutoPrediction = Configuration.AutoPrediction
                                local Resolver = Configuration.Resolver
                                local ResolvedVelocity = Configuration.ResolverValue
                                local PredictionValue = ((AutoPrediction == true) and (BulletTravel / 1000)) or Prediction;
                            	
                                local Offsets = {X = 0.111, Y = 0.03}
                                local OffsetX = PredictionValue + Offsets.X
                                local OffsetY = PredictionValue + Offsets.Y
                            
                                local HitVelocity = Vel
                            
                                local timeSinceJump = Characters.Prediction.JumpTimes;
                                local timeToLand = Characters.Prediction.LandTimes;
                                local timeInAir = Characters.Prediction.AirTimes;
                                local initialHeight = Characters.Prediction.VerticalPositions
                                local initialVelocity = Characters.Prediction.VerticalVelocity
                            
                                timeSinceJump[Character] = timeSinceJump[Character] or 0;
                                timeToLand[Character] = timeToLand[Character] or 0;
                                timeInAir[Character] = timeInAir[Character] or 0;
                                initialHeight[Character] = initialHeight[Character] or HitPosition.Y;
                            
                                if tick() - timeSinceJump[Character] > timeToLand[Character] then
                                    initialHeight[Character] = HitPosition.Y;
                                    timeInAir[Character] = 0;
                                    timeToLand[Character] = 0;
                                    timeSinceJump[Character] = 0;
                            
                                    if HitVelocity.Y > 10 then
                                        timeSinceJump[Character] = tick();
                            
                                        local g = workspace.Gravity;
                                        local u = 50;
                                        local t_land = (2 * u) / g;
                            
                                        initialVelocity[Character] = u;
                                        initialHeight[Character] = HitPosition.Y;
                                        timeToLand[Character] = t_land;
                                    end
                                else
                                    timeInAir[Character] = tick() - timeSinceJump[Character];
                                end
                            
                                local vertical = HitPosition.Y
                                local height = initialHeight[Character]
                                local horizontal = (HitPosition + HitVelocity * OffsetX) * Vector3.new(1, 0, 1);
                            
                                if timeInAir[Character] > 0 then
                                    local g = workspace.Gravity
                                    local u = initialVelocity[Character]
                                    local y = height
                            
                                    local t_air = timeInAir[Character]
                                    local t_ping = OffsetY
                            
                                    local t = t_air + t_ping
                                    local t_2 = t*t
                                    vertical = y + u * t - 0.48 * g * t_2
                                end
                            
                                return Vector3.new(horizontal.X, math.max(height, vertical) , horizontal.Z);
                            end
                            
                            function da_hood.functions:camera_aim(arguments)
                            	-- oh my loving dear programming life.
                            	-- too much things in arguments üòê
                            
                            	if not type(arguments) == "table" then
                            		return
                            	end -- dev would be a nigger if this actually happens.
                            
                            	local smoothness = arguments.smoothness
                            	local position = arguments.position
                            	local use_mouse_sensitivity = arguments.use_mouse_sensitivity
                            	local use_camera = arguments.use_camera
                            	local character = arguments.character
                            	local prediction = arguments.prediction
                            
                            	local smoothtype = arguments.smoothingtype
                            
                            	local jitter = arguments.jitter
                            	local jitterx = jitter.x
                            	local jittery = jitter.y
                            	local jitterz = jitter.z
                            
                            	local custom_calculation = arguments.custom_calculation
                            	local auto_prediction = arguments.auto_prediction
                            
                            	if not use_camera then
                            		self:mouse_aim(arguments)
                            		return
                            	end
                            
                            	if not position then
                            		return
                            	end
                            
                            	if use_mouse_sensitivity then
                            		smoothness = smoothness / (userGameSettings.MouseSensitivity / 0.20016)
                            	end
                            
                            	local CalculateJitter = function(vector1)
                            		if vector1 == 0 then
                            			return 0
                            		end
                            		return rng(vector1 * -1, vector1)
                            	end
                            
                            	local jitterNum1 = CalculateJitter(jitterx)
                            	local jitterNum2 = CalculateJitter(jittery)
                            	local jitterNum3 = CalculateJitter(jitterz)
                            
                            	local jFinal = Vector3New(jitterNum1, jitterNum2, jitterNum3)
                            
                            	-- pov, you avoid else in if statements ü§£ü§£ü§£
                            	local function calculateNormal()
                            		local player_velocity = character.HumanoidRootPart.Velocity
                            
                            		local normal = arguments.position + player_velocity * prediction
                            		position = CFrameNew(camera.CFrame.Position, normal + jFinal )
                            	end
                            
                            	if custom_calculation then
                            		-- thanks..
                            		local ping = tonumber(game:GetService("Stats"):FindFirstChild("PerformanceStats").Ping:GetValue())
                            		ping = math.floor(ping)
                            
                            		local player_jump = character.Humanoid:GetState() == "Freefall" and true or false
                            		local player_velocity = character.HumanoidRootPart.Velocity
                            
                            		local prediction_value = player_jump and pred_y or pred_x
                            
                            		local aimpos = self:custom_prediction(arguments.position, player_velocity, ping, {
                            			Character = character,
                            			Prediction = prediction_value,
                            			AutoPrediction = auto_prediction,
                            			Resolver = false,
                            			ResolverValue = nil
                            		})
                            		position = CFrame.new(camera.CFrame.Position, aimpos)
                            	else calculateNormal()
                            	end
                            	
                            
                            	camera.CFrame = camera.CFrame:Lerp(position, smoothness, Enum.EasingStyle[smoothtype], Enum.EasingDirection.InOut)
                            
                            	-- might add more shit soon
                            end
                            
                            function da_hood.functions:get_main_event()
                            	local main_event = replicatedStorage:FindFirstChild("MainEvent")
                            	if main_event then
                            		return main_event
                            	end
                            	return nil
                            end
                            
                            -- @getgun
                            -- does not have "is_localplayer_alive" func
                            -- must be run after "is_localplayer_alive" func
                            function da_hood.functions:get_gun()
                            	local gun
                            	for index, object in pairs(LocalPlayer.Character:GetChildren()) do
                            		if object:IsA("Tool") then
                            			if (object:FindFirstChild("Script") or object:FindFirstChild("GunScript") or object:FindFirstChild("weaponInfo")) then
                            				gun = object
                            				break
                            			end
                            		end
                            	end
                            	return gun
                            end
                            
                            function da_hood.functions:get_gun_2(player)
                            	local info = {
                            		isgunequipped = false,
                            		ammo = nil,
                            		tool = nil
                            	}
                            
                            	local tool = player.Character:FindFirstChildWhichIsA("Tool")
                            
                            	if not tool then return end
                            
                            	if game.GameId == 1958807588 then
                            		local ArmoryGun = player.Information.Armory:FindFirstChild(tool.Name)
                            		if ArmoryGun then
                            			info.tool = tool
                            			info.ammo = ArmoryGun.Ammo.Normal
                            			info.isgunequipped = true
                            		end
                            	elseif game.GameId == 3634139746 then
                            		local ammo = tool.Script:FindFirstChild("Ammo")
                            		if ammo then
                            			info.tool = tool
                            			info.ammo = ammo
                            			info.isgunequipped = true
                            		end
                            	elseif game.GameId == 5743758816 then
                            		local ammo = tool:FindFirstChild("AMMO")
                            		if ammo then
                            			info.tool = tool
                            			info.ammo = ammo
                            			info.isgunequipped = true
                            		end
                            	else
                            		for _, obj in pairs(tool:GetChildren()) do
                            			if obj.Name:lower():find("ammo") and not obj.Name:lower():find("max") then
                            				info.tool = tool
                            				info.ammo = obj
                            				info.isgunequipped = true
                            			end
                            		end
                            	end
                            	return info
                            end
                            
                            function da_hood.functions:get_gun_from_character(character)
                            	local gun
                            	for index, object in pairs(character:GetChildren()) do
                            		if object:IsA("Tool") then
                            			if (object:FindFirstChild("Script") or object:FindFirstChild("GunScript") or object:FindFirstChild("weaponInfo")) then
                            				gun = object
                            				break
                            			end
                            		end
                            	end
                            	return gun
                            end
                            
                            function mouse_arg:Get()
                            	if not mouse_arg[game.PlaceId] then
                            		return "UpdateMousePos"
                            	end
                            	return mouse_arg[game.PlaceId]
                            end
                            
                            function da_hood.functions:get_aim_arg() -- shitty
                            	return mouse_arg:Get()
                            end
                        end)()
                    end
                    
                    local Interface = UserInterface:Create{title = 'drax<font color="rgb(168, 157, 159)">.dahood</font>',}
                    
                    do -- src/Lua/Scripts/da_hood/components/
                        do -- src/Lua/Scripts/da_hood/components/a_aimassist.lua
                            -- THIS SHIT IS ACTUALLY P!112!!!! üò±üò±üò±
                            -- üòéüòéüòéüòéüòé
                            
                            local update_time = 60
                            local old_frame = tick()
                            local current_smoothing = 1
                            local smoothing_animation = "Linear"
                            
                            local function clamp(a, lowerNum, higher)
                            	if a > higher then
                            		return higher
                            	elseif a < lowerNum then
                            		return lowerNum
                            	else
                            		return a
                            	end
                            end
                            
                            local value = Instance.new("NumberValue")
                            value.Name = "TweenValue"
                            value.Value = 0
                            
                            value:GetPropertyChangedSignal("Value"):Connect(function()
                                current_smoothing = value.Value
                            end)
                            
                            local changed = {
                                start = Instance.new("BindableEvent"),
                                end_value = Instance.new("BindableEvent"),
                                boost_value = Instance.new("BindableEvent")
                            }
                            
                            task.spawn(function ()
                                while task.wait() do
                                    local start_value = aimassist.smoothness.smoothing_start
                                    local end_value = aimassist.smoothness.smoothing_end
                                    local boost_value = aimassist.smoothness.smoothing_boost
                                
                                    local tweeninfo = TweenInfo.new(
                                        boost_value,
                                        Enum.EasingStyle[smoothing_animation],
                                        Enum.EasingDirection.Out
                                    )
                                
                                    local tween1 = tweenService:Create(value, tweeninfo, {Value = end_value})
                                    local tween2 = tweenService:Create(value, tweeninfo, {Value = start_value})
                            
                                    tween1:Play()
                                    task.wait(aimassist.smoothness.smoothing_boost)
                                    tween2:Play()
                                    task.wait(aimassist.smoothness.smoothing_boost)
                                end
                            end)
                            
                            function aimassist:get_position()
                                local position
                                local bone = aimassist.bones:GetValues()
                            
                                local closest_mode = aimassist.closest_mode
                                local character = aimassist.character
                            
                                if type(bone) == "table" and #bone > 0 then
                                    if closest_mode ~= "none" then
                                        if closest_mode == "closest part" then
                                            local newBone = tostring(da_hood.functions:getclosestpart(character, bone))
                                            if type(newBone) == "string" and newBone ~= "" and character:FindFirstChild(newBone) then -- very superior check üòé could do a better one but meh
                                                position = character[newBone].Position
                                            end
                                        elseif closest_mode == "closest point" then
                                            local newBone = tostring(da_hood.functions:getclosestpart(character, bone))
                                            if type(newBone) == "string" and newBone ~= "" and character:FindFirstChild(newBone) then
                                                position = da_hood.functions:closestpoint(character[newBone])
                                            end
                                        end
                                    end
                                end
                            
                                if type(bone) == "string" and bone ~= "" and character:FindFirstChild(bone) then
                                    position = character[bone].Position
                                end
                            
                                return position
                            end
                            
                            function aimassist:aim()
                                da_hood.functions:camera_aim({
                                    smoothness = current_smoothing,
                                    use_mouse_sensitivity = aimassist.use_mouse_sensitivity,
                                    jitter = aimassist.jitter,
                                    position = aimassist:get_position(),
                                    use_camera = aimassist.use_camera,
                                    prediction = aimassist.prediction,
                                    character = aimassist.character,
                                    smoothingtype = aimassist.smoothingtype,
                                    custom_calculation = aimassist.custom_calculation,
                                    auto_prediction = aimassist.auto_prediction
                                })
                            end
                            
                            function aimassist:enable()
                                if ((tick() - old_frame) >= (1/update_time)) then
                                    if not aimassist.enabled then
                                        return end
                                
                                    if not aimassist.keybind then
                                        return end
                            
                                    if not aimassist.character then
                                        return end
                            
                                    if aimassist.enable_on_move then
                                        if not da_hood.functions:is_localplayer_moving() then return end
                                        aimassist:aim()
                                    else
                                        aimassist:aim()
                                    end
                                end
                            end
                            
                            local run_gac = false
                            
                            local function get_aim_assist_character()
                                if aimassist.lock_target then
                                    local char = da_hood.functions:getnearestplayertomouse(aimassist.fieldofview, aimassist.configuration)
                                    if char ~= nil and aimassist.lock_target_state == false then
                                        aimassist.lock_target_state = true
                                        aimassist.character = char
                                    end
                                else
                                    aimassist.character = da_hood.functions:getnearestplayertomouse(aimassist.fieldofview, aimassist.configuration)
                                end
                            end
                            
                            local g_a_c = function () -- wanted to make it syntatcic sugar but wateva!! 
                                while run_gac do -- foking cwazyy matee
                                    TaskWait(0.01)
                            
                                    get_aim_assist_character()
                                end
                                aimassist.character = nil
                            end
                            
                            -- chat is this p100??
                            local gacHandlers = {}
                            gacHandlers.stop = function() run_gac = false end
                            gacHandlers.resume = function() run_gac = true coroutine.wrap(g_a_c)() end
                            
                            -- interface
                            local aim_assist = Interface:Tab( "aim assist" )
                            
                            local main = aim_assist:Section("main", "left")
                            local settings = aim_assist:Section("settings", "left")
                            local bone = aim_assist:Section("bone/s", "right")
                            local jitter_sec = aim_assist:Section("jitter", "right")
                            
                            -- pretty shitty but its whatever
                            local bone_Selected
                            bone:Dropdown({ title = "closest mode", values = {"none", "closest part", "closest point"}, default = "none", multi = false, callback = function (value)
                                aimassist.closest_mode = value
                                if value == "none" then
                                    bone_Selected:SetMulti(false)
                                elseif value == "closest point" then
                                    bone_Selected:SetMulti(true)
                                elseif value == "closest part" then
                                    bone_Selected:SetMulti(true)
                                end
                            end })
                            
                            bone_Selected = bone:BoneSelector({ multi = false, default = "Head" })
                            bone_Selected:Set("Head")
                            aimassist.bones = bone_Selected
                            
                            local main_enabled = main:Toggle({ title = "enabled", default = false, callback = function (bool)
                                aimassist.enabled = bool
                            end })
                            main_enabled:Keybind({ keybindlist = true, keybindname = "aimassist:", callback = function (bool)
                                aimassist.keybind = bool
                                if bool then
                                    gacHandlers.resume()
                            
                                    aimassist.character = nil
                                    aimassist.lock_target_state = false
                            
                                    Loops:AddToRenderStepped("aimassist", aimassist.enable)
                                else
                                    gacHandlers.stop()
                            
                                    aimassist.character = nil
                                    aimassist.lock_target_state = false
                            
                                    Loops:RemoveFromRenderStepped("aimassist")
                                end
                            end })
                            
                            main:Slider({ title = "field of view", suffix = "%", min = 0, max = 100, default = 0,float = 0.1, mintext = "unlimited", callback = function (value)
                                if value == 0 then
                                    aimassist.fieldofview = math.huge
                                elseif value > 0 then
                                    local fov = value / 100
                                    fov = fov * 1000
                                    
                                    aimassist.fieldofview = fov
                                end
                            end })
                            
                            main:TextBox({ title = "prediction", default = "", placeholder = "input prediction here", ClearTextOnFocus = false, callback = function (value)
                                if value == "" then
                                    aimassist.prediction = 0
                                else
                                    aimassist.prediction = value
                                end
                            end })
                            
                            main:Toggle({ title = "enable on move", default = false, callback = function (bool)
                                aimassist.enable_on_move = bool
                            end })
                            
                            main:Toggle({ title = "use mouse sensitivty", default = false, callback = function (bool)
                                aimassist.use_mouse_sensitivity = bool
                            end })
                            
                            main:Toggle({ title = "custom calculation", default = false, callback = function (bool)
                                aimassist.custom_calculation = bool
                            end })
                            
                            main:Toggle({ title = "auto prediction", default = false, callback = function (bool)
                                aimassist.auto_prediction = bool
                            end })
                            
                            main:Slider({ title = "calculation speed", suffix = "hz", min = 20, max = 1000, default = 1000,float = 1, callback = function (value)
                                update_time = value
                            end })
                            
                            main:Slider({ title = "start smoothing", suffix = "%", min = 0, max = 100, default = 0,float = 0.1, mintext = "force angles", callback = function (value)
                                changed.start:Fire()
                                if value == 0 then
                                    aimassist.smoothness.smoothing_start = 1
                                else
                                    local start_value = value / 1000
                                    aimassist.smoothness.smoothing_start = start_value
                                end
                            end })
                            
                            main:Slider({ title = "end smoothing", suffix = "%", min = 0, max = 100, default = 0,float = 0.1, mintext = "force angles", callback = function (value)
                                changed.end_value:Fire()
                                if value == 0 then
                                    aimassist.smoothness.smoothing_end = 1
                                else
                                    local start_value = value / 1000
                                    aimassist.smoothness.smoothing_end = start_value
                                end
                            end })
                            
                            main:Slider({ title = "smoothing delay", suffix = "/s", min = 1, max = 200, default = 1,float = 0.1, callback = function (value)
                                changed.boost_value:Fire()
                                aimassist.smoothness.smoothing_boost = value / 1000
                            end })
                            
                            --[[
                            main:Toggle({ title = "use camera", default = false, callback = function (bool)
                                aimassist.use_camera = bool
                            end })]]
                            
                            main:Dropdown({ title = "smoothing animation", values = {"linear", "quadratic", "cubic", "elastic"}, default = "linear", multi = false, callback = function (value)
                                smoothing_animation = capitalizeFirst(value)
                            end })
                            
                            main:Dropdown({ title = "smoothing easing style", values = {"linear", "exponential"}, default = "linear", multi = false, callback = function (value)
                                aimassist.smoothingtype = capitalizeFirst(value)
                            end })
                            
                            settings:Toggle({ title = "sticky aim", default = false, callback = function (bool)
                                aimassist.lock_target = bool if bool == false then aimassist.lock_target_state = false end
                            end })
                            
                            settings:Toggle({ title = "don't aim friends", default = false, callback = function (bool)
                                aimassist.configuration.friends = bool
                            end })
                            
                            settings:Toggle({ title = "don't aim team", default = false, callback = function (bool)
                                aimassist.configuration.team = bool
                            end })
                            
                            settings:Toggle({ title = "visibility check", default = true, callback = function (bool)
                                aimassist.configuration.visibility = bool
                            end })
                            
                            settings:Toggle({ title = "wall check", default = false, callback = function (bool)
                                aimassist.configuration.wallcheck = bool
                            end })
                            
                            jitter_sec:Slider({ title = "jitter x", suffix = "", min = 0, max = 5, default = 0, float = 0.1, callback = function (value)
                                aimassist.jitter.x = value
                            end })
                            jitter_sec:Slider({ title = "jitter y", suffix = "", min = 0, max = 5, default = 0, float = 0.1, callback = function (value)
                                aimassist.jitter.y = value
                            end })
                            jitter_sec:Slider({ title = "jitter z", suffix = "", min = 0, max = 5, default = 0, float = 0.1, callback = function (value)
                                aimassist.jitter.z = value
                            end })
                        end
                        do -- src/Lua/Scripts/da_hood/components/b_silentaim.lua
                            -- elegant loves titties!!! if he fucking does not, he is gay. people like me are excluded, sadly.
                            
                            function silentaim:get_position()
                                local position
                                local bone = silentaim.bones:GetValues()
                            
                                local closest_mode = silentaim.closest_mode
                            
                                if type(bone) == "table" and #bone > 0 then
                                    if closest_mode ~= "none" then
                                        if closest_mode == "closest part" then
                                            local newBone = tostring(da_hood.functions:getclosestpart(silentaim.character, bone))
                                            if type(newBone) == "string" and newBone ~= "" and silentaim.character:FindFirstChild(newBone) then -- very superior check üòé could do a better one but meh
                                                position = silentaim.character[newBone].Position
                                            end
                                        elseif closest_mode == "closest point" then
                                            local newBone = tostring(da_hood.functions:getclosestpart(silentaim.character, bone))
                                            if type(newBone) == "string" and newBone ~= "" and silentaim.character:FindFirstChild(newBone) then
                                                position = da_hood.functions:closestpoint(silentaim.character[newBone])
                                            end
                                        end
                                    end
                                end
                            
                                if type(bone) == "string" and bone ~= "" and silentaim.character:FindFirstChild(bone) then
                                    position = silentaim.character[bone].Position
                                end
                            
                                local player_velocity = silentaim.character.HumanoidRootPart.Velocity
                            
                                local clampedY = math.clamp(player_velocity.Y, 0, 9e9)
                                player_velocity = Vector3New(player_velocity.X, clampedY, player_velocity.Z)
                            
                                local function calculateNormal()
                                    position = position + player_velocity * silentaim.prediction
                            	end
                            
                            	if silentaim.custom_calculation then
                            		-- thanks..
                            		local ping = tonumber(game:GetService("Stats"):FindFirstChild("PerformanceStats").Ping:GetValue())
                            		ping = math.floor(ping)
                            
                            		position = da_hood.functions:custom_prediction(position, player_velocity, ping, {
                            			Character = silentaim.character,
                            			Prediction = silentaim.prediction,
                            			AutoPrediction = silentaim.auto_prediction,
                            			Resolver = false,
                            			ResolverValue = nil
                            		})
                            	else calculateNormal()
                            	end
                            
                                return position
                            end
                            
                            function silentaim:enable()
                                if not ((tick() - silentaim.old_frame) >= (1/silentaim.update_time)) then
                                    return end
                            
                                if not da_hood.functions:is_localplayer_alive() then
                                    silentaim.position = nil
                                    return end
                            
                                if not silentaim.enabled then
                                    silentaim.position = nil
                                    return end
                            
                                if not silentaim.keybind then
                                    silentaim.position = nil
                                    return end
                            
                                if not silentaim.character then
                                    silentaim.position = nil
                                    return end
                            
                                pcall(function ()
                                    if game.PlaceId == 9825515356 then
                                        silentaim.position = silentaim:get_position() + Vector3.new(25,100,25)
                                    else
                                        silentaim.position = silentaim:get_position()
                                    end
                                end)
                            end
                            
                            local function aim()
                                if not silentaim.position then
                                    return end
                            
                                if not silentaim.enabled then
                                    return end
                            
                                if not silentaim.keybind then
                                    return end
                            
                                if not silentaim.character then
                                    return end
                            
                                local main_event = da_hood.functions:get_main_event()
                                local aim_Arg = da_hood.functions:get_aim_arg()
                                if main_event and aim_Arg ~= nil then
                                    main_event:FireServer(aim_Arg, silentaim.position)
                                    silentaim.is_firing = true
                                    on_character_silentaim_shit_whatever_nigga:Fire()
                                end
                            end
                            
                            local previous_gun = nil
                            function silentaim:init()
                                LocalPlayer.Character.ChildAdded:Connect(function (Child)
                                    local gun = da_hood.functions:get_gun_2(LocalPlayer)
                                    if Child:IsA("Tool") and Child ~= previous_gun and gun and Child == gun.tool then
                                        previous_gun = Child
                                        previousammo = 999
                            
                                        if gun_conn then
                                            gun_conn:Disconnect()
                                            gun_conn = nil
                                        end
                                    end
                                    if Child:IsA("Tool") then
                                        if (Child:FindFirstChild("Script") or Child:FindFirstChild("GunScript") or Child:FindFirstChild("weaponInfo")) then
                                            Child.Activated:Connect(aim) -- neat
                                            Child.Deactivated:Connect(function()
                                                silentaim.is_firing = false
                                            end)
                                        end
                                    end
                                end)
                            
                                LocalPlayer.Character.ChildRemoved:Connect(function (object)
                                    if object:IsA("Tool") and object == previous_gun then
                                        if gun_conn then
                                            gun_conn:Disconnect()
                                            gun_conn = nil
                                        end
                                    end
                                end)
                            end
                            
                            LocalPlayer.CharacterAdded:Connect(silentaim.init)
                            silentaim:init()
                            
                            local run_gac = false
                            
                            local function normal()
                                if silentaim.lock_target then
                                    local char = da_hood.functions:custom_getnearestplayertomouse(silentaim.fieldofview, silentaim.configuration)
                                    if char ~= nil and silentaim.lock_target_state == false then
                                        silentaim.lock_target_state = true
                                        silentaim.character = char
                                    end
                                else
                                    silentaim.character = da_hood.functions:custom_getnearestplayertomouse(silentaim.fieldofview, silentaim.configuration)
                                end
                            end
                            
                            local function synced()
                                if aimassist.character then
                                    silentaim.character = aimassist.character
                                else
                                    silentaim.character = nil
                                end
                            end
                            
                            local g_a_c = function () -- wanted to make it syntatcic sugar but wateva!! 
                                while run_gac do -- foking cwazyy matee
                                    TaskWait(0.01)
                            
                                    local action = silentaim.sync_with_aim_assist and synced or normal
                                    action()
                                end
                                silentaim.character = nil
                            end
                            
                            -- chat is this p100??
                            local gacHandlers = {}
                            gacHandlers.stop = function() run_gac = false end
                            gacHandlers.resume = function() run_gac = true coroutine.wrap(g_a_c)() end
                            
                            local silent_aim = Interface:Tab( "silent aim" )
                            
                            local main = silent_aim:Section("main", "left")
                            local settings = silent_aim:Section("settings", "left")
                            local bone = silent_aim:Section("bone/s", "right")
                            
                            local bone_Selected
                            bone:Dropdown({ title = "closest mode", values = {"none", "closest part", "closest point"}, default = "none", multi = false, callback = function (value)
                                silentaim.closest_mode = value
                                if value == "none" then
                                    bone_Selected:SetMulti(false)
                                elseif value == "closest point" then
                                    bone_Selected:SetMulti(true)
                                elseif value == "closest part" then
                                    bone_Selected:SetMulti(true)
                                end
                            end })
                            
                            bone_Selected = bone:BoneSelector({ multi = false, default = "HumanoidRootPart" })
                            silentaim.bones = bone_Selected
                            bone_Selected:Set("HumanoidRootPart")
                            
                            local main_enabled = main:Toggle({ title = "enabled", default = false, callback = function (bool)
                                silentaim.enabled = bool
                            end })
                            main_enabled:Keybind({ keybindlist = true, keybindname = "silentaim:", callback = function (bool)
                                silentaim.keybind = bool
                                if bool then
                                    gacHandlers.resume()
                            
                                    silentaim.character = nil
                                    silentaim.lock_target_state = false
                            
                                    Loops:AddToHeartbeat("silentaim", silentaim.enable)
                                else
                                    gacHandlers.stop()
                            
                                    silentaim.character = nil
                                    silentaim.lock_target_state = false
                            
                                    Loops:RemoveFromHeartbeat("silentaim")
                                end
                            end })
                            
                            main:Slider({ title = "field of view", suffix = "%", min = 0, max = 100, default = 0,float = 0.1, mintext = "unlimited", callback = function (value)
                                if value == 0 then
                                    silentaim.fieldofview = math.huge
                                elseif value > 0 then
                                    local fov = value / 100
                                    fov = fov * 1000
                                    
                                    silentaim.fieldofview = fov
                                end
                            end })
                            
                            main:Slider({ title = "calculation speed", suffix = "hz", min = 20, max = 1000, default = 1000,float = 1, callback = function (value)
                                silentaim.update_time = value
                            end })
                            
                            main:Toggle({ title = "sync with aimassist", default = false, callback = function (bool)
                                silentaim.sync_with_aim_assist = bool
                            end })
                            
                            main:Toggle({ title = "custom calculation", default = false, callback = function (bool)
                                silentaim.custom_calculation = bool
                            end })
                            
                            main:Toggle({ title = "auto prediction", default = false, callback = function (bool)
                                silentaim.auto_prediction = bool
                            end })
                            
                            main:TextBox({ title = "prediction", default = "", placeholder = "input prediction here", ClearTextOnFocus = false, callback = function (value)
                                if value == "" then
                                    silentaim.prediction = 0
                                else
                                    silentaim.prediction = value
                                end
                            end })
                            
                            settings:Toggle({ title = "sticky aim", default = false, callback = function (bool)
                                silentaim.lock_target = bool if bool == false then silentaim.lock_target_state = false end
                            end })
                            
                            settings:Toggle({ title = "don't aim friends", default = false, callback = function (bool)
                                silentaim.configuration.friends = bool
                            end })
                            
                            settings:Toggle({ title = "don't aim team", default = false, callback = function (bool)
                                silentaim.configuration.team = bool
                            end })
                            
                            settings:Toggle({ title = "visibility check", default = true, callback = function (bool)
                                silentaim.configuration.visibility = bool
                            end })
                            
                            settings:Toggle({ title = "wall check", default = false, callback = function (bool)
                                silentaim.configuration.wallcheck = bool
                            end })
                        end
                        do -- src/Lua/Scripts/da_hood/components/c_render.lua
                            -- this part of the code is really dirty.
                            
                            local notification = {
                                objects = {}
                            }
                            
                            function notification:new_text(text, time)
                                local NotificationTable = {
                                    Text = text,
                                    Time = os.clock() + time,
                                    Lerp = 2,
                                    Offset = 2,
                                    Object = DrawingClass({"Text", {Visible = false, Font = 2, Size = 16, Outline = true, Color = Color3.fromRGB(255,255,255)}})
                                }
                            
                                table.insert(notification.objects, NotificationTable)
                            end
                            
                            function notification:update()
                                local YOffset = 0
                                local Position = Vector2.new(20, 70)
                            
                                for index, v in next, notification.objects do
                                    if os.clock() >= v.Time then
                                        v.Lerp = Lerp(v.Lerp, 0, 1 / 12)
                                    else
                                        v.Lerp = Lerp(v.Lerp, 255, 1 / 12)
                                        v.Offset = Lerp(v.Offset, 255, 1 / 12)
                                    end
                            
                                    local Object = v.Object
                            
                                    Object.Visible = true
                                    Object.Transparency = v.Lerp / 255
                                    Object.Text = v.Text
                            
                                    Object.Position = Vector2.new(Position.X, Position.Y + YOffset) - Vector2.new(Object.TextBounds.X - (Object.TextBounds.X * (v.Lerp / 255)), 0)
                            
                                    YOffset += (Object.TextBounds.Y + 3) * (v.Offset / 255)
                            
                                    if v.Lerp <= 1 then
                                        v.Offset = Lerp(v.Offset, 0, 1 / 12)
                                    end
                            
                                    if v.Offset <= 1 then
                                        v.Object:Remove()
                            
                                        table.remove(notification.objects, index)
                                    end
                                end
                            end
                            
                            Loops:AddToHeartbeat("render_notification", function ()
                                notification:update()
                            end)
                            
                            local renderTab = Interface:Tab( "render" )
                            
                            local function checkCamView(pos)
                                return ((pos - camera.CFrame.Position).Unit):Dot(camera.CFrame.LookVector) > 0;
                            end
                            
                            local function ESPWorldToViewport(pos)
                                local newpos = camera:WorldToViewportPoint(camera.CFrame:pointToWorldSpace(camera.CFrame:pointToObjectSpace(pos)))
                                return Vector2.new(newpos.X, newpos.Y)
                            end
                            
                            do -- aim assist render
                                local aim_assist_render = renderTab:Section("aim assist", "left")
                            
                                local showfov = {
                                    enabled = false,
                                    filled = false,
                                    outline = false,
                                    transparency = 0,
                                    color = Color3.fromRGB(255,255,255)
                                }
                                
                                local fov = aim_assist_render:Toggle({ title = "show fov", default = false, callback = function (bool)
                                    showfov.enabled = bool
                                end })
                                fov:Colorpicker({ default = Color3.fromRGB(255, 255, 255), transparency = 1, callback = function (value, transparency)
                                    showfov.color = value
                                    showfov.transparency = transparency
                                end })
                                aim_assist_render:Toggle({ title = "fov outline", default = false, callback = function (bool)
                                    showfov.outline = bool
                                end })
                                
                                local showline = {
                                    enabled = false,
                                    color = Color3.fromRGB(255,255,255),
                                    transparency = 0.5
                                }
                                
                                local line = aim_assist_render:Toggle({ title = "show line", default = false, callback = function (bool)
                                    showline.enabled = bool
                                end })
                                line:Colorpicker({ default = Color3.fromRGB(255, 255, 255), transparency = 1, callback = function (value, transparency)
                                    showline.color = value
                                    showline.transparency = transparency
                                end })
                                
                                local FOV = DrawingClass({ "Circle", { Visible = false, Transparency = 1, ZIndex = 3, Thickness = 1  } })
                                local FOVOutline = DrawingClass({ "Circle", { Visible = false, Transparency = 1, ZIndex = 2, Color = Color3.fromRGB(0,0,0), Thickness = 3  } })
                                local LINE = DrawingClass({ "Line", { Visible = false, Transparency = 1  } })
                                
                                local function FOVf() -- f refers to function
                                    if not showfov.enabled then
                                        FOV.Visible = false
                                        FOVOutline.Visible = false
                                        return
                                    end
                                
                                    local fieldofview = aimassist.fieldofview
                            
                                    FOV.Radius = fieldofview
                                    FOVOutline.Radius = fieldofview
                            
                                    FOV.Color = showfov.color
                                    FOV.Transparency = showfov.transparency
                                    FOV.Position = inputService:GetMouseLocation()
                                    FOV.Visible = true
                            
                                    FOVOutline.Transparency = showfov.transparency
                                    FOVOutline.Position = inputService:GetMouseLocation()
                                    FOVOutline.Visible = FOV.Visible and showfov.outline
                                end
                                
                                local function Linef()
                                    if not showline.enabled then
                                        LINE.Visible = false
                                        return
                                    end
                                
                                    if not aimassist.enabled then
                                        LINE.Visible = false
                                        return
                                    end
                                
                                    if not aimassist.keybind then
                                        LINE.Visible = false
                                        return
                                    end
                                
                                    if not aimassist.character then
                                        LINE.Visible = false
                                        return
                                    end
                                
                                    local position = aimassist:get_position()
                                    if position == nil then
                                        LINE.Visible = false
                                        return
                                    end
                                
                                    local screenpos, onscreen = camera:WorldToViewportPoint(position)
                                    if not onscreen then
                                        LINE.Visible = false
                                        return
                                    end
                                
                                    local screencoordinates = Vector2New(screenpos.X, screenpos.Y)
                                    LINE.From = inputService:GetMouseLocation()
                                    LINE.To = screencoordinates
                                    LINE.Color = showline.color
                                    LINE.Visible = true
                                    LINE.Transparency = showline.transparency
                                end
                                
                                local function Render()
                                    FOVf()
                                    Linef()
                                end
                                Loops:AddToHeartbeat("render_aimassist", Render)
                            end
                            
                            do -- silent aim render
                            
                            
                                local silent_aim_render = renderTab:Section("silent aim", "left")
                            
                                local showfov = {
                                    enabled = false,
                                    filled = false,
                                    outline = false,
                                    transparency = 0.5,
                                    color = Color3.fromRGB(255,255,255)
                                }
                                
                                local fov = silent_aim_render:Toggle({ title = "show fov", default = false, callback = function (bool)
                                    showfov.enabled = bool
                                end })
                                fov:Colorpicker({ default = Color3.fromRGB(255, 255, 255), transparency = 1, callback = function (value, transparency)
                                    showfov.color = value
                                    showfov.transparency = transparency
                                end })
                                silent_aim_render:Toggle({ title = "fov outline", default = false, callback = function (bool)
                                    showfov.outline = bool
                                end })
                                
                                local showline = {
                                    enabled = false,
                                    color = Color3.fromRGB(255,255,255),
                                    transparency = 0.5
                                }
                                
                                local line = silent_aim_render:Toggle({ title = "show line", default = false, callback = function (bool)
                                    showline.enabled = bool
                                end })
                                line:Colorpicker({ default = Color3.fromRGB(255, 255, 255), transparency = 1, callback = function (value, transparency)
                                    showline.color = value
                                    showline.transparency = transparency
                                end })
                            
                                local conn
                                local function on_hit()
                                    if conn then
                                        conn:Disconnect()
                                        conn = nil
                                    end
                            
                                    if not silentaim.character then
                                        return
                                    end
                            
                                    if not silentaim.is_firing then
                                        return 
                                    end
                            
                                    local humanoid = silentaim.character:FindFirstChild("Humanoid")
                                    if not humanoid then
                                        return
                                    end
                            
                                    if silentaim.character then
                                        local oldHealth = humanoid.Health
                                        conn = connect(humanoid.HealthChanged, function(newHealth)
                                            local healthDifference = newHealth - oldHealth
                                            if newHealth < oldHealth then
                                                
                                                if notificationsss_sshitiittt then
                                                    local name = silentaim.character.Name and silentaim.character.Name or "??"
                                                    local rhp = tostring(math.round(humanoid.Health))
                                                    local dmg = tostring(math.round(healthDifference))
                                                    
                                                    local hitbox_instance = workspace:Raycast(silentaim:get_position(), silentaim:get_position())
                            
                                                    local hitbox = "??"
                                                    if hitbox_instance.Instance ~= nil then
                                                        hitbox = tostring(hitbox_instance.Instance)
                                                    end
                                            
                                                    local text_shit = ('hit %s hitbox: %s dmg: <font color="rgb(0, 255, 255)">%s</font> rhp: <font color="rgb(0, 255, 255)">%s</font>'):format(name, hitbox, dmg, rhp)
                                                    notification:new_text(text_shit, 5)
                                                end
                                            end
                                    
                                            oldHealth = newHealth
                                        end)
                                    end 
                                end
                            
                                local FOVOutline = DrawingClass({ "Circle", { Visible = false, Transparency = 1, Color = Color3.fromRGB(0,0,0), Thickness = 3, NumSides = 20, Radius = 10  } })
                                local FOV = DrawingClass({ "Circle", { Visible = false, Transparency = 1, Thickness = 1, NumSides = 20, Radius = 10  } })
                                local LINE = DrawingClass({ "Line", { Visible = false, Transparency = 1  } })
                                
                                local function FOVf() -- f refers to function
                                    if not showfov.enabled then
                                        FOV.Visible = false
                                        FOVOutline.Visible = false
                                        return
                                    end
                                
                                    local fov_calculation = silentaim.fov_calculation
                                    local fieldofview = silentaim.fieldofview
                                    if fov_calculation == "real fov" then
                                        FOV.Radius = fieldofview / camera.FieldOfView * camera.ViewportSize.Y
                                        FOVOutline.Radius = fieldofview / camera.FieldOfView * camera.ViewportSize.Y
                                    elseif fov_calculation == "pixels" then
                                        FOV.Radius = fieldofview
                                        FOVOutline.Radius = fieldofview
                                    end
                                    
                                    FOV.Color = showfov.color
                                    FOV.Transparency = showfov.transparency
                                    FOV.Position = inputService:GetMouseLocation()
                                    FOV.Visible = true
                            
                                    FOVOutline.Transparency = showfov.transparency
                                    FOVOutline.Position = inputService:GetMouseLocation()
                                    FOVOutline.Visible = FOV.Visible and showfov.outline
                                end
                                
                                local function Linef()
                                    if not showline.enabled then
                                        LINE.Visible = false
                                        return
                                    end
                                
                                    if not silentaim.enabled then
                                        LINE.Visible = false
                                        return
                                    end
                                
                                    if not silentaim.keybind then
                                        LINE.Visible = false
                                        return
                                    end
                                
                                    if not silentaim.character then
                                        LINE.Visible = false
                                        return
                                    end
                                
                                    local position = silentaim:get_position()
                                    if position == nil then
                                        LINE.Visible = false
                                        return
                                    end
                                
                                    local screenpos, onscreen = camera:WorldToViewportPoint(position)
                                    if not onscreen then
                                        LINE.Visible = false
                                        return
                                    end
                                
                                    local screencoordinates = Vector2New(screenpos.X, screenpos.Y)
                                    LINE.From = inputService:GetMouseLocation()
                                    LINE.To = screencoordinates
                                    LINE.Color = showline.color
                                    LINE.Visible = true
                                    LINE.Transparency = showline.transparency
                                end
                                
                                local function Render()
                                    FOVf()
                                    Linef()
                                end
                                Loops:AddToHeartbeat("render_silentaim", Render)
                            end
                            
                            do -- indicator
                                local indicatorClass = {
                                    enabled = false,
                                    center = false,
                                    
                                    position = "mouse",
                                
                                    indicate = {},
                                
                                    objects = {},
                                
                                    update = function(self)
                                        local currentPosition = 8
                                        for i, v in next, self.objects do
                                            local mousepos = inputService:GetMouseLocation()
                                
                                            ---- why the fuck is it interchanged
                                            local center_text = self.center
                                            v.Center = center_text
                                
                                            local function mousef()
                                                local is_center = center_text and 0 or 16
                                
                                                local yMousePos = mousepos.Y + 14
                                                local xMousePos = mousepos.X + is_center
                                                v.Position = Vector2.new(xMousePos, yMousePos + currentPosition)
                                            end
                                
                                            local function centerf()
                                                local is_center = center_text and 0 or 16
                                
                                                local yCameraVP = (camera.ViewportSize.Y / 2) + 14
                                                local xCameraVP = (camera.ViewportSize.X / 2) + is_center
                                                v.Position = Vector2.new(xCameraVP, yCameraVP + currentPosition)
                                            end
                                
                                            local action = self.position == "mouse" and mousef or self.position == "center" and centerf
                                            action()
                                
                                            if v.Visible then
                                                currentPosition = currentPosition + 14
                                            end
                                        end
                                    end,
                                    
                                    new_indicator = function ( self, name )
                                        local options = {}
                                
                                        local indicator = DrawingClass({ "Text", {Size = 14, Visible = false, Transparency = 1, Text = name, Font = 2, Outline = true, Center = false } })
                                
                                        options.changecolor = function (newColor)
                                            indicator.Color = newColor
                                        end
                                
                                        options.changetext = function (newText)
                                            indicator.Text = newText
                                        end
                                
                                        options.changeVisibility = function (newBool)
                                            indicator.Visible = newBool
                                        end
                                
                                        table.insert(self.objects, indicator)
                                
                                        return options
                                    end,
                                
                                    show = function (self)
                                        for i, v in next, self.objects do
                                            if v then
                                                v.Visible = true
                                            end
                                        end
                                    end,
                                
                                    unshow = function (self)
                                        for i, v in next, self.objects do
                                            if v then
                                                v.Visible = false
                                            end
                                        end
                                    end
                                }
                            
                                local renderindicator = renderTab:Section("indicator", "right")
                            
                                renderindicator:Toggle({ title = "indicator", default = false, callback = function (bool)
                                    indicatorClass.enabled = bool
                                
                                    local action = indicatorClass.enabled and indicatorClass.show or indicatorClass.unshow
                                    action(indicatorClass)
                                end })
                                
                                renderindicator:Toggle({ title = "center text", default = false, callback = function (bool)
                                    indicatorClass.center = bool
                                end })
                                
                                renderindicator:Dropdown({ title = "position", values = {"mouse", "center"}, default = "mouse", multi = false, callback = function (value)
                                    indicatorClass.position = value
                                end })
                                
                                renderindicator:Dropdown({ title = "indicate values", values = {"aim assist", "silent aim"}, default = "aim assist", multi = true, callback = function (value)
                                    indicatorClass.indicate = value
                                end })
                                
                                local title = indicatorClass:new_indicator("drax.universal")
                                local aim_Ass_character = indicatorClass:new_indicator("no target")
                                local silent_Ass_character = indicatorClass:new_indicator("no target")
                                title.changecolor(Color3.fromRGB(170, 170, 255))
                                aim_Ass_character.changecolor(Color3.fromRGB(255,255,255))
                                silent_Ass_character.changecolor(Color3.fromRGB(255,255,255))
                                
                                local randomshit = coroutine.create(function ()
                                    while task.wait() do
                                        indicatorClass:update()
                                
                                        do
                                            local character_available = aimassist.character and aimassist.character.Name
                                            local textValue = character_available and aimassist.character.Name or "aim assist : no target"
                                            aim_Ass_character.changetext(textValue)
                                    
                                            local aim_vis = table.find(indicatorClass.indicate, "aim assist") and indicatorClass.enabled and true or false
                                            aim_Ass_character.changeVisibility(aim_vis)
                                        end
                                        do
                                            local character_available = silentaim.character and silentaim.character.Name
                                            local textValue = character_available and silentaim.character.Name or "silent aim : no target"
                                            silent_Ass_character.changetext(textValue)
                                    
                                            local aim_vis = table.find(indicatorClass.indicate, "silent aim") and indicatorClass.enabled and true or false
                                            silent_Ass_character.changeVisibility(aim_vis)
                                        end
                                    end
                                end)
                                coroutine.resume(randomshit)
                            end
                            
                            do -- bullet tracers and skeletons
                                local renderbullettracers = renderTab:Section("visualize bullet tracers", "left")
                            
                                local bullet_tracers = {
                                    enabled = false,
                                    color = Color3.fromRGB(255,255,255),
                                    transparency = 0,
                                    outline = false,
                                    fade = false,
                                    fade_speed = 1,
                                    lifetime = 10
                                }
                            
                                local bullet_Tracertttat = renderbullettracers:Toggle({ title = "show bullet tracers", default = false, callback = function (bool)
                                    bullet_tracers.enabled = bool
                                end })
                                bullet_Tracertttat:Colorpicker({ default = Color3.fromRGB(255, 255, 255), transparency = 1, callback = function (value, transparency)
                                    bullet_tracers.color = value
                                    bullet_tracers.transparency = transparency
                                end })
                                renderbullettracers:Toggle({ title = "outline", default = false, callback = function (bool)
                                    bullet_tracers.outline = bool
                                end })
                            
                                renderbullettracers:Toggle({ title = "fade", default = false, callback = function (bool)
                                    bullet_tracers.fade = bool
                                end })
                                renderbullettracers:Slider({ title = "fade speed", suffix = "s", min = 0.1, max = 10, default = 1,float = 0.01, callback = function (value)
                                    bullet_tracers.fade_speed = value
                                end })
                                renderbullettracers:Slider({ title = "bullet lifetime", suffix = "s", min = 0.1, max = 10, default = 1,float = 0.01, callback = function (value)
                                    bullet_tracers.lifetime = value
                                end })
                            
                                local silent_aim_hit_skeletons = renderTab:Section("hit skeleton", "left")
                            
                                local skeleton_hit = false
                                local skeleton_color = Color3.fromRGB(255,255,255)
                                local skeletontrans = 1
                                local hitskeletontoggle = silent_aim_hit_skeletons:Toggle({ title = "hit skeleton", default = false, callback = function (bool)
                                    skeleton_hit = bool
                                end })
                                hitskeletontoggle:Colorpicker({ default = Color3.fromRGB(255, 255, 255), transparency = 1, callback = function (value, transparency)
                                    skeleton_color.color = value
                                    skeletontrans = transparency
                                end })
                            
                                local fadeinandout = false
                                local fade_yes = false
                            
                                silent_aim_hit_skeletons:Toggle({ title = "fade in and out", default = false, callback = function (bool)
                                    fadeinandout = bool
                                end })
                            
                                silent_aim_hit_skeletons:Toggle({ title = "fade", default = false, callback = function (bool)
                                    fade_yes = bool
                                end })
                            
                                local fade_speed = 1
                                local lifetime = 1
                            
                                silent_aim_hit_skeletons:Slider({ title = "fade speed", suffix = "s", min = 0.1, max = 10, default = 1,float = 0.01, callback = function (value)
                                    fade_speed = value
                                end })
                                silent_aim_hit_skeletons:Slider({ title = "lifetime", suffix = "s", min = 0.1, max = 10, default = 1,float = 0.01, callback = function (value)
                                    lifetime = value
                                end })
                            
                                local renderhit = renderTab:Section("visualize hit", "right")
                            
                                local hit_options = {
                                    enabled = false,
                                    color = Color3.fromRGB(255,255,255),
                                    transparency = 0,
                                    fade = false,
                                    lifetime = 10,
                                    fade_speed = 1,
                                }
                            
                                local hit_toggel = renderhit:Toggle({ title = "show hit", default = false, callback = function (bool)
                                    hit_options.enabled = bool
                                end })
                                hit_toggel:Colorpicker({ default = Color3.fromRGB(255, 255, 255), transparency = 1, callback = function (value, transparency)
                                    hit_options.color = value
                                    hit_options.transparency = transparency
                                end })
                                renderhit:Toggle({ title = "fade", default = false, callback = function (bool)
                                    hit_options.fade = bool
                                end })
                                renderhit:Slider({ title = "fade speed", suffix = "s", min = 0.1, max = 10, default = 1,float = 0.01, callback = function (value)
                                    hit_options.fade_speed = value
                                end })
                                renderhit:Slider({ title = "lifetime", suffix = "s", min = 0.1, max = 10, default = 1,float = 0.01, callback = function (value)
                                    hit_options.lifetime = value
                                end })
                            
                                local notificationsss_sshitiittt = false
                                renderhit:Toggle({ title = "notify on hit", default = false, callback = function (bool)
                                    notificationsss_sshitiittt = bool
                                end })
                            
                                local function make_a_shitty_skeleton(character)
                                    if not character then return end
                            
                                    local shit_skeleton = {}
                                    shit_skeleton.Head = DrawingClass({"Line", {Visible = true, Transparency = skeletontrans, Thickness = 1, ZIndex = 3, Color = skeleton_color}})
                                    shit_skeleton.Torso = DrawingClass({"Line", {Visible = true, Transparency = skeletontrans, Thickness = 1, ZIndex = 3, Color = skeleton_color}})
                                    shit_skeleton.Torso2 = DrawingClass({"Line", {Visible = true, Transparency = skeletontrans, Thickness = 1, ZIndex = 3, Color = skeleton_color}})
                                    shit_skeleton.Torso3 = DrawingClass({"Line", {Visible = true, Transparency = skeletontrans, Thickness = 1, ZIndex = 3, Color = skeleton_color}})
                                    shit_skeleton.LeftArm = DrawingClass({"Line", {Visible = true, Transparency = skeletontrans, Thickness = 1, ZIndex = 3, Color = skeleton_color}})
                                    shit_skeleton.RightArm = DrawingClass({"Line", {Visible = true, Transparency = skeletontrans, Thickness = 1, ZIndex = 3, Color = skeleton_color}})
                                    shit_skeleton.LeftLeg = DrawingClass({"Line", {Visible = true, Transparency = skeletontrans, Thickness = 1, ZIndex = 3, Color = skeleton_color}})
                                    shit_skeleton.RightLeg = DrawingClass({"Line", {Visible = true, Transparency = skeletontrans, Thickness = 1, ZIndex = 3, Color = skeleton_color}})
                            
                                    shit_skeleton.HeadOutline = DrawingClass({"Line", {Visible = true, Transparency = skeletontrans, Thickness = 3, ZIndex = 2, Color = Color3.fromRGB(0,0,0)}})
                                    shit_skeleton.TorsoOutline = DrawingClass({"Line", {Visible = true, Transparency = skeletontrans, Thickness = 3, ZIndex = 2, Color = Color3.fromRGB(0,0,0)}})
                                    shit_skeleton.Torso2Outline = DrawingClass({"Line", {Visible = true, Transparency = skeletontrans, Thickness = 3, ZIndex = 2, Color = Color3.fromRGB(0,0,0)}})
                                    shit_skeleton.Torso3Outline = DrawingClass({"Line", {Visible = true, Transparency = skeletontrans, Thickness = 3, ZIndex = 2, Color = Color3.fromRGB(0,0,0)}})
                                    shit_skeleton.LeftArmOutline = DrawingClass({"Line", {Visible = true, Transparency = skeletontrans, Thickness = 3, ZIndex = 2, Color = Color3.fromRGB(0,0,0)}})
                                    shit_skeleton.RightArmOutline = DrawingClass({"Line", {Visible = true, Transparency = skeletontrans, Thickness = 3, ZIndex = 2, Color = Color3.fromRGB(0,0,0)}})
                                    shit_skeleton.LeftLegOutline = DrawingClass({"Line", {Visible = true, Transparency = skeletontrans, Thickness = 3, ZIndex = 2, Color = Color3.fromRGB(0,0,0)}})
                                    shit_skeleton.RightLegOutline = DrawingClass({"Line", {Visible = true, Transparency = skeletontrans, Thickness = 3, ZIndex = 2, Color = Color3.fromRGB(0,0,0)}})
                            
                                    local rigcheck = character.Humanoid.RigType == Enum.HumanoidRigType.R6
                            
                                    local positions = {
                                        head = (character.Head.CFrame).p,
                                        toplefttorso = (character[(rigcheck and "Torso" or "UpperTorso")].CFrame * CFrame.new(-1.5, 0.8, 0)).p,
                                        toprighttorso = (character[(rigcheck and "Torso" or "UpperTorso")].CFrame * CFrame.new(1.5, 0.8, 0)).p,
                                        toptorso = (character[(rigcheck and "Torso" or "UpperTorso")].CFrame * CFrame.new(0, 0.8, 0)).p,
                                        bottomtorso = (character[(rigcheck and "Torso" or "UpperTorso")].CFrame * CFrame.new(0, -0.8, 0)).p,
                                        bottomlefttorso = (character[(rigcheck and "Torso" or "UpperTorso")].CFrame * CFrame.new(-0.5, -0.8, 0)).p,
                                        bottomrighttorso = (character[(rigcheck and "Torso" or "UpperTorso")].CFrame * CFrame.new(0.5, -0.8, 0)).p,
                                        leftarm = (character[(rigcheck and "Left Arm" or "LeftHand")].CFrame * CFrame.new(0, -0.8, 0)).p,
                                        rightarm = (character[(rigcheck and "Right Arm" or "RightHand")].CFrame * CFrame.new(0, -0.8, 0)).p,
                                        leftleg = (character[(rigcheck and "Left Leg" or "LeftFoot")].CFrame * CFrame.new(0, -0.8, 0)).p,
                                        rightleg = (character[(rigcheck and "Right Leg" or "RightFoot")].CFrame * CFrame.new(0, -0.8, 0)).p,
                                    }
                            
                                    local function set_skeleton_property(property, value)
                                        pcall(function ()
                                            shit_skeleton.Head[property] = value
                                            shit_skeleton.Torso[property] = value
                                            shit_skeleton.Torso2[property] = value
                                            shit_skeleton.Torso3[property] = value
                                            shit_skeleton.LeftArm[property] = value
                                            shit_skeleton.RightArm[property] = value
                                            shit_skeleton.LeftLeg[property] = value
                                            shit_skeleton.RightLeg[property] = value
                            
                                            shit_skeleton.HeadOutline[property] = value
                                            shit_skeleton.TorsoOutline[property] = value
                                            shit_skeleton.Torso2Outline[property] = value
                                            shit_skeleton.Torso3Outline[property] = value
                                            shit_skeleton.LeftArmOutline[property] = value
                                            shit_skeleton.RightArmOutline[property] = value
                                            shit_skeleton.LeftLegOutline[property] = value
                                            shit_skeleton.RightLegOutline[property] = value
                                        end)
                                    end
                            
                                    local function set_skeleton_color(value)
                                        pcall(function ()
                                            shit_skeleton.Head["Color"] = value
                                            shit_skeleton.Torso["Color"] = value
                                            shit_skeleton.Torso2["Color"] = value
                                            shit_skeleton.Torso3["Color"] = value
                                            shit_skeleton.LeftArm["Color"] = value
                                            shit_skeleton.RightArm["Color"] = value
                                            shit_skeleton.LeftLeg["Color"] = value
                                            shit_skeleton.RightLeg["Color"] = value
                                        end)
                                    end
                            
                                    local function clear_skeleton()
                                        pcall(function ()
                                            shit_skeleton.Head:Remove()
                                            shit_skeleton.Torso:Remove()
                                            shit_skeleton.Torso2:Remove()
                                            shit_skeleton.Torso3:Remove()
                                            shit_skeleton.LeftArm:Remove()
                                            shit_skeleton.RightArm:Remove()
                                            shit_skeleton.LeftLeg:Remove()
                                            shit_skeleton.RightLeg:Remove()
                                
                                            shit_skeleton.HeadOutline:Remove()
                                            shit_skeleton.TorsoOutline:Remove()
                                            shit_skeleton.Torso2Outline:Remove()
                                            shit_skeleton.Torso3Outline:Remove()
                                            shit_skeleton.LeftArmOutline:Remove()
                                            shit_skeleton.RightArmOutline:Remove()
                                            shit_skeleton.LeftLegOutline:Remove()
                                            shit_skeleton.RightLegOutline:Remove()
                                        end)
                                    end
                            
                                    local function update_skeleton()
                                        local position, onscreen = camera:WorldToViewportPoint(character.HumanoidRootPart.Position)
                            
                                        local head = ESPWorldToViewport(positions["head"])
                                        local toplefttorso = ESPWorldToViewport(positions["toplefttorso"])
                                        local toprighttorso = ESPWorldToViewport(positions["toprighttorso"])
                                        local toptorso = ESPWorldToViewport(positions["toptorso"])
                                        local bottomtorso = ESPWorldToViewport(positions["bottomtorso"])
                                        local bottomlefttorso = ESPWorldToViewport(positions["bottomlefttorso"])
                                        local bottomrighttorso = ESPWorldToViewport(positions["bottomrighttorso"])
                                        local leftarm = ESPWorldToViewport(positions["leftarm"])
                                        local rightarm = ESPWorldToViewport(positions["rightarm"])
                                        local leftleg = ESPWorldToViewport(positions["leftleg"])
                                        local rightleg = ESPWorldToViewport(positions["rightleg"])
                            
                                        if (checkCamView(position)) or (onscreen) then
                                            set_skeleton_property("Visible", true)
                            
                                            shit_skeleton.Torso.From = toplefttorso
                                            shit_skeleton.Torso.To = toprighttorso
                                            shit_skeleton.Torso2.From = toptorso
                                            shit_skeleton.Torso2.To = bottomtorso
                                            shit_skeleton.Torso3.From = bottomlefttorso
                                            shit_skeleton.Torso3.To = bottomrighttorso
                                            shit_skeleton.LeftArm.From = toplefttorso
                                            shit_skeleton.LeftArm.To = leftarm
                                            shit_skeleton.RightArm.From = toprighttorso
                                            shit_skeleton.RightArm.To = rightarm
                                            shit_skeleton.LeftLeg.From = bottomlefttorso
                                            shit_skeleton.LeftLeg.To = leftleg
                                            shit_skeleton.RightLeg.From = bottomrighttorso
                                            shit_skeleton.RightLeg.To = rightleg
                                            shit_skeleton.Head.From = toptorso
                                            shit_skeleton.Head.To = head
                                    
                                            shit_skeleton.TorsoOutline.From = toplefttorso
                                            shit_skeleton.TorsoOutline.To = toprighttorso
                                            shit_skeleton.Torso2Outline.From = toptorso
                                            shit_skeleton.Torso2Outline.To = bottomtorso
                                            shit_skeleton.Torso3Outline.From = bottomlefttorso
                                            shit_skeleton.Torso3Outline.To = bottomrighttorso
                                            shit_skeleton.LeftArmOutline.From = toplefttorso
                                            shit_skeleton.LeftArmOutline.To = leftarm
                                            shit_skeleton.RightArmOutline.From = toprighttorso
                                            shit_skeleton.RightArmOutline.To = rightarm
                                            shit_skeleton.LeftLegOutline.From = bottomlefttorso
                                            shit_skeleton.LeftLegOutline.To = leftleg
                                            shit_skeleton.RightLegOutline.From = bottomrighttorso
                                            shit_skeleton.RightLegOutline.To = rightleg
                                            shit_skeleton.HeadOutline.From = toptorso
                                            shit_skeleton.HeadOutline.To = head
                                        else
                                            set_skeleton_property("Visible", false)
                                        end
                            
                                        if not fade_yes and fadeinandout then
                                            local transparency = (math.sin(tick() * fade_speed) + 1) / 2
                                            set_skeleton_property("Transparency", transparency)
                                        end
                            
                                        set_skeleton_color(skeleton_color)
                                    end
                            
                                    local conn = connect(rsService.RenderStepped, update_skeleton)
                            
                                    local function clear()
                                        local function fade()
                                            local fade_value = Instance.new("NumberValue", coregui)
                                            local fade_tween_value = tweenService:Create(fade_value, TweenInfo.new(fade_speed), {Value = 1})
                                            fade_tween_value:Play()
                            
                                            local fade_value_transparency_conn; fade_value_transparency_conn = connect(fade_value:GetPropertyChangedSignal("Value"), function()
                                                local transparency = 1 - fade_value.Value
                                                set_skeleton_property("Transparency", transparency)
                                            end)
                            
                                            local function on_completed ()
                                                fade_value_transparency_conn:Disconnect()
                                                clear_skeleton()
                                                conn:Disconnect()
                                            end
                            
                                            connect(fade_tween_value.Completed, on_completed)
                                        end
                                        
                                        local function normal()
                                            clear_skeleton()
                                            conn:Disconnect()
                                        end
                            
                                        local action = fade_yes and fade or normal
                                        action()
                                    end
                            
                                    task.delay(lifetime, clear)
                                end
                                
                                local health_cache = {}
                                local function updateHealthCache ()
                                    if skeleton_hit or hit_options.enabled then
                                        for _, player in pairs(playerService:GetPlayers()) do
                                            if not da_hood.functions:is_alive(player) then continue end
                                            health_cache[player.Name] = player.Character.Humanoid.Health
                                        end
                                    end
                                end
                            
                                local function get_closest_player_from_position(Position, MaxRadius)
                                    local Radius = MaxRadius
                                    local ClosestPlayer
                            
                                    for PlayerName, Health in pairs(health_cache) do
                                        local Player = playerService:FindFirstChild(PlayerName)
                                        if Player and Player.Character then
                                            local PlayerPosition = Player.Character.PrimaryPart.Position
                                            local Distance = (Position - PlayerPosition).Magnitude
                                            local CurrentHealth = Player.Character.Humanoid.Health
                                            if (Distance < Radius) and (CurrentHealth < Health) then
                                                Radius = Distance
                                                ClosestPlayer = Player
                                            end
                                        end
                                    end
                                    return ClosestPlayer
                                end
                            
                                local bulletpath = (bullet_support[game.GameId] and bullet_support[game.GameId].path) or workspace:FindFirstChild("Ignored") or nil
                                Loops:AddToHeartbeat("bullet shit and tracer shit and skele", function ()
                                    updateHealthCache ()
                            
                                    local gun = da_hood.functions:get_gun_2(LocalPlayer)
                            
                                    if not gun_conn and gun and gun.isgunequipped then
                                        gun_conn = connect(gun.ammo:GetPropertyChangedSignal("Value"), function ()
                                            local newvalue = gun.ammo.Value
                                            if previousammo > newvalue then
                                                local bullets = 0
                                                local conn2
                                                if bulletpath then
                                                    conn2 = connect(bulletpath.ChildAdded, function(object)
                                                        -- pretty shitty gun detection
                                                        bullets += 1
                                                        if (object.Name == "BULLET_RAYS" or object:IsA("Part")) and (bullets <= 5 or bullets == 1) then
                                                            pcall(function ()
                                                                local gun_beam = object:WaitForChild("GunBeam")
                                                                if gun_beam.Attachment1.WorldPosition then
                                                                    local start_position = object.Position
                                                                    local end_position = gun_beam.Attachment1.WorldPosition
                            
                                                                    local RaycastParamsObj = RaycastParams.new()
                                                                    RaycastParamsObj.FilterDescendantsInstances = {LocalPlayer.Character, gun.tool.Handle}
                            										RaycastParamsObj.FilterType = Enum.RaycastFilterType.Exclude
                            										RaycastParamsObj.IgnoreWater = true
                            
                                                                    -- the FUKCING RAYCAST IS NOT WORKING
                                                                    -- HOW CAN I GET THE HITBOX IT FUACKINGNG HITT
                            										local Ray = workspace:Raycast(start_position, end_position, RaycastParamsObj)
                            
                                                                    if bullet_tracers.enabled then
                                                                        local bullet_line = DrawingClass({ "Line", { Color = bullet_tracers.color, Visible = false, Transparency = bullet_tracers.transparency, Thickness = 1.3, ZIndex = 3 } })
                                                                        local bullet_line_outline = DrawingClass({ "Line", { Color = Color3.fromRGB(0,0,0), Visible = false, Transparency = bullet_tracers.transparency, Thickness = 3, ZIndex = 2 } })
                                                            
                                                                        gun_beam:Destroy()
                                                            
                                                                        local loop_line = connect(rsService.RenderStepped, function()
                                                                            local start_screen_pos, start_on_screen = camera:WorldToViewportPoint(start_position)
                                                                            local end_screen_pos, end_on_screen = camera:WorldToViewportPoint(end_position)
                                                            
                                                                            if (checkCamView(start_position) and checkCamView(end_position)) then
                                                                                bullet_line.Visible = true
                                                                                bullet_line.From = Vector2.new(start_screen_pos.X, start_screen_pos.Y)
                                                                                bullet_line.To = Vector2.new(end_screen_pos.X, end_screen_pos.Y)
                                                            
                                                                                bullet_line_outline.Visible = bullet_line.Visible and bullet_tracers.outline
                                                                                bullet_line_outline.From = Vector2.new(start_screen_pos.X, start_screen_pos.Y)
                                                                                bullet_line_outline.To = Vector2.new(end_screen_pos.X, end_screen_pos.Y)
                                                            
                                                                                bullet_line.Color = bullet_tracers.color
                                                                            else
                                                                                bullet_line.Visible = false
                                                                                bullet_line_outline.Visible = false
                                                                            end
                                                                        end)
                                                            
                                                                        task.delay(bullet_tracers.lifetime, function()
                                                                            local function fade()
                                                                                local fade_value = Instance.new("NumberValue", coregui)
                                                                                local fade_tween_value = tweenService:Create(fade_value, TweenInfo.new(bullet_tracers.fade_speed), {Value = 1})
                                                                                fade_tween_value:Play()
                                                            
                                                                                local fade_value_transparency_conn; fade_value_transparency_conn = connect(fade_value:GetPropertyChangedSignal("Value"), function()
                                                                                    bullet_line.Transparency = 1 - fade_value.Value
                                                                                    bullet_line_outline.Transparency = 1 - fade_value.Value
                                                                                end)
                                                            
                                                                                local function on_completed ()
                                                                                    fade_value_transparency_conn:Disconnect()
                                                                                    bullet_line:Remove()
                                                                                    bullet_line_outline:Remove()
                                                            
                                                                                    loop_line:Disconnect()
                                                                                end
                                                            
                                                                                connect(fade_tween_value.Completed, on_completed)
                                                                            end
                                                                            
                                                                            local function normal()
                                                                                bullet_line:Remove()
                                                                                bullet_line_outline:Remove()
                                                            
                                                                                loop_line:Disconnect()
                                                                            end
                                                            
                                                                            local action = bullet_tracers.fade and fade or normal
                                                                            action()
                                                                        end)
                                                                    end
                            
                                                                    local nearest_player = get_closest_player_from_position(end_position, 20)
                                                                    if nearest_player then
                                                                        if notificationsss_sshitiittt then
                                                                            local rhp = nearest_player.Character.Humanoid.Health - 100
                            
                                                                            local formatted = ("player name : %s  rhp : %s"):format(nearest_player.Name, tostring(math.round(rhp)))
                                                                            notification:new_text(formatted, 2) 
                                                                        end
                            
                                                                        if skeleton_hit then
                                                                            make_a_shitty_skeleton(nearest_player.Character)
                                                                        end
                            
                                                                        if hit_options.enabled then
                                                                            local trail = DrawingClass({ "Line", { Color = hit_options.color, Visible = false, Transparency = hit_options.transparency, Thickness = 1.3, ZIndex = 3 } })
                                                        
                                                                            local character = nearest_player.Character
                                                                            local old_pos = character.HumanoidRootPart.Position
                                                            
                                                                            local loop_line = connect(rsService.RenderStepped, function()
                                                                                local start_screen_pos, start_on_screen = camera:WorldToViewportPoint(old_pos)
                                                                                local end_screen_pos, end_on_screen = camera:WorldToViewportPoint(character.HumanoidRootPart.Position)
                                                                
                                                                                if (start_on_screen and end_on_screen) or (checkCamView(start_position) and checkCamView(end_position)) and hit_options.enabled then
                                                                                    trail.Visible = true
                                                                                    trail.From = Vector2.new(start_screen_pos.X, start_screen_pos.Y)
                                                                                    trail.To = Vector2.new(end_screen_pos.X, end_screen_pos.Y)
                                                                                    trail.Color = hit_options.color
                                                                                else
                                                                                    trail.Visible = false
                                                                                end
                                                                            end)
                                                            
                                                                            task.delay(hit_options.lifetime, function()
                                                                                local function fade()
                                                                                    local fade_value = Instance.new("NumberValue")
                                                                                    local fade_tween_value = tweenService:Create(fade_value, TweenInfo.new(hit_options.fade_speed), {Value = 1})
                                                                                    fade_tween_value:Play()
                                                                
                                                                                    local fade_value_transparency_conn; fade_value_transparency_conn = connect(fade_value:GetPropertyChangedSignal("Value"), function()
                                                                                        trail.Transparency = 1 - fade_value.Value
                                                                                    end)
                                                                
                                                                                    local function on_completed ()
                                                                                        fade_value_transparency_conn:Disconnect()
                                                                                        trail:Remove()
                                                                
                                                                                        loop_line:Disconnect()
                                                                                    end
                                                                
                                                                                    connect(fade_tween_value.Completed, on_completed)
                                                                                end
                                                                                
                                                                                local function normal()
                                                                                    trail:Remove()
                                                                
                                                                                    loop_line:Disconnect()
                                                                                end
                                                                
                                                                                local action = hit_options.fade and fade or normal
                                                                                action()
                                                                            end)
                                                                        end
                                                                    end
                                                                end
                                                            end)
                                                            conn2:Disconnect()
                                                        end
                                                    end) 
                                                else
                                                    warn("FAILED TO FIND IGNORED FOLDER")
                                                end
                                            end
                                            previousammo = newvalue
                                        end)
                                    end
                                end)
                            end
                            
                            do -- visualizer
                                local rendervisualizer = renderTab:Section("visualize aim position", "right")
                            
                                local show_aimpos = {
                                    enabled = false,
                                    filled = false,
                                    resize = true, -- supposed to be a feature but nothing changed.
                                    transparency = 0,
                                    color = Color3.fromRGB(255,255,255)
                                }
                                
                                local aimpos = rendervisualizer:Toggle({ title = "show aim position", default = false, callback = function (bool)
                                    show_aimpos.enabled = bool
                                end })
                                aimpos:Colorpicker({ default = Color3.fromRGB(255, 255, 255), transparency = 1, callback = function (value, transparency)
                                    show_aimpos.color = value
                                    show_aimpos.transparency = transparency
                                end })
                                rendervisualizer:Toggle({ title = "filled", default = false, callback = function (bool)
                                    show_aimpos.filled = bool
                                end })
                            
                                local aimposVisualizer = DrawingClass({ "Circle", { Visible = false, Transparency = 1, Radius = 10 } })
                            
                                local function aimposF()
                                    if not show_aimpos.enabled then
                                        aimposVisualizer.Visible = false
                                        return
                                    end
                            
                                    if not da_hood.functions:is_localplayer_alive() then
                                        aimposVisualizer.Visible = false
                                        return
                                    end
                            
                                    if not da_hood.functions:get_gun() then
                                        aimposVisualizer.Visible = false
                                        return
                                    end
                            
                                    local bodyeffects = LocalPlayer.Character:FindFirstChild("BodyEffects")
                                    if not bodyeffects then
                                        aimposVisualizer.Visible = false
                                        return
                                    end
                            
                                    local mousepos = bodyeffects:FindFirstChild("MousePos")
                                    if not mousepos then
                                        aimposVisualizer.Visible = false
                                        return
                                    end
                            
                                    local mouseposValue = mousepos.Value
                            
                                    local screenpos, onscreen = camera:WorldToViewportPoint(mouseposValue)
                                    if not onscreen then
                                        aimposVisualizer.Visible = false
                                        return
                                    end
                                
                                    local screencoordinates = Vector2New(screenpos.X, screenpos.Y)
                            
                                    aimposVisualizer.Color = show_aimpos.color
                                    aimposVisualizer.Visible = true
                                    aimposVisualizer.Transparency = show_aimpos.transparency
                                    aimposVisualizer.Filled = show_aimpos.filled
                            
                                    if show_aimpos.resize then
                                        local headdotpos = camera:WorldToViewportPoint(Vector3New(mouseposValue.X, mouseposValue.Y + 0.1, mouseposValue.Z))
                                        local headdotpos_b = camera:WorldToViewportPoint(Vector3New(mouseposValue.X, mouseposValue.Y - 0.2, mouseposValue.Z))
                                        local difference = headdotpos_b.y - headdotpos.y
                                        aimposVisualizer.Position = Vector2New(headdotpos.x, headdotpos_b.y - difference)
                                    else
                                        aimposVisualizer.Position = screencoordinates
                                    end 
                                end
                            
                                local function Render()
                                    aimposF()
                                end
                                Loops:AddToHeartbeat("render_shitt", Render)
                            end
                        end
                        do -- src/Lua/Scripts/da_hood/components/d_misc.lua
                            local miscTab = Interface:Tab( "misc" )
                            
                            -- in-game
                            do
                                local in_game = miscTab:Section("in game", "left")
                            
                                local ClearConsole = function () -- minifier is op as fuck
                                    local a=game:GetService("CoreGui"):WaitForChild("DevConsoleMaster")local b=a:WaitForChild("DevConsoleWindow")local c=b:WaitForChild("DevConsoleUI")local d=c:WaitForChild("MainView")local e=d:WaitForChild("ClientLog")for f,g in pairs(e:GetChildren())do if g:IsA("GuiObject")and g.Name==g.Name:match("%d+")then g:Destroy()end end
                                end
                            
                                local Rejoin = function ()
                                    game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, LocalPlayer)
                                end
                            
                                local JoinAnotherServer = function ()
                                    game:GetService("TeleportService"):Teleport(game.PlaceId, LocalPlayer) 
                                end
                            
                                in_game:Button({ title = "rejoin", callback = function ()
                                    pcall(Rejoin)
                                end })
                            
                                in_game:Button({ title = "join another server", callback = function ()
                                    pcall(JoinAnotherServer)
                                end })
                            
                                in_game:Button({ title = "clear console", callback = function ()
                                    pcall(ClearConsole)
                                end })
                            end
                            
                            -- auto buy
                            if game.PlaceId ~= 9825515356 then
                                do
                                    local auto_buy = {
                                        enabled = false,
                                        objects = {
                                            guns = {},
                                            equipment = {},
                                            food = {}
                                        },
                                        state = false
                                    }
                                
                                    local shops = workspace:WaitForChild("Ignored"):FindFirstChild("Shop")
                                
                                    function auto_buy:purchase(arguments)
                                        local click_detector = arguments.ClickDetector
                                        local head = arguments.Head
                                
                                        local Distance = (LocalPlayer.Character.HumanoidRootPart.Position - head.Position).Magnitude
                                        if Distance < 9 then
                                            fireclickdetector(click_detector)
                                        end
                                    end
                                
                                    function auto_buy:gun(child, string_name, dropdown_value)
                                        if not table.find(auto_buy.objects.guns, dropdown_value) then return end
                                        if not child.Name:find(string_name) then return end
                                        pcall(function ()
                                            self:purchase({ ClickDetector = child.ClickDetector, Head = child.Head })
                                        end)
                                    end
                                
                                    function auto_buy:equipment(child, string_name, dropdown_value)
                                        if not table.find(auto_buy.objects.equipment, dropdown_value) then return end
                                        if not child.Name:find(string_name) then return end
                                        pcall(function ()
                                            self:purchase({ ClickDetector = child.ClickDetector, Head = child.Head })
                                        end)
                                    end
                                
                                    function auto_buy:food(child, string_name, dropdown_value)
                                        if not table.find(auto_buy.objects.food, dropdown_value) then return end
                                        if not child.Name:find(string_name) then return end
                                        pcall(function ()
                                            self:purchase({ ClickDetector = child.ClickDetector, Head = child.Head })
                                        end)
                                    end
                                
                                    function auto_buy:has_armor()
                                        return LocalPlayer.Character.BodyEffects.Armor.Value > 0 and true or false
                                    end
                                
                                    local shop_objs = shops:GetChildren()
                                
                                    function auto_buy:start()
                                        if not da_hood.functions:is_localplayer_alive() then return end
                                        if not auto_buy.enabled then return end
                                
                                        if not auto_buy.state then
                                            auto_buy.state = true
                                
                                            for _, v in ipairs(shop_objs) do
                                                if v:FindFirstChild("Head") then
                                                    do -- guns
                                                        auto_buy:gun(v, "Double", "[Double-Barrel SG]")
                                                        auto_buy:gun(v, "Revolver", "[Revolver]")
                                                        auto_buy:gun(v, "Rifle", "[Rifle]")
                                                        auto_buy:gun(v, "[Shotgun]", "[Shotgun]")
                                                        auto_buy:gun(v, "TacticalShotgun", "[TacticalShotgun]")
                                                        auto_buy:gun(v, "[Silencer]", "[Silencer]")
                                                        auto_buy:gun(v, "SilencerAR", "[SilencerAR]")
                                                        auto_buy:gun(v, "LMG", "[LMG]")
                                                        auto_buy:gun(v, "Glock", "[Glock]")
                                                        auto_buy:gun(v, "SMG", "[SMG]")
                                                        auto_buy:gun(v, "AK47", "[AK47]")
                                                        auto_buy:gun(v, "AR", "[AR]")
                                                        auto_buy:gun(v, "AUG", "[AUG]")
                                                        auto_buy:gun(v, "DrumGun", "[DrumGun]")
                                                        auto_buy:gun(v, "P90", "[P90]")
                                                    end
                                
                                                    do -- equipment
                                                        if not auto_buy:has_armor() then
                                                            auto_buy:equipment(v, "Armor", "[Armor]")
                                                        end
                                                    end
                                
                                                    do
                                                        auto_buy:food(v, "Chicken", "[Chicken]")
                                                        auto_buy:food(v, "Pizza", "[Pizza]")
                                                        auto_buy:food(v, "Cranberry", "[Cranberry]")
                                                    end
                                                end
                                            end
                                
                                            auto_buy.state = false
                                        end
                                    end
                                
                                    local run_auto_buy = false
                                
                                    local auto_buy_func = function()
                                        while run_auto_buy do
                                            task.wait(0.1)
                                
                                            auto_buy:start()
                                        end
                                    end
                                
                                    local gun_list = { "[Double-Barrel SG]", "[Revolver]", "[Rifle]", "[TacticalShotgun]", "[Shotgun]",
                                        "[Silencer]", "[SilencerAR]", "[LMG]", "[Glock]", "[SMG]", "[AK47]", "[AR]", "[AUG]", "[DrumGun]", "[P90]" }
                                
                                    local equipment_list = { "[Armor]" }
                                
                                    local food_list = { "[Chicken]", "[Pizza]", "[Cranberry]" }
                                
                                    local buy_bot = miscTab:Section("buybot", "left")
                                
                                    buy_bot:Toggle({
                                        title = "enabled",
                                        default = false,
                                        callback = function(bool)
                                            auto_buy.enabled = bool
                                
                                            if bool then
                                                run_auto_buy = true
                                                coroutine.wrap(auto_buy_func)()
                                            else
                                                run_auto_buy = false
                                            end
                                        end
                                    })
                                
                                    buy_bot:Dropdown({
                                        title = "guns",
                                        values = gun_list,
                                        default = "[Revolver]",
                                        multi = true,
                                        callback = function(value)
                                            auto_buy.objects.guns = value
                                        end
                                    })
                                
                                    buy_bot:Dropdown({
                                        title = "equipment",
                                        values = equipment_list,
                                        default = "[Armor]",
                                        multi = true,
                                        callback = function(value)
                                            auto_buy.objects.equipment = value
                                        end
                                    })
                                
                                    buy_bot:Dropdown({
                                        title = "food",
                                        values = food_list,
                                        default = "[Chicken]",
                                        multi = true,
                                        callback = function(value)
                                            auto_buy.objects.food = value
                                        end
                                    })
                                end
                            end
                            
                            -- macro
                            do
                                local macro = {
                                    enabled = false,
                                    keybind = false,
                                    speed = 1,
                                    type = "first person",
                                    macroabuse = false
                                }
                            
                                function macro:first_person()
                                    if not da_hood.functions:is_localplayer_alive() then return end
                                    if not macro.enabled then return end
                                    if not macro.keybind then return end
                            
                                    task.wait(macro.speed / 10000)
                                    inputManager:SendMouseWheelEvent("0", "0", true, game)
                                    task.wait(macro.speed / 10000)
                                    inputManager:SendMouseWheelEvent("0", "0", false, game)
                                    task.wait(macro.speed / 10000)
                                    inputManager:SendMouseWheelEvent("0", "0", true, game)
                                    task.wait(macro.speed / 10000)
                                    inputManager:SendMouseWheelEvent("0", "0", false, game)
                                    task.wait(macro.speed / 10000)
                                end
                            
                                function macro:third_person()
                                    if not da_hood.functions:is_localplayer_alive() then return end
                                    if not macro.enabled then return end
                                    if not macro.keybind then return end
                            
                                    task.wait(macro.speed / 10000)
                                    inputManager:SendKeyEvent(true, "I", false, game)
                                    task.wait(macro.speed / 10000)
                                    inputManager:SendKeyEvent(true, "O", false, game)
                                    task.wait(macro.speed / 10000)
                                    inputManager:SendKeyEvent(true, "I", false, game)
                                    task.wait(macro.speed / 10000)
                                    inputManager:SendKeyEvent(true, "O", false, game)
                                    task.wait(macro.speed / 10000)
                                end
                            
                                function macro:macro_abuse(input)
                                    if not da_hood.functions:is_localplayer_alive() then return end
                                    if not macro.macroabuse then return end
                                    if not macro.enabled then return end
                            
                                    if input.KeyCode == Enum.KeyCode.I then
                                        if LocalPlayer.Character:FindFirstChild("GunScript", true) ~= nil or LocalPlayer.Character:FindFirstChild("FlameThrowerScript", true) ~= nil or LocalPlayer.Character:FindFirstChild("RPGScript", true) ~= nil then
                                            local CAMERA_CONTROLLER = require(LocalPlayer:WaitForChild("PlayerScripts"):WaitForChild("PlayerModule")):GetCameras().activeCameraController
                                            CAMERA_CONTROLLER:SetCameraToSubjectDistance(CAMERA_CONTROLLER.currentSubjectDistance - 5)
                                        end
                                    end
                            
                                    if input.KeyCode == Enum.KeyCode.O then
                                        if LocalPlayer.Character:FindFirstChild("GunScript", true) ~= nil or LocalPlayer.Character:FindFirstChild("FlameThrowerScript", true) ~= nil or LocalPlayer.Character:FindFirstChild("RPGScript", true) ~= nil then
                                            local CAMERA_CONTROLLER = require(LocalPlayer:WaitForChild("PlayerScripts"):WaitForChild("PlayerModule")):GetCameras().activeCameraController
                                            CAMERA_CONTROLLER:SetCameraToSubjectDistance(CAMERA_CONTROLLER.currentSubjectDistance + 5)
                                        end
                                    end
                                end
                            
                                connect(inputService.InputBegan, function(input) macro:macro_abuse(input) end)
                            
                                local run_macro = false
                            
                                local macro_coroutine = function ()
                                    while run_macro do
                                        task.wait()
                                        if macro.type == "first person" then
                                            macro:first_person()
                                        elseif macro.type == "third person" then
                                            macro:third_person()
                                        end
                                    end
                                end
                            
                                local macroHandlers = {}
                                macroHandlers.stop = function() run_macro = false end
                                macroHandlers.resume = function() run_macro = true coroutine.wrap(macro_coroutine)() end
                            
                                local macro_misc = miscTab:Section("macro", "left")
                            
                                local macro_toggle = macro_misc:Toggle({ title = "enabled", default = false, callback = function (bool)
                                    macro.enabled = bool
                                end })
                                macro_toggle:Keybind({ title = "macro", keybindlist = true, keybindname = "macro", callback = function (key)
                                    macro.keybind = key
                                    if key and macro.enabled then
                                        macroHandlers.resume()
                                    else
                                        macroHandlers.stop()
                                    end
                                end })
                                macro_misc:Slider({ title = "macro speed", suffix = "", min = 1, max = 100, default = 1,float = 1, callback = function (value)
                                    macro.speed = value
                                end })
                                macro_misc:Dropdown({ title = "macro type", values = {"first person", "third person"}, default = "first person", multi = false, callback = function (value)
                                    macro.type = value
                                end })
                                macro_misc:Toggle({ title = "macro abuse", default = false, callback = function (bool)
                                    macro.macroabuse = bool
                                end })
                            end
                            
                            do -- animation
                                local animation_options = {
                                    enabled = false,
                                    animation = "Greet"
                                }
                            
                                function animation_options:play(animation)
                                    if not da_hood.functions:is_localplayer_alive() then return end
                                    if not animation_options.enabled then return end
                                    if not animation then return end
                            
                                    pcall(function ()
                                        local args = {
                                            [1] = "AnimationPack",
                                            [2] = animation
                                        }
                                        
                                        da_hood.functions:get_main_event():FireServer(table.unpack(args))
                                    end)
                                end
                            
                                local play_animation = miscTab:Section("play animation", "left")
                                
                                local PA_toggle = play_animation:Toggle({ title = "enabled", default = false, callback = function (bool)
                                    animation_options.enabled = bool
                                end })
                                PA_toggle:Keybind({ title = "play animation", keybindlist = true, keybindname = "play animation", mode = "Hold", callback = function (key)
                                    if not animation_options.enabled then return end
                                    if not animation_options.animation then return end
                                    animation_options:play(animation_options.animation)
                                end })
                                play_animation:Dropdown({ title = "animation", values = {"greet", "lay"}, default = "greet", multi = false, callback = function (value)
                                    animation_options.animation = capitalizeFirst(value)
                                end })
                            end
                            
                            -- other
                            do
                                local other = miscTab:Section("other", "right")
                                
                                -- disable seats
                                if game.PlaceId ~= 9825515356 then
                                    do
                                        local Ignored = workspace:WaitForChild("Ignored")
                                        local MAP = workspace:WaitForChild("MAP")
                                        local Map = MAP:WaitForChild("Map")
                                    
                                        local NoSitFunctions = {
                                            NoSit = function ()
                                                if da_hood.functions:is_localplayer_alive() then
                                                    if LocalPlayer.Character.Humanoid.Sit then
                                                        LocalPlayer.Character.Humanoid.Sit = false
                                                    end
                                                end
                                                task.wait(0.01)
                                                for i, v in next, Map:GetDescendants() do
                                                    if v:IsA("Seat") then
                                                        v.Disabled = true
                                                    end
                                                end
                                                for i, v in next, Ignored:GetDescendants() do
                                                    if v:IsA("Seat") then
                                                        v.Disabled = true
                                                    end
                                                end
                                            end,
                                            Revert = function ()
                                                for i, v in next, Map:GetDescendants() do
                                                    if v:IsA("Seat") then
                                                        v.Disabled = false
                                                    end
                                                end
                                                for i, v in next, Ignored:GetDescendants() do
                                                    if v:IsA("Seat") then
                                                        v.Disabled = false
                                                    end
                                                end
                                            end
                                        }
                                
                                        other:Toggle({ title = "no seats", default = false, callback = function (bool)
                                            if bool then
                                                NoSitFunctions.NoSit()
                                            else
                                                NoSitFunctions.Revert()
                                            end
                                        end })
                                    end
                                end
                                
                            
                                -- fake latency
                                do
                                    local fakelatency = {
                                        amount = 0,
                                        enabled = false,
                                        keybind = false
                                    }
                            
                                    fakelatency.enable = function ()
                                        while task.wait() do
                                            if fakelatency.enabled and fakelatency.keybind then
                                                settings().Network.IncomingReplicationLag = fakelatency.amount
                                                task.wait(1)
                                                settings().Network.IncomingReplicationLag = 0
                                            end
                                        end
                                    end
                                    coroutine.wrap(fakelatency.enable)()
                            
                                    local FLtoggle = other:Toggle({ title = "fake latency", default = false, callback = function (bool)
                                        fakelatency.enabled = bool
                                    end })
                                    FLtoggle:Keybind({ title = "fake latency", keybindlist = true, keybindname = "fake latency", mode = "Toggle", callback = function (key)
                                        fakelatency.keybind = key
                                    end })
                                    other:Slider({ title = "fake latency amount", suffix = "", min = 0, max = 100, default = 0,float = 1, callback = function (value)
                                        fakelatency.amount = value
                                    end })
                                end
                            
                                -- 360
                                do
                                    local _360 = {
                                        enabled = false,
                                        keybind = false,
                                        speed = 1
                                    }
                            
                                    function _360:spin()
                                        if _360.enabled and _360.keybind then
                                            for _ = 1, math.floor(360 / _360.speed) do
                                                camera.CoordinateFrame = camera.CoordinateFrame * CFrame.Angles(0, math.rad(_360.speed), 0)
                                                task.wait()
                                            end
                                        end
                                    end
                            
                                    local _360toggle = other:Toggle({ title = "360¬∞ spin", default = false, callback = function (bool)
                                        _360.enabled = bool
                                    end })
                                    _360toggle:Keybind({ title = "360 Keybind", keybindlist = true, keybindname = "360", mode = "Hold", callback = function (key)
                                        _360.keybind = key
                                        if key then
                                            _360:spin()
                                        end
                                    end })
                                    other:Slider({ title = "360 speed", suffix = "", min = 1, max = 10, default = 5,float = 1, callback = function (value)
                                        _360.speed = value
                                    end })
                                end
                            end
                            
                            do
                                local aimviewer = {
                                    enabled = false,
                                    keybind_enabled = false,
                                    color = Color3.fromRGB(255, 255, 255),
                                    has_box = false,
                                    target = nil,
                                }
                            
                                local a=Instance.new("Part")a.Parent=workspace;a.Transparency=0.5;a.Anchored=true;a.CanCollide=false;a.Position=Vector3New(0,9999,0)a.Size=Vector3New(2,2,2)a.Material=Enum.Material.ForceField;local b=Instance.new("SelectionBox",a)b.Adornee=a;b.LineThickness=0.01;b.Color3=aimviewer.color;local c=Instance.new("Beam")c.Segments=1;c.Width0=0.2;c.Width1=0.2;c.Color=ColorSequence.new(aimviewer.color)c.FaceCamera=true;local d=Instance.new("Attachment")local e=Instance.new("Attachment")c.Attachment0=d;c.Attachment1=e;c.Parent=workspace.Terrain;d.Parent=workspace.Terrain;e.Parent=workspace.Terrain
                                local AimviewerPart, AimviewerSelectionBox, AimviewerBeam, Attachment01, Attachment02 = a, b, c, d, e
                            
                                local function disable()
                                    AimviewerPart.Position = Vector3New(0,9999,0)
                                    AimviewerBeam.Enabled = false
                                    Attachment01.Parent = workspace.Terrain
                                    Attachment02.Parent = workspace.Terrain
                                end
                            
                                function aimviewer:enable()
                                    if not da_hood.functions:is_localplayer_alive() then disable() return end
                                    if not aimviewer.enabled then disable() return end
                                    if not aimviewer.keybind_enabled then disable() return end
                                    if not aimviewer.target then disable() return end; if aimviewer.target == nil then disable() return end
                            
                                    local character = aimviewer.target
                                    local bodyeffects = character:FindFirstChild("BodyEffects")
                                    if not bodyeffects then disable() return end
                            
                                    local gun = da_hood.functions:get_gun_from_character(character)
                                    if not gun then disable() return end
                            
                                    local AIMPOSITION = bodyeffects.MousePos.Value
                                    AimviewerPart.Position = Vector3New(AIMPOSITION.X, AIMPOSITION.Y, AIMPOSITION.Z)
                            
                                    local partTransparency = aimviewer.has_box and 0 or 1
                                    local lineThickness = aimviewer.has_box and 0.01 or 0
                                    AimviewerPart.Transparency = partTransparency
                                    AimviewerSelectionBox.Transparency = lineThickness == 0.01 and 0 or 1
                            
                                    AimviewerBeam.Enabled = true
                            
                                    Attachment01.Parent = gun.Handle
                                    Attachment02.Parent = AimviewerPart
                                    AimviewerBeam.Color = ColorSequence.new(aimviewer.color)
                                end
                            
                                local aimviewerSection = miscTab:Section("aim viewer", "right")
                            
                                local AVtoggle = aimviewerSection:Toggle({ title = "enabled", default = false, callback = function (bool)
                                    aimviewer.enabled = bool
                                    if not bool then
                                        disable()
                                    end
                                end })
                                AVtoggle:Keybind({ title = "keybind", keybindlist = true, keybindname = "aim viewer", mode = "Toggle", callback = function (key)
                                    aimviewer.keybind_enabled = key
                                    if key and aimviewer.enabled and aimviewer.keybind_enabled then
                                        aimviewer.target = da_hood.functions:getnearestplayertomouse(100, {  
                                            visibility = true,
                                            wallcheck = false,
                                            team = false,
                                            friends = false,
                                        })
                                        Loops:AddToRenderStepped("Aimviewer", aimviewer.enable)
                                    else
                                        disable()
                                        Loops:RemoveFromRenderStepped("Aimviewer")
                                    end
                                end })
                                aimviewerSection:Toggle({ title = "include box", default = false, callback = function (bool)
                                    aimviewer.has_box = bool
                                end })
                            end
                        end
                        do -- src/Lua/Scripts/da_hood/components/e_playerlist.lua
                            local players_tab = Interface:Tab( "player-list" )
                            
                            local players_list = players_tab:Section("main", "left")
                            local advanced = players_tab:Section("advanced", "right")
                            
                            local playerlist = players_list:PlayerList()
                            
                            local player_name = advanced:Label("player name : ...")
                            local index = advanced:Label("player index : ...")
                            
                            local mark = DrawingClass({"Circle", {Visible = false, Transparency = 1, Radius = 5, Color = Color3.fromRGB(255,255,255), Filled = true}})
                            
                            advanced:Button({ title = "copy player profile", callback = function ()
                                local current_player = playerlist:GetCurrentPlayer()
                                if current_player then
                                    local player_userid = playerService[current_player].UserId
                                    local link = ("https://www.roblox.com/users/%s/profile"):format(tostring(player_userid))
                                    setclipboard(link)
                                end
                            end })
                            advanced:Button({ title = "copy player userid", callback = function ()
                                local current_player = playerlist:GetCurrentPlayer()
                                if current_player then
                                    local player_userid = playerService[current_player].UserId
                                    setclipboard(player_userid)
                                end
                            end })
                            advanced:Toggle({ title = "mark player", default = false, callback = function (bool)
                                if bool then
                                    Loops:AddToRenderStepped("RenderMarkPLayer", function ()
                                        local current_player = playerlist:GetCurrentPlayer()
                                        if current_player then
                                            local player = playerService[current_player]
                                            if not player then
                                                mark.Visible = false
                                                return
                                            end
                                    
                                            if da_hood.functions:is_alive(player) then
                                                local character = player.Character
                                                if not character then
                                                    mark.Visible = false
                                                    return
                                                end
                                                
                                                local headpos = nil
                                    
                                                local head = character:FindFirstChild("Head")
                                                if not head then mark.Visible = false return end
                                    
                                                headpos = head.Position
                                    
                                                local screenpos, onscreen = camera:WorldToViewportPoint(headpos)
                                                mark.Visible = onscreen
                                    
                                                local v2pos = Vector2.new(screenpos.X, screenpos.Y)
                                                mark.Position = v2pos
                                            else
                                                mark.Visible = false
                                            end
                                        else
                                            mark.Visible = false
                                        end
                                    end)
                                else
                                    mark.Visible = false
                                    Loops:RemoveFromRenderStepped("RenderMarkPLayer")
                                end
                            end })
                            advanced:Button({ title = "teleport to player (risky)", callback = function ()
                                local current_player = playerlist:GetCurrentPlayer()
                                if current_player then
                                    local player = playerService[current_player]
                                    if da_hood.functions:is_alive(player) then
                                        local character = player.Character
                                        if not character then return end
                                        
                                        local tp_pos = nil
                            
                                        local humanoidrootpart = character:FindFirstChild("HumanoidRootPart")
                                        if not humanoidrootpart then return end
                            
                                        tp_pos = humanoidrootpart.CFrame
                            
                                        if da_hood.functions:is_localplayer_alive() then
                                            local local_hum = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                                            if not local_hum then return end
                            
                                            local_hum.CFrame = tp_pos
                                        end
                                    end
                                end
                            end })
                            
                            local function update_thing()
                                local current_player = playerlist:GetCurrentPlayer()
                                if not current_player then 
                                    player_name:ChangeText("player name : ...")
                                    index:ChangeText("player index : ...")
                                    return
                                end
                            
                                local playersinlist = playerlist:GetPlayers()
                                local indexinlist = 0
                                for i, v in next, playersinlist do
                                    if string.find(v.Name, current_player) then
                                        indexinlist = i
                                    end
                                end
                            
                                player_name:ChangeText("player name : " .. tostring(current_player))
                                index:ChangeText("player index : " .. tostring(indexinlist))
                            end
                            
                            local loop_update_thing = coroutine.create(function()
                                while wait() do
                                    update_thing()
                                end
                            end)
                            coroutine.resume(loop_update_thing)
                        end
                        do -- src/Lua/Scripts/da_hood/components/f_settings.lua
                            local config = {
                                path = "drax/configs/da_hood/",
                                file = "",
                                config_name = ""
                            }
                            function config:get_list()
                                local config_list = {}
                            
                                if #listfiles("drax/configs/da_hood") > 0 then
                                    for i, v in next, listfiles("drax/configs/da_hood") do
                                        local ext = '.'..v:split('.')[#v:split('.')];
                                        if ext == '.txt' then
                                            table.insert(config_list, v:split('\\')[#v:split('\\')]:sub(1,-#ext-1))
                                        end
                                    end
                                else
                                    config_list = {}
                                end
                            
                                return config_list
                            end
                            
                            local settingsTab = Interface:Tab( "settings." )
                            
                            local loading_config = false
                            local NOTE = settingsTab:Section("TAKE NOTE", "left")
                            NOTE:Label("THIS SECTION IS STILL IN DEVELOPMENT üî®")
                            
                            local profiles = settingsTab:Section("configuration", "left")
                            
                            profiles:TextBox({ title = "NO TITLE", default = "", placeholder = "config name", ClearTextOnFocus = true, callback = function (value)
                                config.config_name = value
                            end })
                            
                            local configs_list, funcs = profiles:Dropdown({ title = "configs", values = config:get_list(), default = "--", multi = false, callback = function (value)
                                config.file = value
                            end })
                            
                            profiles:Button({ title = "load config", callback = function ()
                                if config.file == nil then return end
                                if not isfile(config.path .. config.file .. ".txt") then return end
                            
                                loading_config = true
                                local config_to_load = readfile(config.path .. config.file .. ".txt")
                                UserInterface:LoadConfig(config_to_load)
                                funcs:Refresh(config:get_list())
                                loading_config = false
                            end })
                            
                            profiles:Button({ title = "save config", callback = function ()
                                if config.config_name ~= "" then
                                    writefile(config.path .. config.config_name .. ".txt", UserInterface:GetConfig())
                                    funcs:Refresh(config:get_list())
                                end
                            end })
                            
                            profiles:Button({ title = "delete config", callback = function ()
                                if config.file ~= nil then
                                    local config_to_delete = config.path .. config.file .. ".txt"
                                    delfile(config_to_delete)
                                    funcs:Refresh(config:get_list())
                                end
                            end })
                            
                            profiles:Button({ title = "refresh list", callback = function ()
                                funcs:Refresh(config:get_list())
                            end })
                            
                            local theme_section = settingsTab:Section("theme", "right")
                            
                            getgenv().theme = {
                                accent = Color3FromRGB(168, 157, 159),
                                scroll = Color3FromRGB(168, 157, 159)
                            }
                            
                            local old_theme = table.clone(getgenv().theme)
                            local theme_objects = {}
                            
                            theme_objects["accent"] = theme_section:Colorpicker({ title = "accent", default = Color3.fromRGB(168, 157, 159), transparency = 1, callback = function (value, transparency)
                                theme.accent = value
                                theme_event:Fire()
                            end })
                            
                            theme_objects["scroll"] = theme_section:Colorpicker({ title = "scrollbar", default = Color3.fromRGB(168, 157, 159), transparency = 1, callback = function (value, transparency)
                                theme.scroll = value
                                theme_event:Fire()
                            end })
                            
                            theme_section:Button({ title = "reset to default", callback = function ()
                                -- dont really have a good method to do this shit
                                for i1, v1 in next, old_theme do
                                    for i2, v2 in next, theme_objects do
                                        if not i1 == i2 then continue end
                                        v2:Set(v1)
                                    end
                                end
                            end })
                            
                            local menu_misc = settingsTab:Section("menu", "right")
                            
                            menu_misc:Keybind({title = "menu keybind", keybindlist = false, keybindname = "menu:", key = "RightAlt", callback = function (bool)
                                if not loading_config then
                                    UI["2"].Visible = not UI["2"].Visible
                                end
                            end })
                            
                            menu_misc:Toggle({ title = "keybind ui", default = true, callback = function (bool)
                                UI.KeybindListo.Visible = bool
                            end })
                            
                            UI["2"].Visible = true
                        end
                    end
                    
                    UserInterface:KeybindsList()
                end
                
            end)()
        elseif chosen_game == "universal" then
            (function() -- src/Lua/Scripts/universal/universal.lua
                -- with bananas, we live.
                
                local universal = {
                    functions = {}
                }
                
                local camera = workspace.CurrentCamera
                
                local connect = include "Connect"
                local Lerp = include "lerp"
                local Loops = include "Loops"
                local DrawingClass = include "DrawingClass"
                
                local function capitalizeFirst(str)
                    return str:sub(1,1):upper() .. str:sub(2):lower()
                end
                
                -- due to visuals, I had to put this here.
                local aimassist = {
                    enabled = false,
                    keybind = false,
                    smoothness = 1000,
                    fieldofview = 100,
                    closest_mode = "none",
                    bones = nil,
                    character = nil,
                    
                    lock_target = false,
                
                    configuration = {
                        visibility = false,
                        wallcheck = false,
                        team = false,
                        friends = false,
                    },
                
                    jitter = {
                        x = 0,
                        y = 0,
                        z = 0
                    },
                
                    randomization = 0,
                
                    use_mouse_sensitivity = false,
                    use_camera = true, -- will be configurable when mousemoverel actually works
                
                    lock_target_state = false,
                
                    prediction = {
                        enabled = false,
                        horizontal = 0,
                        vertical = 0
                    },
                
                    smoothingtype = "Linear"
                }
                
                do
                    (function() -- src/Lua/Scripts/universal/things.lua
                        function universal.functions:is_alive(player)
                        	return player
                        			and player.Character
                        			and player.Character:FindFirstChildOfClass("Humanoid")
                        			and player.Character:FindFirstChildOfClass("Humanoid").Health > 0
                        			and true
                        		or false
                        end
                        
                        function universal.functions:is_localplayer_alive()
                        	return self:is_alive(LocalPlayer)
                        end
                        
                        function universal.functions:wall_check(Character)
                            local Ray = Ray.new(camera.CFrame.Position, (Character.PrimaryPart.Position - camera.CFrame.Position))
                            local IgnoreList = {camera, LocalPlayer.Character, Character, Character.Parent}
                            local PartHit = workspace:FindPartOnRayWithIgnoreList(Ray, IgnoreList)
                            if not PartHit then
                                return true
                            end
                            return false
                        end
                        
                        -- hahahaha, actually did this due to me being lazy to do something like player.Character in getnearestplayertomouse so I did this little shit üòÄüòÄ
                        function universal.functions:getentities()
                        	local entities = {}
                        	for _, player in ipairs(playerService:GetPlayers()) do
                        		if player == LocalPlayer then
                        			continue
                        		end
                                
                        		if not universal.functions:is_alive(player) then
                        			continue
                        		end
                                
                        		if table.find(entities, player.Character) then
                        			continue
                        		end
                        
                        		local character = player.Character
                        		table.insert(entities, character)
                        	end
                        	return entities
                        end
                        
                        function universal.functions:getnearestplayertomouse(distance, settings)
                        	local entity = nil
                        	local distance = distance
                        	for i, v in next, self:getentities() do
                                if settings.friends and playerService[v.Name]:IsFriendsWith(LocalPlayer.UserId) then
                                    continue 
                                end
                        
                                if settings.team and playerService[v.Name].Team == LocalPlayer.Team then
                                    continue 
                                end
                        
                                local humanoidrootpart = v:FindFirstChild("HumanoidRootPart")
                                if not humanoidrootpart then
                                    continue
                                end
                        
                                local humanoid = v:FindFirstChild("Humanoid")
                                if not humanoid then
                                    continue
                                end
                        
                                if humanoid.Health == 0 then
                                    continue
                                end
                        
                        		local hitbox_pos = v:FindFirstChild("HumanoidRootPart").Position
                        		local v2_pos, onscreen = camera:WorldToViewportPoint(hitbox_pos)
                        
                        		if settings.visibility and not onscreen then
                        			continue
                        		end
                        
                                if settings.wallcheck and not self:wall_check(v) then
                                    continue
                                end
                        
                        		local magnitude = (Vector2New(v2_pos.X, v2_pos.Y) - inputService:GetMouseLocation()).Magnitude
                        		if magnitude < distance then
                        			entity = v
                        			distance = magnitude
                        		end
                        	end
                        	return entity
                        end
                        
                        function universal.functions:getclosestpart(character, config)
                        	local Distance = MathHuge
                        	local MousePosition = inputService:GetMouseLocation()
                        	local ClosestPart
                        	for i, v in ipairs(character:GetChildren()) do
                        		if #config == 0 then
                        			continue
                        		end
                        
                        		if v:IsA("Part") or v:IsA("MeshPart") then
                        			if TableFind(config, v.Name) then
                        				local Point, OnScreen = camera:WorldToViewportPoint(v.Position)
                        				if not OnScreen then
                        					ClosestPart = character.HumanoidRootPart
                        					continue
                        				end
                        				local Magnitude = (MousePosition - Vector2New(Point.X, Point.Y)).Magnitude
                        				if Magnitude < Distance then
                        					Distance = Magnitude
                        					ClosestPart = v
                        				end
                        			end
                        		end
                        	end
                        
                        	return ClosestPart
                        end
                        
                        function universal.functions:closestpoint(part)
                        	local RaycastParamsClosestPoint = RaycastParamsNew()
                        	RaycastParamsClosestPoint.FilterType = Enum.RaycastFilterType.Whitelist
                        	RaycastParamsClosestPoint.FilterDescendantsInstances = { part }
                        
                        	local MouseRay = Mouse.UnitRay
                        	MouseRay = MouseRay.Origin + (MouseRay.Direction * (part.Position - MouseRay.Origin).Magnitude)
                        	local Origin = (MouseRay.Y >= (part.Position - part.Size / 2).Y and MouseRay.Y <= (part.Position + part.Size / 2).Y)
                        			and (part.Position + Vector3New(0, -part.Position.Y + MouseRay.Y, 0))
                        		or part.Position
                        
                        	local Raycast = workspace:Raycast(MouseRay, (Origin - MouseRay), RaycastParamsClosestPoint)
                        	return Raycast and Raycast.Position or Mouse.Hit.Position
                        end
                        
                        local rng = getgenv()._random_number_generator
                        	or loadstring(
                        		game:HttpGetAsync("https://gist.githubusercontent.com/Exponential-Workload/593d4b56701133bc827902fe6fdf16a2/raw/random-primeless.lua")
                        	)()({
                        		2005763914272875421616019,
                        		2120351898859582514457029,
                        		1841887723764170988785987,
                        		2310240924147278131725029,
                        	})
                        
                        -- this is so fucking retarded.
                        function universal.functions:mouse_aim(arguments)
                        	if not type(arguments) == "table" then
                        		return
                        	end
                        
                        	local smoothness = arguments.smoothness
                        	local position = arguments.position
                        	local use_mouse_sensitivity = arguments.use_mouse_sensitivity
                        	local jitter = arguments.jitter
                        	local use_camera = arguments.use_camera
                        
                        	if use_camera then
                        		return
                        	end
                        
                        	if not position then
                        		return
                        	end
                        
                        	local CalculateJitter = function(vector1)
                        		if vector1 == 0 then
                        			return 0
                        		end
                        		return rng(vector1 * -1, vector1)
                        	end
                        
                        	local screen_pos, on_screen = camera:WorldToViewportPoint(position)
                        
                        	if not on_screen then
                        		return
                        	end
                        
                        	if use_mouse_sensitivity then
                        		smoothness = smoothness / (userGameSettings.MouseSensitivity / 0.20016)
                        	end
                        
                        	local mousepos = inputService:GetMouseLocation()
                        	local X, Y = screen_pos.X, screen_pos.Y
                        	local AimPosX, AimPosY = X - mousepos.X, Y - mousepos.Y
                        	
                        	mousemoverel(AimPosX / 10, AimPosY/10)
                        end
                        
                        function universal.functions:camera_aim(arguments)
                        	-- oh my loving dear programming life.
                        	-- too much things in arguments üòê
                        
                        	if not type(arguments) == "table" then
                        		return
                        	end -- dev would be a nigger if this actually happens.
                        
                        	local smoothness = arguments.smoothness
                        	local position = arguments.position
                        	local use_mouse_sensitivity = arguments.use_mouse_sensitivity
                        	local use_camera = arguments.use_camera
                        	local character = arguments.character
                        	local prediction = arguments.prediction
                        
                        	local pred_enabled = prediction.enabled
                        	local pred_x = prediction.horizontal
                        	local pred_y = prediction.vertical
                        
                        	local smoothtype = arguments.smoothingtype
                        
                        	local jitter = arguments.jitter
                        	local jitterx = jitter.x
                        	local jittery = jitter.y
                        	local jitterz = jitter.z
                        
                        	if not use_camera then
                        		self:mouse_aim(arguments)
                        		return
                        	end
                        
                        	if not position then
                        		return
                        	end
                        
                        	if use_mouse_sensitivity then
                        		smoothness = smoothness / (userGameSettings.MouseSensitivity / 0.20016)
                        	end
                        
                        	local CalculateJitter = function(vector1)
                        		if vector1 == 0 then
                        			return 0
                        		end
                        		return rng(vector1 * -1, vector1)
                        	end
                        
                        	local jitterNum1 = CalculateJitter(jitterx)
                        	local jitterNum2 = CalculateJitter(jittery)
                        	local jitterNum3 = CalculateJitter(jitterz)
                        
                        	local jFinal = Vector3New(jitterNum1, jitterNum2, jitterNum3)
                        
                        	-- pov, you avoid else in if statements ü§£ü§£ü§£
                        	if pred_enabled then
                        		local player_jump = character.Humanoid:GetState() == "Freefall" and true or false
                        		local player_velocity = character.HumanoidRootPart.Velocity
                        
                        		local onjump = arguments.position + player_velocity * pred_y
                        		local notjump = arguments.position + player_velocity * pred_x
                        
                        		if player_jump then
                        			position = CFrameNew(camera.CFrame.Position, onjump + jFinal )
                        		end
                        
                        		if not player_jump then
                        			position = CFrameNew(camera.CFrame.Position, notjump + jFinal )
                        		end
                        	end
                        	
                        	if not pred_enabled then
                        		position = CFrameNew(camera.CFrame.Position, arguments.position + jFinal)
                        	end
                        
                        	camera.CFrame = camera.CFrame:Lerp(position, smoothness, Enum.EasingStyle[smoothtype], Enum.EasingDirection.InOut)
                        
                        	-- might add more shit soon
                        end
                        
                    end)()
                end
                
                local Interface = UserInterface:Create{title = 'drax<font color="rgb(168, 157, 159)">.universal</font>',}
                
                do -- src/Lua/Scripts/universal/components/
                    do -- src/Lua/Scripts/universal/components/a_aimassist.lua
                        -- THIS SHIT IS ACTUALLY P!112!!!! üò±üò±üò±
                        -- üòéüòéüòéüòéüòé
                        
                        function aimassist:get_position()
                            local position
                            local bone = aimassist.bones:GetValues()
                        
                            local closest_mode = aimassist.closest_mode
                        
                            if type(bone) == "table" and #bone > 0 then
                                if closest_mode ~= "none" then
                                    if closest_mode == "closest part" then
                                        local newBone = tostring(universal.functions:getclosestpart(aimassist.character, bone))
                                        if type(newBone) == "string" and newBone ~= "" and aimassist.character:FindFirstChild(newBone) then -- very superior check üòé could do a better one but meh
                                            position = aimassist.character[newBone].Position
                                        end
                                    elseif closest_mode == "closest point" then
                                        local newBone = tostring(universal.functions:getclosestpart(aimassist.character, bone))
                                        if type(newBone) == "string" and newBone ~= "" and aimassist.character:FindFirstChild(newBone) then
                                            position = universal.functions:closestpoint(aimassist.character[newBone])
                                        end
                                    end
                                end
                            end
                        
                            if type(bone) == "string" and bone ~= "" and aimassist.character:FindFirstChild(bone) then
                                position = aimassist.character[bone].Position
                            end
                        
                            return position
                        end
                        
                        function aimassist:enable()
                            if not aimassist.enabled then
                                return end
                        
                            if not aimassist.keybind then
                                return end
                        
                            if not aimassist.character then
                                return end
                            
                            universal.functions:camera_aim({
                                smoothness = aimassist.smoothness,
                                use_mouse_sensitivity = aimassist.use_mouse_sensitivity,
                                jitter = aimassist.jitter,
                                randomization = aimassist.randomization,
                                position = aimassist:get_position(),
                                use_camera = aimassist.use_camera,
                                prediction = aimassist.prediction,
                                character = aimassist.character,
                                smoothingtype = aimassist.smoothingtype
                            })
                        end
                        
                        local run_gac = false
                        
                        local g_a_c = function () -- wanted to make it syntatcic sugar but wateva!! 
                            while run_gac do -- foking cwazyy matee
                                TaskWait()
                        
                                if aimassist.lock_target then
                                    local char = universal.functions:getnearestplayertomouse(aimassist.fieldofview, aimassist.configuration)
                                    if char ~= nil and aimassist.lock_target_state == false then
                                        aimassist.lock_target_state = true
                                        aimassist.character = char
                                    end
                                else
                                    aimassist.character = universal.functions:getnearestplayertomouse(aimassist.fieldofview, aimassist.configuration)
                                end
                            end
                            aimassist.character = nil
                        end
                        
                        -- chat is this p100??
                        local gacHandlers = {}
                        gacHandlers.stop = function() run_gac = false end
                        gacHandlers.resume = function() run_gac = true coroutine.wrap(g_a_c)() end
                        
                        -- interface
                        local aim_assist = Interface:Tab( "aim assist" )
                        
                        local main = aim_assist:Section("main", "left")
                        local prediction = aim_assist:Section("prediction", "left")
                        local settings = aim_assist:Section("settings", "left")
                        local bone = aim_assist:Section("bone/s", "right")
                        local jitter_sec = aim_assist:Section("jitter", "right")
                        
                        -- pretty shitty but its whatever
                        local bone_Selected
                        bone:Dropdown({ title = "closest mode", values = {"none", "closest part", "closest point"}, default = "none", multi = false, callback = function (value)
                            aimassist.closest_mode = value
                            if value == "none" then
                                bone_Selected:SetMulti(false)
                            elseif value == "closest point" then
                                bone_Selected:SetMulti(true)
                            elseif value == "closest part" then
                                bone_Selected:SetMulti(true)
                            end
                        end })
                        
                        bone_Selected = bone:BoneSelector({ multi = false, default = "Head" })
                        aimassist.bones = bone_Selected
                        bone_Selected:Set("Head")
                        
                        local main_enabled = main:Toggle({ title = "enabled", default = false, callback = function (bool)
                            aimassist.enabled = bool
                        end })
                        main_enabled:Keybind({ keybindlist = true, keybindname = "aim assist", key = "MB2", callback = function (bool)
                            aimassist.keybind = bool
                            if bool then
                                gacHandlers.resume()
                        
                                aimassist.character = nil
                        
                                Loops:AddToRenderStepped("aimassist", aimassist.enable)
                            else
                                gacHandlers.stop()
                        
                                aimassist.character = nil
                                aimassist.lock_target_state = false
                        
                                Loops:RemoveFromRenderStepped("aimassist")
                            end
                        end })
                        
                        main:Slider({ title = "field of view", suffix = "¬∞", min = 10, max = 1000, default = 100,float = 1, callback = function (value)
                            aimassist.fieldofview = value
                        end })
                        
                        main:Slider({ title = "smoothness", suffix = "", min = 10, max = 1000, default = 100,float = 1, callback = function (value)
                            aimassist.smoothness = value / 1000
                        end })
                        
                        main:Toggle({ title = "use mouse sensitivty", default = false, callback = function (bool)
                            aimassist.use_mouse_sensitivity = bool
                        end })
                        
                        --[[
                        main:Toggle({ title = "use camera", default = false, callback = function (bool)
                            aimassist.use_camera = bool
                        end })]]
                        
                        main:Dropdown({ title = "smoothing", values = {"linear", "exponential"}, default = "linear", multi = false, callback = function (value)
                            aimassist.smoothingtype = capitalizeFirst(value)
                        end })
                        
                        prediction:Toggle({ title = "prediction", default = false, callback = function (bool)
                            aimassist.prediction.enabled = bool
                        end })
                        prediction:Slider({ title = "horizontal prediction", suffix = "", min = 0.1, max = 0.2, default = 0.15, float = 0.001, callback = function (value)
                            aimassist.prediction.horizontal = value
                        end })
                        prediction:Slider({ title = "vertical prediction", suffix = "", min = 0.1, max = 0.2, default = 0.15, float = 0.001, callback = function (value)
                            aimassist.prediction.vertical = value
                        end })
                        
                        settings:Toggle({ title = "sticky aim", default = false, callback = function (bool)
                            aimassist.lock_target = bool if bool == false then aimassist.lock_target_state = false end
                        end })
                        
                        settings:Toggle({ title = "don't aim friends", default = false, callback = function (bool)
                            aimassist.configuration.friends = bool
                        end })
                        
                        settings:Toggle({ title = "don't aim team", default = false, callback = function (bool)
                            aimassist.configuration.team = bool
                        end })
                        
                        settings:Toggle({ title = "visibility check", default = true, callback = function (bool)
                            aimassist.configuration.visibility = bool
                        end })
                        
                        settings:Toggle({ title = "wall check", default = false, callback = function (bool)
                            aimassist.configuration.wallcheck = bool
                        end })
                        
                        jitter_sec:Slider({ title = "jitter x", suffix = "", min = 0, max = 5, default = 0, float = 0.1, callback = function (value)
                            aimassist.jitter.x = value
                        end })
                        jitter_sec:Slider({ title = "jitter y", suffix = "", min = 0, max = 5, default = 0, float = 0.1, callback = function (value)
                            aimassist.jitter.y = value
                        end })
                        jitter_sec:Slider({ title = "jitter z", suffix = "", min = 0, max = 5, default = 0, float = 0.1, callback = function (value)
                            aimassist.jitter.z = value
                        end })
                    end
                    do -- src/Lua/Scripts/universal/components/b_render.lua
                        local renderTab = Interface:Tab( "render" )
                        
                        local aim_assist_render = renderTab:Section("aim assist", "left")
                        
                        local showfov = {
                            enabled = false,
                            filled = false,
                            transparency = 0.5,
                            color = Color3.fromRGB(255,255,255)
                        }
                        
                        local fov = aim_assist_render:Toggle({ title = "show fov", default = false, callback = function (bool)
                            showfov.enabled = bool
                        end })
                        fov:Colorpicker({ default = Color3.fromRGB(170, 170, 255), transparency = 0.5, callback = function (value, transparency)
                            showfov.color = value
                            showfov.transparency = transparency
                        end })
                        aim_assist_render:Toggle({ title = "fov filled", default = false, callback = function (bool)
                            showfov.filled = bool
                        end })
                        
                        local showline = {
                            enabled = false,
                            color = Color3.fromRGB(255,255,255)
                        }
                        
                        local line = aim_assist_render:Toggle({ title = "show line", default = false, callback = function (bool)
                            showline.enabled = bool
                        end })
                        line:Colorpicker({ default = Color3.fromRGB(170, 170, 255), transparency = 0.5, callback = function (value)
                            showline.color = value
                        end })
                        
                        local FOV = DrawingClass({ "Circle", { Visible = false, Transparency = 1,  } })
                        local LINE = DrawingClass({ "Line", { Visible = false, Transparency = 1  } })
                        
                        local function FOVf() -- f refers to function
                            if not showfov.enabled then
                                FOV.Visible = false
                                return
                            end
                        
                            FOV.Radius = aimassist.fieldofview
                            FOV.Color = showfov.color
                            FOV.Transparency = showfov.transparency
                            FOV.Filled = showfov.filled
                            FOV.Position = inputService:GetMouseLocation()
                            FOV.Visible = true
                        end
                        
                        local function Linef()
                            if not showline.enabled then
                                LINE.Visible = false
                                return
                            end
                        
                            if not aimassist.enabled then
                                LINE.Visible = false
                                return
                            end
                        
                            if not aimassist.keybind then
                                LINE.Visible = false
                                return
                            end
                        
                            if not aimassist.character then
                                LINE.Visible = false
                                return
                            end
                        
                            local position = aimassist:get_position()
                            if position == nil then
                                LINE.Visible = false
                                return
                            end
                        
                            local screenpos, onscreen = camera:WorldToViewportPoint(position)
                            if not onscreen then
                                LINE.Visible = false
                                return
                            end
                        
                            local screencoordinates = Vector2New(screenpos.X, screenpos.Y)
                            LINE.From = inputService:GetMouseLocation()
                            LINE.To = screencoordinates
                            LINE.Color = showline.color
                            LINE.Visible = true
                        end
                        
                        local function Render()
                            FOVf()
                            Linef()
                        end
                        Loops:AddToRenderStepped("render_aimassist", Render)
                        
                        local fucking_shitty_indicator = {
                            enabled = false,
                            
                            y_level = -30,
                            
                            position = "mouse",
                        
                            objectss = {},
                        
                            new_indicator = function ( self, name )
                                local shit = {}
                        
                                local indicattt = DrawingClass({ "Text", { Font = 2, Visible = false, Transparency = 1, Text = name, Outline = true, Center = true, Color = Color3.fromRGB(168, 157, 159), Size = 14 } })
                        
                                local dist = self.y_level - 14
                        
                                local change_pos = function ()
                        
                                    if self.position == "mouse" then
                                        local mousepos = inputService:GetMouseLocation()
                                        local y_level_with_shitty_mousepos = Vector2New(mousepos.X, mousepos.Y - dist)
                                        indicattt.Position = y_level_with_shitty_mousepos
                                    end
                        
                                    if self.position == "center" then
                                        local y_level_with_shitty_camerapos = Vector2New(camera.ViewportSize.X / 2, (camera.ViewportSize.Y / 2) - dist)
                                        indicattt.Position = y_level_with_shitty_camerapos
                                    end
                        
                                end
                        
                                connect(inputService.InputChanged, change_pos)
                        
                                shit.changecolor = function (newColor)
                                    indicattt.Color = newColor
                                end
                        
                                shit.changetext = function (newText)
                                    indicattt.Text = newText
                                end
                        
                                shit.changeVisibility = function (newBool)
                                    self.y_level = self.y_level - 14
                                    indicattt.Visible = newBool
                                end
                        
                                table.insert(self.objectss, indicattt)
                                self.y_level = self.y_level + 14
                        
                                return shit
                            end,
                        
                            show = function (self)
                                for i, v in next, self.objectss do
                                    if v then
                                        v.Visible = true
                                    end
                                end
                            end,
                        
                            unshow = function (self)
                                for i, v in next, self.objectss do
                                    if v then
                                        v.Visible = false
                                    end
                                end
                            end
                        }
                        
                        local renderindicator = renderTab:Section("indicator", "right")
                        
                        renderindicator:Toggle({ title = "indicator", default = false, callback = function (bool)
                            fucking_shitty_indicator.enabled = bool
                        
                            local action = fucking_shitty_indicator.enabled and fucking_shitty_indicator.show or fucking_shitty_indicator.unshow
                            action(fucking_shitty_indicator)
                        end })
                        
                        renderindicator:Dropdown({ title = "position", values = {"mouse", "center"}, default = "mouse", multi = false, callback = function (value)
                            fucking_shitty_indicator.position = value
                        end })
                        
                        local aim_Ass_character = fucking_shitty_indicator:new_indicator("no target")
                        local title = fucking_shitty_indicator:new_indicator("drax.universal")
                        aim_Ass_character.changecolor(Color3.fromRGB(255,255,255))
                        
                        local randomshit = coroutine.create(function ()
                            while wait() do
                                local showshit = aimassist.character
                                local textshit = showshit and aimassist.character.Name or "no target"
                                aim_Ass_character.changetext(textshit)
                            end
                        end)
                        coroutine.resume(randomshit)
                    end
                    do -- src/Lua/Scripts/universal/components/c_players.lua
                        local esp = {}
                        esp.enabled = false
                        
                        esp.maxdist = MathHuge
                        esp.updatespeed = 1
                        
                        esp.colors = {
                            team = Color3.fromRGB(0, 0, 255),
                            enemy = Color3.fromRGB(255, 0, 0)
                        }
                        
                        esp.ignoreteam = false
                        
                        esp.chams = false
                            esp.chams_transparency = 0
                            esp.chams_depth = Enum.HighlightDepthMode.AlwaysOnTop
                        
                        esp.head_dot = false
                        esp.healthbar = false
                        esp.name = false
                        esp.skeleton = false
                        
                        esp.oldupdateframe = tick()
                        
                        esp.cache = {}
                        
                        local function V2MathFloor(pos)
                            return Vector2New(MathFloor(pos.X), MathFloor(pos.Y))
                        end
                        
                        function esp:identify(player)
                            return player.Team == LocalPlayer.Team and esp.colors.team or esp.colors.enemy
                        end
                        
                        function esp:add(player)
                            if esp.cache[player] == nil then
                                local things = {
                                    chams = InstanceNew("Highlight"),
                                    head_dot = DrawingClass({"Circle", {Radius = 5, Visible = false, Transparency = 1, Filled = true}}),
                                    box = DrawingClass({"Square", {Visible = false, Transparency = 1}}),
                                    healthbar = DrawingClass{"Line", {Thickness = 1, ZIndex = 2, Visible = false, Transparency = 1, Color = Color3.fromRGB(0, 255, 0), Filled = false }},
                                    healthbaroutline = DrawingClass{"Line", {Thickness = 3, ZIndex = 1, Visible = false, Transparency = 1, Color = Color3.fromRGB(0, 0, 0), Filled = false}},
                                    name = DrawingClass({"Text", {Transparency = 1, Visible = false, Text = player.Name, Center = true, Size = 20, Font = 2, Color = Color3.fromRGB(255,255,255)}})
                                }
                        
                                things.Head = DrawingClass({"Line", {Visible = false, Transparency = 1, Thickness = 1, ZIndex = 3}})
                                things.Torso = DrawingClass({"Line", {Visible = false, Transparency = 1, Thickness = 1, ZIndex = 3}})
                                things.Torso2 = DrawingClass({"Line", {Visible = false, Transparency = 1, Thickness = 1, ZIndex = 3}})
                                things.Torso3 = DrawingClass({"Line", {Visible = false, Transparency = 1, Thickness = 1, ZIndex = 3}})
                                things.LeftArm = DrawingClass({"Line", {Visible = false, Transparency = 1, Thickness = 1, ZIndex = 3}})
                                things.RightArm = DrawingClass({"Line", {Visible = false, Transparency = 1, Thickness = 1, ZIndex = 3}})
                                things.LeftLeg = DrawingClass({"Line", {Visible = false, Transparency = 1, Thickness = 1, ZIndex = 3}})
                                things.RightLeg = DrawingClass({"Line", {Visible = false, Transparency = 1, Thickness = 1, ZIndex = 3}})
                        
                                things.HeadOutline = DrawingClass({"Line", {Visible = false, Transparency = 1, Thickness = 3, ZIndex = 2, Color = Color3.fromRGB(0,0,0)}})
                                things.TorsoOutline = DrawingClass({"Line", {Visible = false, Transparency = 1, Thickness = 3, ZIndex = 2, Color = Color3.fromRGB(0,0,0)}})
                                things.Torso2Outline = DrawingClass({"Line", {Visible = false, Transparency = 1, Thickness = 3, ZIndex = 2, Color = Color3.fromRGB(0,0,0)}})
                                things.Torso3Outline = DrawingClass({"Line", {Visible = false, Transparency = 1, Thickness = 3, ZIndex = 2, Color = Color3.fromRGB(0,0,0)}})
                                things.LeftArmOutline = DrawingClass({"Line", {Visible = false, Transparency = 1, Thickness = 3, ZIndex = 2, Color = Color3.fromRGB(0,0,0)}})
                                things.RightArmOutline = DrawingClass({"Line", {Visible = false, Transparency = 1, Thickness = 3, ZIndex = 2, Color = Color3.fromRGB(0,0,0)}})
                                things.LeftLegOutline = DrawingClass({"Line", {Visible = false, Transparency = 1, Thickness = 3, ZIndex = 2, Color = Color3.fromRGB(0,0,0)}})
                                things.RightLegOutline = DrawingClass({"Line", {Visible = false, Transparency = 1, Thickness = 3, ZIndex = 2, Color = Color3.fromRGB(0,0,0)}})
                            
                                things.chams.Enabled = false
                                things.chams.OutlineTransparency = 1
                                esp.cache[player] = {entity = player, main = things}
                            end
                        end
                        
                        function esp:remove(player)
                            pcall(function()
                                local player_cache = esp.cache[player]
                                if player_cache.main then
                                    player_cache.main.chams:Destroy()
                                    player_cache.main.head_dot:Remove()
                                    player_cache.main.box:Remove()
                                    player_cache.main.healthbar:Remove()
                                    player_cache.main.healthbaroutline:Remove()
                                    player_cache.main.name:Remove()
                        
                                    player_cache.main.Head:Remove()
                                    player_cache.main.Torso:Remove()
                                    player_cache.main.Torso2:Remove()
                                    player_cache.main.Torso3:Remove()
                                    player_cache.main.LeftArm:Remove()
                                    player_cache.main.RightArm:Remove()
                                    player_cache.main.LeftLeg:Remove()
                                    player_cache.main.RightLeg:Remove()
                        
                                    player_cache.main.HeadOutline:Remove()
                                    player_cache.main.TorsoOutline:Remove()
                                    player_cache.main.Torso2Outline:Remove()
                                    player_cache.main.Torso3Outline:Remove()
                                    player_cache.main.LeftArmOutline:Remove()
                                    player_cache.main.RightArmOutline:Remove()
                                    player_cache.main.LeftLegOutline:Remove()
                                    player_cache.main.RightLegOutline:Remove()
                                end
                            end)
                        end
                        
                        local function ESPWorldToViewport(pos)
                            local newpos = camera:WorldToViewportPoint(camera.CFrame:pointToWorldSpace(camera.CFrame:pointToObjectSpace(pos)))
                            return Vector2.new(newpos.X, newpos.Y)
                        end
                        
                        function esp:calculate()
                            if not ((tick() - esp.oldupdateframe) >= (1/esp.updatespeed)) then
                                return
                            end
                        
                            esp.oldupdateframe = tick()
                        
                            for _, player in pairs(esp.cache) do
                                if not player.main then
                                    
                                end
                        
                                local function disable()
                                    player.main.chams.Enabled = false
                                    player.main.head_dot.Visible = false
                                    player.main.box.Visible = false
                                    player.main.healthbar.Visible = false
                                    player.main.healthbaroutline.Visible = false
                                    player.main.name.Visible = false
                        
                                    player.main.Head.Visible = false
                                    player.main.Torso.Visible = false
                                    player.main.Torso2.Visible = false
                                    player.main.Torso3.Visible = false
                                    player.main.LeftArm.Visible = false
                                    player.main.RightArm.Visible = false
                                    player.main.LeftLeg.Visible = false
                                    player.main.RightLeg.Visible = false
                        
                                    player.main.HeadOutline.Visible = false
                                    player.main.TorsoOutline.Visible = false
                                    player.main.Torso2Outline.Visible = false
                                    player.main.Torso3Outline.Visible = false
                                    player.main.LeftArmOutline.Visible = false
                                    player.main.RightArmOutline.Visible = false
                                    player.main.LeftLegOutline.Visible = false
                                    player.main.RightLegOutline.Visible = false
                                end
                        
                                if not esp.enabled then
                                    disable()
                                    continue
                                end
                        
                                if not player.entity then
                                    disable()
                                    continue
                                end
                        
                                if not player.entity.Character then
                                    disable()
                                    continue
                                end
                        
                                if not universal.functions:is_alive(player.entity) then
                                    disable()
                                    continue
                                end
                        
                                local humanoidrootpart = player.entity.Character:FindFirstChild("HumanoidRootPart")
                                if not humanoidrootpart then
                                    disable()
                                    continue
                                end
                        
                                if (camera.CFrame.Position - humanoidrootpart.Position).Magnitude > esp.maxdist then
                                    disable()
                                    continue
                                end
                        
                                local humscreenpos, onscreen = camera:WorldToViewportPoint(humanoidrootpart.Position)
                                if not onscreen then
                                    disable()
                                    continue
                                end
                        
                                if esp.ignoreteam and player.entity.Team == LocalPlayer.Team then
                                    disable()
                                    continue
                                end
                        
                                local topPos = camera:WorldToViewportPoint((CFrameNew(player.entity.Character.PrimaryPart.Position, player.entity.Character.PrimaryPart.Position + camera.CFrame.lookVector) * CFrameNew(2, 3, 0)).p)
                                local bottomPos = camera:WorldToViewportPoint((CFrameNew(player.entity.Character.PrimaryPart.Position, player.entity.Character.PrimaryPart.Position + camera.CFrame.lookVector) * CFrameNew(-2, -3.5, 0)).p)
                                local sizex, sizey = topPos.X - bottomPos.X, topPos.Y - bottomPos.Y
                                local posx, posy = (humscreenpos.X - sizex / 2),  ((humscreenpos.Y - sizey / 2))
                        
                                if player.main.chams:IsA("Highlight") then
                                    player.main.chams.Enabled = esp.chams
                                    player.main.chams.Parent = player.entity.Character
                                    player.main.chams.FillColor = self:identify(player.entity)
                                    player.main.chams.FillTransparency = esp.chams_transparency
                                    player.main.chams.DepthMode = esp.chams_depth
                                end
                        
                                player.main.box.Position = V2MathFloor(Vector2New(posx, posy))
                                player.main.box.Size = V2MathFloor(Vector2New(sizex, sizey))
                                player.main.box.Visible = esp.box
                                player.main.box.Color = self:identify(player.entity)
                        
                                local healthposy = sizey * math.clamp(player.entity.Character.Humanoid.Health / player.entity.Character.Humanoid.MaxHealth, 0, 1)
                                player.main.healthbar.Visible = esp.healthbar
                                player.main.healthbar.From = V2MathFloor(Vector2New(posx - 4, posy + (sizey - (sizey - healthposy))))
                                player.main.healthbar.To = V2MathFloor(Vector2New(posx - 4, posy))
                                player.main.healthbaroutline.Visible = esp.healthbar
                                player.main.healthbaroutline.From = V2MathFloor(Vector2New(posx - 4, posy))
                                player.main.healthbaroutline.To = V2MathFloor(Vector2New(posx - 4, (posy + sizey)))
                        
                                player.main.name.Visible = esp.name
                                player.main.name.Position = V2MathFloor(Vector2New(posx + (sizex / 2), posy + (sizey - 25)))
                        
                                local head = player.entity.Character:FindFirstChild("Head")
                                if head then
                                    local headpos = head.Position
                                    local headdotpos = camera:WorldToViewportPoint(Vector3New(headpos.x, headpos.y + 0.1, headpos.z))
                                    local headdotpos_b = camera:WorldToViewportPoint(Vector3New(headpos.x, headpos.y - 0.2, headpos.z))
                                    local difference = headdotpos_b.y - headdotpos.y
                                    player.main.head_dot.Position = Vector2New(headdotpos.x, headdotpos_b.y - difference)
                                    player.main.head_dot.Radius = difference * 1
                                    player.main.head_dot.Color = self:identify(player.entity)
                                    player.main.head_dot.Visible = esp.head_dot
                                else
                                    player.main.head_dot.Visible = false
                                end
                        
                                -- we do not want to do all this fucking calculations
                                if esp.skeleton then
                                    local rigcheck = player.entity.Character.Humanoid.RigType == Enum.HumanoidRigType.R6
                                    local head = ESPWorldToViewport((player.entity.Character.Head.CFrame).p)
                                    local toplefttorso = ESPWorldToViewport((player.entity.Character[(rigcheck and "Torso" or "UpperTorso")].CFrame * CFrame.new(-1.5, 0.8, 0)).p)
                                    local toprighttorso = ESPWorldToViewport((player.entity.Character[(rigcheck and "Torso" or "UpperTorso")].CFrame * CFrame.new(1.5, 0.8, 0)).p)
                                    local toptorso = ESPWorldToViewport((player.entity.Character[(rigcheck and "Torso" or "UpperTorso")].CFrame * CFrame.new(0, 0.8, 0)).p)
                                    local bottomtorso = ESPWorldToViewport((player.entity.Character[(rigcheck and "Torso" or "UpperTorso")].CFrame * CFrame.new(0, -0.8, 0)).p)
                                    local bottomlefttorso = ESPWorldToViewport((player.entity.Character[(rigcheck and "Torso" or "UpperTorso")].CFrame * CFrame.new(-0.5, -0.8, 0)).p)
                                    local bottomrighttorso = ESPWorldToViewport((player.entity.Character[(rigcheck and "Torso" or "UpperTorso")].CFrame * CFrame.new(0.5, -0.8, 0)).p)
                                    local leftarm = ESPWorldToViewport((player.entity.Character[(rigcheck and "Left Arm" or "LeftHand")].CFrame * CFrame.new(0, -0.8, 0)).p)
                                    local rightarm = ESPWorldToViewport((player.entity.Character[(rigcheck and "Right Arm" or "RightHand")].CFrame * CFrame.new(0, -0.8, 0)).p)
                                    local leftleg = ESPWorldToViewport((player.entity.Character[(rigcheck and "Left Leg" or "LeftFoot")].CFrame * CFrame.new(0, -0.8, 0)).p)
                                    local rightleg = ESPWorldToViewport((player.entity.Character[(rigcheck and "Right Leg" or "RightFoot")].CFrame * CFrame.new(0, -0.8, 0)).p)
                                    player.main.Torso.From = toplefttorso
                                    player.main.Torso.To = toprighttorso
                                    player.main.Torso2.From = toptorso
                                    player.main.Torso2.To = bottomtorso
                                    player.main.Torso3.From = bottomlefttorso
                                    player.main.Torso3.To = bottomrighttorso
                                    player.main.LeftArm.From = toplefttorso
                                    player.main.LeftArm.To = leftarm
                                    player.main.RightArm.From = toprighttorso
                                    player.main.RightArm.To = rightarm
                                    player.main.LeftLeg.From = bottomlefttorso
                                    player.main.LeftLeg.To = leftleg
                                    player.main.RightLeg.From = bottomrighttorso
                                    player.main.RightLeg.To = rightleg
                                    player.main.Head.From = toptorso
                                    player.main.Head.To = head
                        
                                    player.main.TorsoOutline.From = toplefttorso
                                    player.main.TorsoOutline.To = toprighttorso
                                    player.main.Torso2Outline.From = toptorso
                                    player.main.Torso2Outline.To = bottomtorso
                                    player.main.Torso3Outline.From = bottomlefttorso
                                    player.main.Torso3Outline.To = bottomrighttorso
                                    player.main.LeftArmOutline.From = toplefttorso
                                    player.main.LeftArmOutline.To = leftarm
                                    player.main.RightArmOutline.From = toprighttorso
                                    player.main.RightArmOutline.To = rightarm
                                    player.main.LeftLegOutline.From = bottomlefttorso
                                    player.main.LeftLegOutline.To = leftleg
                                    player.main.RightLegOutline.From = bottomrighttorso
                                    player.main.RightLegOutline.To = rightleg
                                    player.main.HeadOutline.From = toptorso
                                    player.main.HeadOutline.To = head
                                end
                        
                                player.main.Head.Visible = esp.skeleton
                                player.main.Torso.Visible = esp.skeleton
                                player.main.Torso2.Visible = esp.skeleton
                                player.main.Torso3.Visible = esp.skeleton
                                player.main.LeftArm.Visible = esp.skeleton
                                player.main.RightArm.Visible = esp.skeleton
                                player.main.LeftLeg.Visible = esp.skeleton
                                player.main.RightLeg.Visible = esp.skeleton
                        
                                player.main.HeadOutline.Visible = esp.skeleton
                                player.main.TorsoOutline.Visible = esp.skeleton
                                player.main.Torso2Outline.Visible = esp.skeleton
                                player.main.Torso3Outline.Visible = esp.skeleton
                                player.main.LeftArmOutline.Visible = esp.skeleton
                                player.main.RightArmOutline.Visible = esp.skeleton
                                player.main.LeftLegOutline.Visible = esp.skeleton
                                player.main.RightLegOutline.Visible = esp.skeleton
                        
                                player.main.Head.Color = self:identify(player.entity)
                                player.main.Torso.Color = self:identify(player.entity)
                                player.main.Torso2.Color = self:identify(player.entity)
                                player.main.Torso3.Color = self:identify(player.entity)
                                player.main.LeftArm.Color = self:identify(player.entity)
                                player.main.RightArm.Color = self:identify(player.entity)
                                player.main.LeftLeg.Color = self:identify(player.entity)
                                player.main.RightLeg.Color = self:identify(player.entity)
                            end  
                        end
                        
                        local playersTab = Interface:Tab( "players" )
                        local players_esp = playersTab:Section("esp", "left")
                        local esp_Settings = playersTab:Section("settings", "right")
                        local esp_colors = playersTab:Section("colors", "right")
                        
                        players_esp:Toggle({ title = "enabled", default = false, callback = function (bool)
                            esp.enabled = bool
                        
                            if bool then
                                Loops:AddToRenderStepped("ESP", function() 
                                    for i, v in next, playerService:GetPlayers() do
                                        if v == LocalPlayer then continue end
                                        esp:add(v)
                                    end
                                    esp:calculate() 
                                end)
                        
                                connect(playerService.PlayerAdded, function (v)
                                    esp:add(v)
                                end)
                                connect(playerService.PlayerRemoving, function (v)
                                    esp:remove(v)
                                end)
                            else
                                for i, v in next, playerService:GetPlayers() do
                                    esp:remove(v)
                                end
                                Loops:RemoveFromRenderStepped("ESP")
                            end
                        end })
                        
                        players_esp:Toggle({ title = "ignore team", default = false, callback = function (bool)
                            esp.ignoreteam = bool
                        end })
                        
                        players_esp:Toggle({ title = "box", default = false, callback = function (bool)
                            esp.box = bool
                        end })
                        
                        players_esp:Toggle({ title = "healthbar", default = false, callback = function (bool)
                            esp.healthbar = bool
                        end })
                        
                        players_esp:Toggle({ title = "name", default = false, callback = function (bool)
                            esp.name = bool
                        end })
                        
                        players_esp:Toggle({ title = "skeleton", default = false, callback = function (bool)
                            esp.skeleton = bool
                        end })
                        
                        players_esp:Toggle({ title = "chams", default = false, callback = function (bool)
                            esp.chams = bool
                        end })
                        
                        players_esp:Toggle({ title = "head dot", default = false, callback = function (bool)
                            esp.head_dot = bool
                        end })
                        
                        esp_Settings:Slider({ title = "update speed", suffix = "hz", min = 20, max = 1000, float = 1, default = 1000, callback = function (value)
                            esp.updatespeed = value
                        end })
                        
                        esp_Settings:Slider({ title = "max distance", suffix = "m", min = 100, max = 50000, float = 5, default = 50000, callback = function (value)
                            esp.maxdist = value
                        end })
                        
                        esp_Settings:Dropdown({ title = "chams depth mode", values = {"always on top", "occluded"}, default = "always on top", multi = false, callback = function (value)
                            esp.chams_depth = value == "always on top" and Enum.HighlightDepthMode.AlwaysOnTop or Enum.HighlightDepthMode.Occluded
                        end })
                        
                        esp_colors:Colorpicker({ title = "team chams", default = Color3.fromRGB(0, 0, 255), transparency = 0.5, callback = function (value, transparency)
                            esp.colors.team = value
                        end })
                        esp_colors:Colorpicker({ title = "enemy chams", default = Color3.fromRGB(255, 0, 0), transparency = 0.5, callback = function (value, transparency)
                            esp.colors.enemy = value
                        end })
                        
                        
                    end
                    do -- src/Lua/Scripts/universal/components/d_playerlist.lua
                        local players_tab = Interface:Tab( "playerslist" )
                        
                        local players_list = players_tab:Section("main", "left")
                        local advanced = players_tab:Section("advanced", "right")
                        
                        local playerlist = players_list:PlayerList()
                        
                        local player_name = advanced:Label("player name : ...")
                        local index = advanced:Label("player index : ...")
                        
                        advanced:Button({ title = "copy player profile", callback = function ()
                            local current_player = playerlist:GetCurrentPlayer()
                            if current_player then
                                local player_userid = playerService[current_player].UserId
                                local link = ("https://www.roblox.com/users/%s/profile"):format(tostring(player_userid))
                                setclipboard(link)
                            end
                        end })
                        advanced:Button({ title = "copy player userid", callback = function ()
                            local current_player = playerlist:GetCurrentPlayer()
                            if current_player then
                                local player_userid = playerService[current_player].UserId
                                setclipboard(player_userid)
                            end
                        end })
                        
                        local function update_thing()
                            local current_player = playerlist:GetCurrentPlayer()
                            if not current_player then 
                                player_name:ChangeText("player name : ...")
                                index:ChangeText("player index : ...")
                                return
                            end
                        
                            local playersinlist = playerlist:GetPlayers()
                            local indexinlist = 0
                            for i, v in next, playersinlist do
                                if string.find(v.Name, current_player) then
                                    indexinlist = i
                                end
                            end
                        
                            player_name:ChangeText("player name : " .. tostring(current_player))
                            index:ChangeText("player index : " .. tostring(indexinlist))
                        end
                        
                        local loop_update_thing = coroutine.create(function()
                            while wait() do
                                update_thing()
                            end
                        end)
                        coroutine.resume(loop_update_thing)
                    end
                end
                
                UserInterface:KeybindsList()
            end)()
        end
    end
    
    loaderOptions.on_completed(my_script)
end)()

--[[
local Interface = UserInterface:Create{title = 'fatality<font color="rgb(168, 157, 159)">.dev</font>',}

-- asbcixzyubciyabdiaysbcxzc 

local legitTab = Interface:Tab( "legit" )
local rageTab = Interface:Tab( "rage" )

local aim_assist = legitTab:Section("aim assist", "left")
local playerlist = legitTab:Section("players", "right")
local hitbox = rageTab:Section("players", "left")

local toggle_1 = aim_assist:Toggle({ title = "enabled", default = false, callback = function (bool)
    print(bool)
end })
toggle_1:Keybind({ title = "charge", keybindlist = true, keybindname = "charge", callback = function (key)
    print(key)
end })

aim_assist:Button({ title = "click button for free robux.", callback = function ()
    print("free robux generator")
end })

aim_assist:Slider({ title = "fake lag", suffix = "ms", min = 1, max = 10, float = 0.1, callback = function (value)
    print(value)
end })

aim_assist:Label("very cool labels.")
aim_assist:TextBox({ title = "this is a textbox dude", default = "", callback = function (value)
    print(value)
end })

aim_assist:Colorpicker({ title = "very colorpicker", default = Color3.fromRGB(170, 170, 255), transparency = 0.5, callback = function (value)
    print(value)
end })

aim_assist:Keybind({ title = "charge", callback = function (key)
    print(key)
end })

aim_assist:Dropdown({ title = "Cool Dropdon", values = {"one little monkey", "cool"}, default = "cool", multi = true, callback = function (value)
    print(value)
end })


-- why no init function ??
UserInterface:Watermark('syndicate<font color="rgb(129, 127, 127)">.club</font>')
UserInterface:KeybindsList()
playerlist:PlayerList()
hitbox:BoneSelector({ callback = function (value)

end })
]]
   end,
})

local MainTab = Window:CreateTab("üßäAntiLock Scriptsüßä", nil) -- Title, Image

local Button = MainTab:CreateButton({
   Name = "üßäAnti-Locküßä",
   Callback = function()
   loadstring(game:HttpGet("https://raw.githubusercontent.com/Gwaporoblox/Sub-to-vascal/main/Vascal-Antilock-tool"))() 
   end,
})

local MainTab = Window:CreateTab("üßäNeck-Grabsüßä", nil) -- Title, Image

local Button = MainTab:CreateButton({
   Name = "üßäSolo-grabüßä",
   Callback = function()
   getgenv().Settings = {
    ["sigma"] = "https://discord.gg/gDuYQ4DhaR",
}
loadstring(game:HttpGet("https://femboys-for.rent/p/raw/7naxt0bcok"))() 
   end,
})

local Button = MainTab:CreateButton({
   Name = "üßätbo-grabüßä",
   Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/cool5013/TBO/main/TBOscript'))()
   end,
})

local Button = MainTab:CreateButton({
   Name = "üßäNeck-Grab-Setupüßä",
   Callback = function()
          local Grabbed = false
        local Up = false
        
        local LocalPlayer = game:GetService("Players").LocalPlayer
        local ActivateTool = Instance.new("Tool",LocalPlayer.Backpack)
        local Mouse = LocalPlayer:GetMouse()
        ActivateTool.RequiresHandle = false 
        ActivateTool.Name = "Activate"
        ActivateTool.Activated:Connect(function()
        game:GetService("ReplicatedStorage").MainEvent:FireServer('Grabbing', true)
        repeat task.wait(0.1)
        until game.Players.LocalPlayer.Character.BodyEffects.Grabbed.Value ~= nil and game.Players.LocalPlayer.Character.BodyEffects.Grabbed.Value ~= ''
        if game.Players.LocalPlayer.Character.BodyEffects.Grabbed.Value ~= nil and game.Players.LocalPlayer.Character.BodyEffects.Grabbed.Value ~= '' then
        local target = tostring(game.Players.LocalPlayer.Character.BodyEffects.Grabbed.Value)
        Grabbed = true
        game.Players[target].Character:FindFirstChild('GRABBING_CONSTRAINT').H.Length = 99e99
        for i, Track in pairs (game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid"):GetPlayingAnimationTracks()) do
            if Track.Animation.AnimationId == "rbxassetid://11075367458" then
                Track:Stop()
            end
        end 
        spawn(function()
        local Animation = Instance.new("Animation")
        Animation.AnimationId = "rbxassetid://3135389157"
        local LoadAnimation = game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid"):LoadAnimation(Animation)
        LoadAnimation.Priority = Enum.AnimationPriority.Action
        LoadAnimation:Play()
        LoadAnimation:AdjustSpeed(0.2)
        wait(0.8)
        LoadAnimation:AdjustSpeed(0)
        end)
        if game.Players[target].Character.UpperTorso:FindFirstChild("BodyPosition") then
        game.Players[target].Character.UpperTorso:FindFirstChild("BodyPosition"):Destroy()
        game.Players[target].Character.UpperTorso:FindFirstChild("BodyGyro"):Destroy()
        else
        getfenv().bodypos = Instance.new('BodyPosition', game.Players[target].Character.UpperTorso)
        getfenv().bodypos.D = 200
        getfenv().bodypos.MaxForce = Vector3.new(10000,10000,10000)
        getfenv().bodygyro = Instance.new('BodyGyro', game.Players[target].Character.UpperTorso)
        getfenv().bodygyro.MaxTorque = Vector3.new(10000,10000,10000)
        getfenv().bodygyro.D = 100
        end
        game:GetService('RunService'):BindToRenderStep("Pos", 0 , function()
        game.Players[target].Character.UpperTorso.BodyPosition.Position = game.Players.LocalPlayer.Character.RightHand.Position + Vector3.new(0,-0.7,0)
        game.Players[target].Character.UpperTorso.BodyGyro.CFrame = CFrame.new(game.Players[target].Character.UpperTorso.Position, game.Players.LocalPlayer.Character.HumanoidRootPart.Position)
        end)
        else
        game:GetService('RunService'):UnbindFromRenderStep("Pos")
        Grabbed = false
        Up = false
        game.Players[target].Character.UpperTorso:FindFirstChild("BodyPosition"):Destroy()
        game.Players[target].Character.UpperTorso:FindFirstChild("BodyGyro"):Destroy()
        for i, Track in pairs (game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid"):GetPlayingAnimationTracks()) do
                if Track.Animation.AnimationId == "rbxassetid://3135389157" then
                    Track:Stop()
                end
            end 
        end
        game.Players.LocalPlayer.Character.BodyEffects.Grabbed:GetPropertyChangedSignal('Value'):connect(function()
        if game.Players.LocalPlayer.Character.BodyEffects.Grabbed.Value == nil then 
        game:GetService('RunService'):UnbindFromRenderStep("Pos")
        for i, Track in pairs (game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid"):GetPlayingAnimationTracks()) do
                if Track.Animation.AnimationId == "rbxassetid://3135389157" then
                Track:Stop()
                elseif Track.Animation.AnimationId == "rbxassetid://14496531574" then
                Track:Stop()
                elseif Track.Animation.AnimationId == "rbxassetid://3096047107" then
                Track:Stop()
            end
        end 
        end
        end)
        end)
    
    
    
    
        local LocalPlayer = game:GetService("Players").LocalPlayer
        local UpTool = Instance.new("Tool",LocalPlayer.Backpack)
        local Mouse = LocalPlayer:GetMouse()
        UpTool.RequiresHandle = false 
        UpTool.Name = "Up"
        UpTool.Activated:Connect(function()
        if Grabbed == true then
        if Up == false then
        local target = tostring(game.Players.LocalPlayer.Character.BodyEffects.Grabbed.Value)
        Up = true
        for i, Track in pairs (game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid"):GetPlayingAnimationTracks()) do
                if Track.Animation.AnimationId == "rbxassetid://3135389157" then
                Track:Stop()
            end
        end
        spawn(function()
        local Animation = Instance.new("Animation")
        Animation.AnimationId = "rbxassetid://14496531574"
        local LoadAnimation = game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid"):LoadAnimation(Animation)
        LoadAnimation.Priority = Enum.AnimationPriority.Action
        LoadAnimation:Play()
        LoadAnimation:AdjustSpeed(1)
        wait(1)
        LoadAnimation:AdjustSpeed(0)
        end)
        spawn(function()
        wait(0.3)
        game:GetService('RunService'):UnbindFromRenderStep("Pos")
        wait(0.05)
        game:GetService('RunService'):BindToRenderStep("Pos", 0 , function()
        game.Players[target].Character.UpperTorso.BodyPosition.Position =  game.Players.LocalPlayer.Character.HumanoidRootPart.Position + game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector * 8 + Vector3.new(0,23,0)
        game.Players[target].Character.UpperTorso.BodyGyro.CFrame = CFrame.new(game.Players[target].Character.UpperTorso.Position, game.Players.LocalPlayer.Character.HumanoidRootPart.Position)
        end)
        game.Players[target].Character.UpperTorso.BodyPosition.D = 1200
        end)
        else
        for i, Track in pairs (game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid"):GetPlayingAnimationTracks()) do
            if Track.Animation.AnimationId == "rbxassetid://14496531574" then
                Track:Stop(1)
            end
        end
        spawn(function()
        wait(0.45)
        local Animation = Instance.new("Animation")
        Animation.AnimationId = "rbxassetid://3135389157"
        local LoadAnimation = game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid"):LoadAnimation(Animation)
        LoadAnimation.Priority = Enum.AnimationPriority.Action
        LoadAnimation:Play()
        LoadAnimation:AdjustSpeed(0.2)
        task.wait(0.8)
        LoadAnimation:AdjustSpeed(0)
        end)
        local target = tostring(game.Players.LocalPlayer.Character.BodyEffects.Grabbed.Value)
        game:GetService('RunService'):UnbindFromRenderStep("Pos")
        Up = false
        game:GetService('RunService'):BindToRenderStep("Pos", 0 , function()
        game.Players[target].Character.UpperTorso.BodyPosition.Position = game.Players.LocalPlayer.Character.RightHand.Position + Vector3.new(0,-0.7,0)
        game.Players[target].Character.UpperTorso.BodyGyro.CFrame = CFrame.new(game.Players[target].Character.UpperTorso.Position, game.Players.LocalPlayer.Character.HumanoidRootPart.Position)
        end)
        wait(1)
        game.Players[target].Character.UpperTorso.BodyPosition.D = 200
        end
        end
        end)
        
        local LocalPlayer = game:GetService("Players").LocalPlayer
        local ThrowTool = Instance.new("Tool",LocalPlayer.Backpack)
        local Mouse = LocalPlayer:GetMouse()
        ThrowTool.RequiresHandle = false 
        ThrowTool.Name = "Throw"
        ThrowTool.Activated:Connect(function()
        if Grabbed == true then
        if Up == false then
        local target = tostring(game.Players.LocalPlayer.Character.BodyEffects.Grabbed.Value)
            for i, Track in pairs (game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid"):GetPlayingAnimationTracks()) do
                if Track.Animation.AnimationId == "rbxassetid://3135389157" then
                Track:Stop()
            end
        end 
        local Animation = Instance.new("Animation")
        Animation.AnimationId = "rbxassetid://3096047107"
        local LoadAnimation = game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid"):LoadAnimation(Animation)
        LoadAnimation.Priority = Enum.AnimationPriority.Action
        LoadAnimation:Play()
        LoadAnimation:AdjustSpeed(1)
        wait(0.2)
        game.Players[target].Character.UpperTorso.BodyPosition.D = 900
        game:GetService('RunService'):UnbindFromRenderStep("Pos")
        game.Players[target].Character.UpperTorso:FindFirstChild("BodyGyro"):Destroy()
        game.Players[target].Character.UpperTorso.BodyPosition.Position =  game.Players.LocalPlayer.Character.HumanoidRootPart.Position + game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector * 150 + Vector3.new(0,5,0)
        wait(0.5)
        game.Players[target].Character.UpperTorso:FindFirstChild("BodyPosition"):Destroy()
        game:GetService("ReplicatedStorage").MainEvent:FireServer('Grabbing', false)
        end
        end
        end)
        
        local LocalPlayer = game:GetService("Players").LocalPlayer
        local SlamTool = Instance.new("Tool",LocalPlayer.Backpack)
        local Mouse = LocalPlayer:GetMouse()
        SlamTool.RequiresHandle = false 
        SlamTool.Name = "Floar Slam"
        SlamTool.Activated:Connect(function()
        if Grabbed == true then
        if Up == false then
        local target = tostring(game.Players.LocalPlayer.Character.BodyEffects.Grabbed.Value)
            for i, Track in pairs (game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid"):GetPlayingAnimationTracks()) do
                if Track.Animation.AnimationId == "rbxassetid://3135389157" then
                Track:Stop()
            end
        end 
        local target = tostring(game.Players.LocalPlayer.Character.BodyEffects.Grabbed.Value)
        local Animation = Instance.new("Animation")
        Animation.AnimationId = "rbxassetid://14228857569"
        local LoadAnimation = game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid"):LoadAnimation(Animation)
        LoadAnimation.Priority = Enum.AnimationPriority.Action
        LoadAnimation:Play()
        LoadAnimation:AdjustSpeed(1)
        wait(0.1)
        game:GetService('RunService'):UnbindFromRenderStep("Pos")
        game.Players[target].Character.UpperTorso:FindFirstChild("BodyGyro"):Destroy()
        wait(0.01)
        game.Players[target].Character.UpperTorso.BodyPosition.D = 500
        game.Players[target].Character.UpperTorso.BodyPosition.Position =  game.Players.LocalPlayer.Character.HumanoidRootPart.Position + game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector * 5 + Vector3.new(0,350,0)
        wait(0.59)
        game.Players[target].Character.UpperTorso.BodyPosition.D = 100
        game.Players[target].Character.UpperTorso.BodyPosition.Position =  game.Players.LocalPlayer.Character.HumanoidRootPart.Position + game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector * 35 + Vector3.new(0,-100,0)
        wait(0.7)
        game:GetService("ReplicatedStorage").MainEvent:FireServer('Grabbing', false)
        end
        end
        end)
        
        local LocalPlayer = game:GetService("Players").LocalPlayer
        local HeavenTool = Instance.new("Tool",LocalPlayer.Backpack)
        local Mouse = LocalPlayer:GetMouse()
        HeavenTool.RequiresHandle = false 
        HeavenTool.Name = "Heaven Throw"
        HeavenTool.Activated:Connect(function()
        if Grabbed == true then
        if Up == false then
        local target = tostring(game.Players.LocalPlayer.Character.BodyEffects.Grabbed.Value)
            for i, Track in pairs (game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid"):GetPlayingAnimationTracks()) do
                if Track.Animation.AnimationId == "rbxassetid://3135389157" then
                Track:Stop()
            end
        end 
        local Animation = Instance.new("Animation")
        Animation.AnimationId = "rbxassetid://14496531574"
        local LoadAnimation = game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid"):LoadAnimation(Animation)
        LoadAnimation.Priority = Enum.AnimationPriority.Action
        LoadAnimation:Play()
        LoadAnimation:AdjustSpeed(1)
        wait(0.4)
        game:GetService('RunService'):UnbindFromRenderStep("Pos")
        game.Players[target].Character.UpperTorso:FindFirstChild("BodyGyro"):Destroy()
        wait(0.01)
        game.Players[target].Character.UpperTorso.BodyPosition.D = 200
        game.Players[target].Character.UpperTorso.BodyPosition.Position =  game.Players.LocalPlayer.Character.HumanoidRootPart.Position + game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector * 3 + Vector3.new(0,3000,0)
        wait(2)
        game:GetService("ReplicatedStorage").MainEvent:FireServer('Grabbing', false)
        
        end
        end
        end)
        
        
        local LocalPlayer = game:GetService("Players").LocalPlayer
        local KickTool = Instance.new("Tool",LocalPlayer.Backpack)
        local Mouse = LocalPlayer:GetMouse()
        KickTool.RequiresHandle = false 
        KickTool.Name = "Kick"
        KickTool.Activated:Connect(function()
        if Grabbed == true then
        if Up == false then
        local target = tostring(game.Players.LocalPlayer.Character.BodyEffects.Grabbed.Value)
            for i, Track in pairs (game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid"):GetPlayingAnimationTracks()) do
                if Track.Animation.AnimationId == "rbxassetid://3135389157" then
                Track:Stop()
            end
        end 
        local Animation = Instance.new("Animation")
        Animation.AnimationId = "rbxassetid://14228857569"
        local LoadAnimation = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(Animation)
        LoadAnimation.Priority = Enum.AnimationPriority.Action
        LoadAnimation:Play()
        LoadAnimation:AdjustSpeed(0.55)
        wait(0.2)
        wait(0.2)
        game:GetService('RunService'):UnbindFromRenderStep("Pos")
        game.Players[target].Character.UpperTorso:FindFirstChild("BodyGyro"):Destroy()
        game.Players[target].Character.UpperTorso.BodyPosition.D = 900
        game.Players[target].Character.UpperTorso.BodyPosition.Position =  game.Players.LocalPlayer.Character.HumanoidRootPart.Position + game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector * 3 + Vector3.new(0,80,0)
        wait(0.4)
        LoadAnimation:Stop(0.5)
        wait(0.3)
        game.Players[target].Character.UpperTorso:FindFirstChild("BodyPosition"):Destroy()
        wait(0.15)
        local Animation = Instance.new("Animation")
        Animation.AnimationId = "rbxassetid://2788306916"
        local LoadAnimation = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(Animation)
        LoadAnimation.Priority = Enum.AnimationPriority.Action
        LoadAnimation:Play()
        wait(0.9)
        for i = 1,2 do
        wait()
        game.Players[target].Character.UpperTorso.Velocity = Vector3.new(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector.X*450,300,game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector.Z*450)
        end
        wait(1)
        game:GetService("ReplicatedStorage").MainEvent:FireServer('Grabbing', false)
        end
        end
        end)
        
        
        local LocalPlayer = game:GetService("Players").LocalPlayer
        local PunchTool = Instance.new("Tool",LocalPlayer.Backpack)
        local Mouse = LocalPlayer:GetMouse()
        PunchTool.RequiresHandle = false 
        PunchTool.Name = "Punch"
        PunchTool.Activated:Connect(function()
        if Grabbed == true then
        if Up == false then
        local target = tostring(game.Players.LocalPlayer.Character.BodyEffects.Grabbed.Value)
            for i, Track in pairs (game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid"):GetPlayingAnimationTracks()) do
                if Track.Animation.AnimationId == "rbxassetid://3135389157" then
                Track:Stop()
            end
        end 
        game:GetService('RunService'):UnbindFromRenderStep("Pos")
        game:GetService('RunService'):BindToRenderStep("Pos", 0 , function()
        game.Players[target].Character.UpperTorso.BodyGyro.CFrame = CFrame.new(game.Players[target].Character.UpperTorso.Position, game.Players.LocalPlayer.Character.HumanoidRootPart.Position)
        end)
        game.Players[target].Character.UpperTorso.BodyPosition.D = 1200
        game.Players[target].Character.UpperTorso.BodyPosition.Position = game.Players.LocalPlayer.Character.HumanoidRootPart.Position + game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector * 9 + Vector3.new(0,1,0)
        wait(3)
        local Animation = Instance.new("Animation")
        Animation.AnimationId = "rbxassetid://3354696735"
        local LoadAnimation = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(Animation)
        LoadAnimation.Priority = Enum.AnimationPriority.Action
        LoadAnimation:Play()
        wait(1)
        game.Players[target].Character.UpperTorso:FindFirstChild("BodyPosition"):Destroy()
        game:GetService('RunService'):UnbindFromRenderStep("Pos")
        game.Players[target].Character.UpperTorso:FindFirstChild("BodyGyro"):Destroy()
        for i = 1,2 do
            wait()
            game.Players[target].Character.UpperTorso.Velocity = Vector3.new(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector.X*950,-200,game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector.Z*950)
            end
        end
        end
        wait(1)
        game:GetService("ReplicatedStorage").MainEvent:FireServer('Grabbing', false)
        end)

    local LocalPlayer = game:GetService("Players").LocalPlayer
    local RipTool = Instance.new("Tool",LocalPlayer.Backpack)
    local Mouse = LocalPlayer:GetMouse()
    RipTool.RequiresHandle = false 
    RipTool.Name = "Rip In Half"
    RipTool.Activated:Connect(function()
    if Grabbed == true then
    if Up == false then
        local target = tostring(game.Players.LocalPlayer.Character.BodyEffects.Grabbed.Value)
        for i, Track in pairs (game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid"):GetPlayingAnimationTracks()) do
            if Track.Animation.AnimationId == "rbxassetid://3135389157" then
            Track:Stop()
        end
    end
    local Animation1 = Instance.new("Animation")
    Animation1.AnimationId = "rbxassetid://13850666420"
    local LoadAnimation1 = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(Animation1)
    LoadAnimation1.Priority = Enum.AnimationPriority.Action
    LoadAnimation1:Play()
    local Animation2 = Instance.new("Animation")
    Animation2.AnimationId = "rbxassetid://13850675130"
    local LoadAnimation2 = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):LoadAnimation(Animation2)
    LoadAnimation2.Priority = Enum.AnimationPriority.Action
    LoadAnimation2:Play()
    game:GetService('RunService'):UnbindFromRenderStep("Pos")
    game:GetService('RunService'):BindToRenderStep("Pos", 0 , function()
    game.Players[target].Character.UpperTorso.BodyGyro.CFrame = CFrame.new(game.Players[target].Character.UpperTorso.Position, game.Players.LocalPlayer.Character.HumanoidRootPart.Position)
    game.Players[target].Character.UpperTorso.BodyPosition.Position = game.Players.LocalPlayer.Character.HumanoidRootPart.Position + game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector * 2 + Vector3.new(0,0.2,0)
    end)
    game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("SayMessageRequest"):FireServer("Im gonna rip you in half now.", "All")
    task.wait(2.30)
    task.wait(0.2)
    game.Players[target].Character.LowerTorso.Position = Vector3.new(0,-600,0)
    game:GetService('RunService'):UnbindFromRenderStep("Pos")
    task.wait(0.2)
    game.Players[target].Character.UpperTorso:FindFirstChild("BodyPosition"):Destroy()
    game.Players[target].Character.UpperTorso:FindFirstChild("BodyGyro"):Destroy()
    task.wait(0.1)
    game.Players[target].Character.UpperTorso.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.RightVector*90
    game.Players[target].Character.RightUpperLeg.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.RightVector*-90
    game.Players[target].Character.LeftUpperLeg.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.RightVector*-90
    task.wait(0.3)
    game:GetService("ReplicatedStorage").MainEvent:FireServer('Grabbing', false)
    task.wait(0.2)
    LoadAnimation1:Stop(0.3)
    LoadAnimation2:Stop(0.3)
    end
    end
    end)

    local LocalPlayer = game:GetService("Players").LocalPlayer
    local HellTool = Instance.new("Tool",LocalPlayer.Backpack)
    local Mouse = LocalPlayer:GetMouse()
    HellTool.RequiresHandle = false 
    HellTool.Name = "Go TO HELL"
    HellTool.Activated:Connect(function()
    if Grabbed == true then
    if Up == false then
    local target = tostring(game.Players.LocalPlayer.Character.BodyEffects.Grabbed.Value)
    wait(0.9)
    for i, Track in pairs (game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid"):GetPlayingAnimationTracks()) do
        if Track.Animation.AnimationId == "rbxassetid://3135389157" then
            Track:Stop()
        end
    end
    game.Players[target].Character.UpperTorso.BodyPosition.D = 1200
    game:GetService('RunService'):UnbindFromRenderStep("Pos")
    game:GetService('RunService'):BindToRenderStep("Pos", 0 , function()
    game.Players[target].Character.UpperTorso.BodyGyro.CFrame = CFrame.new(game.Players[target].Character.UpperTorso.Position, game.Players.LocalPlayer.Character.HumanoidRootPart.Position)
    end)
    game.Players[target].Character.UpperTorso.BodyPosition.Position = game.Players.LocalPlayer.Character.HumanoidRootPart.Position + game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector * 10 + Vector3.new(0,1.4,0)
    local Animation = Instance.new("Animation")
    Animation.AnimationId = "rbxassetid://14774699952"
    local LoadAnimation = game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid"):LoadAnimation(Animation)
    LoadAnimation.Priority = Enum.AnimationPriority.Action
    LoadAnimation:Play()
    LoadAnimation:AdjustSpeed(0.09)
    wait(9)
    game.Players[target].Character.UpperTorso:FindFirstChild("BodyPosition"):Destroy()
    game.Players[target].Character.UpperTorso:FindFirstChild("BodyGyro"):Destroy()
    for i , v in pairs(game.Players[target].Character:GetChildren()) do
    if v:IsA("MeshPart") then
    v.Position = Vector3.new(0,-600,0)
    end
    end
    wait(0.2)
    game:GetService("ReplicatedStorage").MainEvent:FireServer('Grabbing', false)
    end
    end
    end)




    
    spawn(function()
        getgenv().Bat = false
        getgenv().BatFling = false
        game:GetService("RunService").Heartbeat:Connect(function()
        if getgenv().BatFling == true then 
        local Vel = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
        game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector.X*350,340,game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector.Z*350)
        game:GetService("RunService").RenderStepped:Wait()
        game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = Vel
        end 
        end)
        game.Players.LocalPlayer.Backpack:WaitForChild("[Bat]")
        wait(0.05)
        game.Players.LocalPlayer.Backpack["[Bat]"].Activated:Connect(function()
        if getgenv().Bat == false then
        getgenv().Bat = true
        game.Players.LocalPlayer.Character:FindFirstChild("[Bat]"):Deactivate()
        wait(0.6)
        getgenv().BatFling = true
        wait(1.6)
        getgenv().BatFling = false
        getgenv().Bat = false
        else
        end
        end)
        end)
   end,
})
local MainTab = Window:CreateTab("üßäChat-Bypassüßä", nil) -- Title, Image
local Button = MainTab:CreateButton({
   Name = "üßäEmoji-Bypassüßä",
   Callback = function()
   loadstring(game:HttpGet("https://raw.githubusercontent.com/UnknownUser2883/NotBypass/main/Haha"))()
   end,
})
